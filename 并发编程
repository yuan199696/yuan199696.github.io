<!-- build time:Sun Dec 26 2021 19:05:58 GMT+0800 (中国标准时间) --><!DOCTYPE html><html lang="zh-CN,en,default"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=2"><meta name="theme-color" content="#FFF"><link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png"><link rel="icon" type="image/ico" sizes="32x32" href="/images/favicon.ico"><meta http-equiv="Cache-Control" content="no-transform"><meta http-equiv="Cache-Control" content="no-siteapp"><link rel="alternate" type="application/rss+xml" href="https://baiyezi.vip/rss.xml"><link rel="alternate" type="application/atom+xml" href="https://baiyezi.vip/atom.xml"><link rel="alternate" type="application/json" href="https://baiyezi.vip/feed.json"><link rel="stylesheet" href="//fonts.googleapis.com/css?family=Mulish:300,300italic,400,400italic,700,700italic%7CFredericka%20the%20Great:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20JP:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20SC:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext"><link rel="stylesheet" href="/css/app.css?v=0.2.5"><meta name="keywords" content="Java,多线程与高并发"><link rel="canonical" href="https://baiyezi.vip/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B"><title>并发编程 - Java |</title><meta name="generator" content="Hexo 5.4.0"></head><body itemscope itemtype="http://schema.org/WebPage"><div id="loading"><div class="cat"><div class="body"></div><div class="head"><div class="face"></div></div><div class="foot"><div class="tummy-end"></div><div class="bottom"></div><div class="legs left"></div><div class="legs right"></div></div><div class="paw"><div class="hands left"></div><div class="hands right"></div></div></div></div><div id="container"><header id="header" itemscope itemtype="http://schema.org/WPHeader"><div class="inner"><div id="brand"><div class="pjax"><h1 itemprop="name headline">并发编程</h1><div class="meta"><span class="item" title="创建时间：2021-03-08 20:06:45"><span class="icon"><i class="ic i-calendar"></i> </span><span class="text">发表于</span> <time itemprop="dateCreated datePublished" datetime="2021-03-08T20:06:45+08:00">2021-03-08</time> </span><span class="item" title="本文字数"><span class="icon"><i class="ic i-pen"></i> </span><span class="text">本文字数</span> <span>25k</span> <span class="text">字</span> </span><span class="item" title="阅读时长"><span class="icon"><i class="ic i-clock"></i> </span><span class="text">阅读时长</span> <span>23 分钟</span> </span><span id="/并发编程" class="item leancloud_visitors" data-flag-title="" title="阅读次数"><span class="icon"><i class="ic i-eye"></i> </span><span class="text">阅读次数</span> <span class="leancloud-visitors-count"></span></span></div></div></div><nav id="nav"><div class="inner"><div class="toggle"><div class="lines" aria-label="切换导航栏"><span class="line"></span> <span class="line"></span> <span class="line"></span></div></div><ul class="menu"><li class="item title"><a href="/" rel="start"></a></li></ul><ul class="right"><li class="item theme"><i class="ic i-sun"></i></li><li class="item search"><i class="ic i-search"></i></li></ul></div></nav></div><div id="imgs" class="pjax"><ul><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105420.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105008.png"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225104957.png"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105422.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105423.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105421.jpg"></li></ul></div></header><div id="waves"><svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"/></defs><g class="parallax"><use xlink:href="#gentle-wave" x="48" y="0"/><use xlink:href="#gentle-wave" x="48" y="3"/><use xlink:href="#gentle-wave" x="48" y="5"/><use xlink:href="#gentle-wave" x="48" y="7"/></g></svg></div><main><div class="inner"><div id="main" class="pjax"><div class="article wrap"><div class="breadcrumb" itemscope itemtype="https://schema.org/BreadcrumbList"><i class="ic i-home"></i> <span><a href="/">首页</a></span><i class="ic i-angle-right"></i> <span class="current" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/categories/java/" itemprop="item" rel="index" title="分类于 Java"><span itemprop="name">Java</span></a><meta itemprop="position" content="1"></span></div><article itemscope itemtype="http://schema.org/Article" class="post block" lang="zh-CN"><link itemprop="mainEntityOfPage" href="https://baiyezi.vip/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B"><span hidden itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="image" content="/images/avatar.png"><meta itemprop="name" content="fanfanfan"><meta itemprop="description" content=", 花有重开日，人无再少年"></span><span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization"><meta itemprop="name" content=""></span><div class="body md" itemprop="articleBody"><h2 id="并发编程的三大特性"><a class="anchor" href="#并发编程的三大特性">#</a> 并发编程的三大特性</h2><h3 id="可见性visibility"><a class="anchor" href="#可见性visibility">#</a> 可见性（visibility）</h3><h4 id="volatile修饰基本类型"><a class="anchor" href="#volatile修饰基本类型">#</a> volatile 修饰基本类型</h4><p>一个线程修改了一个变量的值，其他线程是否对修改后的变量值可见</p><p>当以下程序中不加 volatile 时，线程 t1 无法结束，因为主线程对变量 running 的修改对于 t1 线程是不可见的。因为线程读取的变量值是主存中变量值的拷贝，各个线程对变量值的修改都是修改各自内存中变量的拷贝值，修改结果对其他线程不可见。所以，volatile 的作用就是：对于 volatile 修饰的内存中的变量，其他线程对于该变量的修改会立即将修改结果刷新到主存，且主存会将该变量同步到其他有该变量的线程中。其次，以下代码中如果加了 System.out.println (&quot;hello&quot;); 输出语句的话，也是可以保证可见性的，因为输出语句底层加了 synchronized，该关键字可以保证可见性</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">fan<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentThread</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">fan<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">SleepHelper</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ServiceLoader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="8"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="9"></td><td><pre> * @DateTime: 2021-03-22 15:41</pre></td></tr><tr><td data-num="10"></td><td><pre> **/</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloVolatile</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token comment">/*volatile*/</span> <span class="token keyword">boolean</span> running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token comment">//System.out.println("hello");</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m end!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token class-name">HelloVolatile</span> helloVolatile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloVolatile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">HelloVolatile</span><span class="token operator">::</span><span class="token function">m</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token class-name">SleepHelper</span><span class="token punctuation">.</span><span class="token function">sleepSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>        running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210322155920480.png" alt="image-20210322155920480"></p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210322160040647.png" alt="image-20210322160040647"></p><h4 id="volatile修饰引用了类型"><a class="anchor" href="#volatile修饰引用了类型">#</a> volatile 修饰引用了类型</h4><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">fan<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentThread</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">fan<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">SleepHelper</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="6"></td><td><pre> * volatile 修饰的引用类型（包括数组）只能保证引用本身的可见性，不能保证类内部字段的可见性</pre></td></tr><tr><td data-num="7"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="8"></td><td><pre> * @DateTime: 2021-03-22 16:24</pre></td></tr><tr><td data-num="9"></td><td><pre> **/</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileReference</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">boolean</span> running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">void</span> m <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m end!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>a<span class="token operator">::</span><span class="token function">m</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token class-name">SleepHelper</span><span class="token punctuation">.</span><span class="token function">sleepSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        a<span class="token punctuation">.</span>running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h4 id="三级缓存"><a class="anchor" href="#三级缓存">#</a> 三级缓存</h4><p>CPU 读取数据时会先从寄存器中寻找，如果没有就依次去 L1、L2、L3 缓存找，最后去内存找，从内存返回数据，依次经过 L3、L2、L1、寄存器</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210322164230586.png" alt="image-20210322164230586"></p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210322164341428.png" alt="image-20210322164341428"></p><h4 id="缓存行"><a class="anchor" href="#缓存行">#</a> 缓存行</h4><p>CPU 从内存读取数据时是按块（缓存行，cacheline）读取的，充分发挥总线 CPU 针脚等一次性读取更多数据的能力。缓存行大小为 64 字节，这是实践中得到的折中值。</p><p>空间局部性原理：当读取数据时会一次性读取周边关联的数据到内存，因为这些数据有很大的概率被使用</p><p>时间局部性原理：当读取指令时会一次性读取相关指令到内存，因为这些指令有很大概率被使用</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210322165845567.png" alt="image-20210322165845567"></p><p>例如：当左边 CPU 只访问 X 时，会把位于同一个缓存行的 Y 也读取到左边 CPU，右边 CPU 只访问 Y 也是如此。这就导致当 X 做了修改后需要有一种机制来保证 X 的修改能被同步到右边 CPU 的缓存行中，而这样做的效率是比较地的，为此可以，在 X 的前后各加 7 个 long 类型的变量，保证 X 和前面七个或者后面七个 long 类型的变量处于同一个缓存行，而不与 Y 处于同一个缓存行，这样 X 值更改后不用再去通知其他含有 X 的缓存行，极大的提高了效率。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">fan<span class="token punctuation">.</span>cacheLine</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">T02_CacheLinePadding</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Padding</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p4<span class="token punctuation">,</span> p5<span class="token punctuation">,</span> p6<span class="token punctuation">,</span> p7<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Padding</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000_0000L</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000_0000L</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">final</span> <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100_0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h4 id="缓存一致性协议"><a class="anchor" href="#缓存一致性协议">#</a> 缓存一致性协议</h4><p>缓存一致性协议有很多，如 MESI、MSI、MMOSI 等，不同的 CPU 采用不同的缓存一致性协议。Inter 采用 MESI 一致性协议，指的是缓存行的四种状态：修改、独享、分享、失效</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210322190505575.png" alt="image-20210322190505575"></p><h3 id="有序性ordering"><a class="anchor" href="#有序性ordering">#</a> 有序性（ordering）</h3><p>为何会出现乱序？</p><p>CPU 为了提高程序的执行效率，会优化指令的执行顺序，对指令进行重排序，如果前后语句有依赖关系，那么这些语句不会被重排序</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210323094216422.png" alt="image-20210323094216422"></p><h4 id="可以重排序的条件"><a class="anchor" href="#可以重排序的条件">#</a> 可以重排序的条件</h4><p>as-if-serial：看上去是单线程执行的</p><p>不影响单线程的最终一致性：语句之间没有前后的依赖关系</p><h4 id="一个例子"><a class="anchor" href="#一个例子">#</a> 一个例子</h4><p>对象创建过程：</p><p>new：分配内存并给对象中的成员变量赋默认值，如下 m=0</p><p>invokespecial：调用构造方法进行初始化，此时给对象中的成员变量赋初始值，初始化完成，如下 m=8</p><p>astore：将初始化好的对象赋值给引用，如下 T t = new T ();</p><p>而在这个过程中指令 invokespecial 与指令 astore 可能会重排序，导致先建立到对象的引用，还没有初始化对象中的成员变量，那么在调用构造方法之前得到的成员变量的值就是默认值</p><p><img data-src="%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.assets/image-20210323110749715.png" alt="image-20210323110749715"></p><h3 id="原子性atomicity"><a class="anchor" href="#原子性atomicity">#</a> 原子性（atomicity）</h3><h2 id="多线程体系"><a class="anchor" href="#多线程体系">#</a> 多线程体系</h2><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210323113859116.png" alt="image-20210323113859116"></p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210323154244667.png" alt="image-20210323154244667"></p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210323172210823.png" alt="image-20210323172210823"></p><h3 id="executor接口"><a class="anchor" href="#executor接口">#</a> Executor 接口</h3><p>线程顶级接口，定义了一个执行无返回值的任务的方法</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="3"></td><td><pre>* 执行无返回值任务</pre></td></tr><tr><td data-num="4"></td><td><pre>* 根据 Executor 的实现判断，可能是在新线程、线程池、线程调用中执行</pre></td></tr><tr><td data-num="5"></td><td><pre>*/</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="7"></td><td><pre>     * Executes the given command at some time in the future.  The command</pre></td></tr><tr><td data-num="8"></td><td><pre>     * may execute in a new thread, in a pooled thread, or in the calling</pre></td></tr><tr><td data-num="9"></td><td><pre>     * thread, at the discretion of the &#123;@code Executor&#125; implementation.</pre></td></tr><tr><td data-num="10"></td><td><pre>     *</pre></td></tr><tr><td data-num="11"></td><td><pre>     * @param command the runnable task</pre></td></tr><tr><td data-num="12"></td><td><pre>     * @throws RejectedExecutionException if this task cannot be</pre></td></tr><tr><td data-num="13"></td><td><pre>     * accepted for execution</pre></td></tr><tr><td data-num="14"></td><td><pre>     * @throws NullPointerException if command is null</pre></td></tr><tr><td data-num="15"></td><td><pre>     */</pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="executorservice接口"><a class="anchor" href="#executorservice接口">#</a> ExecutorService 接口</h3><p>继承了 Executor 接口，代表在执行线程的功能上扩展了一些操作线程池的方法</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExecutorService</span> <span class="token keyword">extends</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     * Initiates an orderly shutdown in which previously submitted</pre></td></tr><tr><td data-num="5"></td><td><pre>     * tasks are executed, but no new tasks will be accepted.</pre></td></tr><tr><td data-num="6"></td><td><pre>     * Invocation has no additional effect if already shut down.</pre></td></tr><tr><td data-num="7"></td><td><pre>     *</pre></td></tr><tr><td data-num="8"></td><td><pre>     * &lt;p>This method does not wait for previously submitted tasks to</pre></td></tr><tr><td data-num="9"></td><td><pre>     * complete execution.  Use &#123;@link #awaitTermination awaitTermination&#125;</pre></td></tr><tr><td data-num="10"></td><td><pre>     * to do that.</pre></td></tr><tr><td data-num="11"></td><td><pre>     *</pre></td></tr><tr><td data-num="12"></td><td><pre>     * @throws SecurityException if a security manager exists and</pre></td></tr><tr><td data-num="13"></td><td><pre>     *         shutting down this ExecutorService may manipulate</pre></td></tr><tr><td data-num="14"></td><td><pre>     *         threads that the caller is not permitted to modify</pre></td></tr><tr><td data-num="15"></td><td><pre>     *         because it does not hold &#123;@link</pre></td></tr><tr><td data-num="16"></td><td><pre>     *         java.lang.RuntimePermission&#125;&#123;@code ("modifyThread")&#125;,</pre></td></tr><tr><td data-num="17"></td><td><pre>     *         or the security manager's &#123;@code checkAccess&#125; method</pre></td></tr><tr><td data-num="18"></td><td><pre>     *         denies access.</pre></td></tr><tr><td data-num="19"></td><td><pre>     */</pre></td></tr><tr><td data-num="20"></td><td><pre>    </pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    * 关闭线程池，不再接收新任务。但已提交的任务会执行完成</pre></td></tr><tr><td data-num="23"></td><td><pre>    */</pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="27"></td><td><pre>     * Attempts to stop all actively executing tasks, halts the</pre></td></tr><tr><td data-num="28"></td><td><pre>     * processing of waiting tasks, and returns a list of the tasks</pre></td></tr><tr><td data-num="29"></td><td><pre>     * that were awaiting execution.</pre></td></tr><tr><td data-num="30"></td><td><pre>     *</pre></td></tr><tr><td data-num="31"></td><td><pre>     * &lt;p>This method does not wait for actively executing tasks to</pre></td></tr><tr><td data-num="32"></td><td><pre>     * terminate.  Use &#123;@link #awaitTermination awaitTermination&#125; to</pre></td></tr><tr><td data-num="33"></td><td><pre>     * do that.</pre></td></tr><tr><td data-num="34"></td><td><pre>     *</pre></td></tr><tr><td data-num="35"></td><td><pre>     * &lt;p>There are no guarantees beyond best-effort attempts to stop</pre></td></tr><tr><td data-num="36"></td><td><pre>     * processing actively executing tasks.  For example, typical</pre></td></tr><tr><td data-num="37"></td><td><pre>     * implementations will cancel via &#123;@link Thread#interrupt&#125;, so any</pre></td></tr><tr><td data-num="38"></td><td><pre>     * task that fails to respond to interrupts may never terminate.</pre></td></tr><tr><td data-num="39"></td><td><pre>     *</pre></td></tr><tr><td data-num="40"></td><td><pre>     * @return list of tasks that never commenced execution</pre></td></tr><tr><td data-num="41"></td><td><pre>     * @throws SecurityException if a security manager exists and</pre></td></tr><tr><td data-num="42"></td><td><pre>     *         shutting down this ExecutorService may manipulate</pre></td></tr><tr><td data-num="43"></td><td><pre>     *         threads that the caller is not permitted to modify</pre></td></tr><tr><td data-num="44"></td><td><pre>     *         because it does not hold &#123;@link</pre></td></tr><tr><td data-num="45"></td><td><pre>     *         java.lang.RuntimePermission&#125;&#123;@code ("modifyThread")&#125;,</pre></td></tr><tr><td data-num="46"></td><td><pre>     *         or the security manager's &#123;@code checkAccess&#125; method</pre></td></tr><tr><td data-num="47"></td><td><pre>     *         denies access.</pre></td></tr><tr><td data-num="48"></td><td><pre>     */</pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="50"></td><td><pre>     * 立即关闭线程池，尝试停止正在运行的任务，未执行的任务将不再执行</pre></td></tr><tr><td data-num="51"></td><td><pre>     * 被迫停止及未执行的任务将以列表的形式返回</pre></td></tr><tr><td data-num="52"></td><td><pre>    */</pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="56"></td><td><pre>     * Returns &#123;@code true&#125; if this executor has been shut down.</pre></td></tr><tr><td data-num="57"></td><td><pre>     *</pre></td></tr><tr><td data-num="58"></td><td><pre>     * @return &#123;@code true&#125; if this executor has been shut down</pre></td></tr><tr><td data-num="59"></td><td><pre>     */</pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="61"></td><td><pre>     * 检查线程池是否已经关闭</pre></td></tr><tr><td data-num="62"></td><td><pre>    */</pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token keyword">boolean</span> <span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="66"></td><td><pre>     * Returns &#123;@code true&#125; if all tasks have completed following shut down.</pre></td></tr><tr><td data-num="67"></td><td><pre>     * Note that &#123;@code isTerminated&#125; is never &#123;@code true&#125; unless</pre></td></tr><tr><td data-num="68"></td><td><pre>     * either &#123;@code shutdown&#125; or &#123;@code shutdownNow&#125; was called first.</pre></td></tr><tr><td data-num="69"></td><td><pre>     *</pre></td></tr><tr><td data-num="70"></td><td><pre>     * @return &#123;@code true&#125; if all tasks have completed following shut down</pre></td></tr><tr><td data-num="71"></td><td><pre>     */</pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="73"></td><td><pre>     * 检查线程池是否已终止，只有在 shutdown () 或 shundownNow () 之后调用才有可能为 true</pre></td></tr><tr><td data-num="74"></td><td><pre>    */</pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token keyword">boolean</span> <span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="78"></td><td><pre>     * Blocks until all tasks have completed execution after a shutdown</pre></td></tr><tr><td data-num="79"></td><td><pre>     * request, or the timeout occurs, or the current thread is</pre></td></tr><tr><td data-num="80"></td><td><pre>     * interrupted, whichever happens first.</pre></td></tr><tr><td data-num="81"></td><td><pre>     *</pre></td></tr><tr><td data-num="82"></td><td><pre>     * @param timeout the maximum time to wait</pre></td></tr><tr><td data-num="83"></td><td><pre>     * @param unit the time unit of the timeout argument</pre></td></tr><tr><td data-num="84"></td><td><pre>     * @return &#123;@code true&#125; if this executor terminated and</pre></td></tr><tr><td data-num="85"></td><td><pre>     *         &#123;@code false&#125; if the timeout elapsed before termination</pre></td></tr><tr><td data-num="86"></td><td><pre>     * @throws InterruptedException if interrupted while waiting</pre></td></tr><tr><td data-num="87"></td><td><pre>     */</pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="89"></td><td><pre>     * 在指定时间内线程池达到终止状态了才会返回 true</pre></td></tr><tr><td data-num="90"></td><td><pre>    */</pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token keyword">boolean</span> <span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="92"></td><td><pre>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre></pre></td></tr><tr><td data-num="94"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="95"></td><td><pre>     * Submits a value-returning task for execution and returns a</pre></td></tr><tr><td data-num="96"></td><td><pre>     * Future representing the pending results of the task. The</pre></td></tr><tr><td data-num="97"></td><td><pre>     * Future's &#123;@code get&#125; method will return the task's result upon</pre></td></tr><tr><td data-num="98"></td><td><pre>     * successful completion.</pre></td></tr><tr><td data-num="99"></td><td><pre>     *</pre></td></tr><tr><td data-num="100"></td><td><pre>     * &lt;p></pre></td></tr><tr><td data-num="101"></td><td><pre>     * If you would like to immediately block waiting</pre></td></tr><tr><td data-num="102"></td><td><pre>     * for a task, you can use constructions of the form</pre></td></tr><tr><td data-num="103"></td><td><pre>     * &#123;@code result = exec.submit(aCallable).get();&#125;</pre></td></tr><tr><td data-num="104"></td><td><pre>     *</pre></td></tr><tr><td data-num="105"></td><td><pre>     * &lt;p>Note: The &#123;@link Executors&#125; class includes a set of methods</pre></td></tr><tr><td data-num="106"></td><td><pre>     * that can convert some other common closure-like objects,</pre></td></tr><tr><td data-num="107"></td><td><pre>     * for example, &#123;@link java.security.PrivilegedAction&#125; to</pre></td></tr><tr><td data-num="108"></td><td><pre>     * &#123;@link Callable&#125; form so they can be submitted.</pre></td></tr><tr><td data-num="109"></td><td><pre>     *</pre></td></tr><tr><td data-num="110"></td><td><pre>     * @param task the task to submit</pre></td></tr><tr><td data-num="111"></td><td><pre>     * @param &lt;T> the type of the task's result</pre></td></tr><tr><td data-num="112"></td><td><pre>     * @return a Future representing pending completion of the task</pre></td></tr><tr><td data-num="113"></td><td><pre>     * @throws RejectedExecutionException if the task cannot be</pre></td></tr><tr><td data-num="114"></td><td><pre>     *         scheduled for execution</pre></td></tr><tr><td data-num="115"></td><td><pre>     * @throws NullPointerException if the task is null</pre></td></tr><tr><td data-num="116"></td><td><pre>     */</pre></td></tr><tr><td data-num="117"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="118"></td><td><pre>     * 执行有返回值的任务，任务的返回值为 task.call () 的结果</pre></td></tr><tr><td data-num="119"></td><td><pre>    */</pre></td></tr><tr><td data-num="120"></td><td><pre>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="121"></td><td><pre></pre></td></tr><tr><td data-num="122"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="123"></td><td><pre>     * Submits a Runnable task for execution and returns a Future</pre></td></tr><tr><td data-num="124"></td><td><pre>     * representing that task. The Future's &#123;@code get&#125; method will</pre></td></tr><tr><td data-num="125"></td><td><pre>     * return the given result upon successful completion.</pre></td></tr><tr><td data-num="126"></td><td><pre>     *</pre></td></tr><tr><td data-num="127"></td><td><pre>     * @param task the task to submit</pre></td></tr><tr><td data-num="128"></td><td><pre>     * @param result the result to return</pre></td></tr><tr><td data-num="129"></td><td><pre>     * @param &lt;T> the type of the result</pre></td></tr><tr><td data-num="130"></td><td><pre>     * @return a Future representing pending completion of the task</pre></td></tr><tr><td data-num="131"></td><td><pre>     * @throws RejectedExecutionException if the task cannot be</pre></td></tr><tr><td data-num="132"></td><td><pre>     *         scheduled for execution</pre></td></tr><tr><td data-num="133"></td><td><pre>     * @throws NullPointerException if the task is null</pre></td></tr><tr><td data-num="134"></td><td><pre>     */</pre></td></tr><tr><td data-num="135"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="136"></td><td><pre>     * 执行有返回值的任务，任务的返回值为这里传入的 result</pre></td></tr><tr><td data-num="137"></td><td><pre>     * 当然只有当任务执行完成可调用 get () 时才会返回</pre></td></tr><tr><td data-num="138"></td><td><pre>    */</pre></td></tr><tr><td data-num="139"></td><td><pre>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">T</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="140"></td><td><pre></pre></td></tr><tr><td data-num="141"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="142"></td><td><pre>     * Submits a Runnable task for execution and returns a Future</pre></td></tr><tr><td data-num="143"></td><td><pre>     * representing that task. The Future's &#123;@code get&#125; method will</pre></td></tr><tr><td data-num="144"></td><td><pre>     * return &#123;@code null&#125; upon &lt;em>successful&lt;/em> completion.</pre></td></tr><tr><td data-num="145"></td><td><pre>     *</pre></td></tr><tr><td data-num="146"></td><td><pre>     * @param task the task to submit</pre></td></tr><tr><td data-num="147"></td><td><pre>     * @return a Future representing pending completion of the task</pre></td></tr><tr><td data-num="148"></td><td><pre>     * @throws RejectedExecutionException if the task cannot be</pre></td></tr><tr><td data-num="149"></td><td><pre>     *         scheduled for execution</pre></td></tr><tr><td data-num="150"></td><td><pre>     * @throws NullPointerException if the task is null</pre></td></tr><tr><td data-num="151"></td><td><pre>     */</pre></td></tr><tr><td data-num="152"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="153"></td><td><pre>     * 执行有返回值的任务，任务的返回值为 null</pre></td></tr><tr><td data-num="154"></td><td><pre>     * 当然只有当任务执行完成可调用 get () 时才会返回</pre></td></tr><tr><td data-num="155"></td><td><pre>    */</pre></td></tr><tr><td data-num="156"></td><td><pre>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="157"></td><td><pre></pre></td></tr><tr><td data-num="158"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="159"></td><td><pre>     * Executes the given tasks, returning a list of Futures holding</pre></td></tr><tr><td data-num="160"></td><td><pre>     * their status and results when all complete.</pre></td></tr><tr><td data-num="161"></td><td><pre>     * &#123;@link Future#isDone&#125; is &#123;@code true&#125; for each</pre></td></tr><tr><td data-num="162"></td><td><pre>     * element of the returned list.</pre></td></tr><tr><td data-num="163"></td><td><pre>     * Note that a &lt;em>completed&lt;/em> task could have</pre></td></tr><tr><td data-num="164"></td><td><pre>     * terminated either normally or by throwing an exception.</pre></td></tr><tr><td data-num="165"></td><td><pre>     * The results of this method are undefined if the given</pre></td></tr><tr><td data-num="166"></td><td><pre>     * collection is modified while this operation is in progress.</pre></td></tr><tr><td data-num="167"></td><td><pre>     *</pre></td></tr><tr><td data-num="168"></td><td><pre>     * @param tasks the collection of tasks</pre></td></tr><tr><td data-num="169"></td><td><pre>     * @param &lt;T> the type of the values returned from the tasks</pre></td></tr><tr><td data-num="170"></td><td><pre>     * @return a list of Futures representing the tasks, in the same</pre></td></tr><tr><td data-num="171"></td><td><pre>     *         sequential order as produced by the iterator for the</pre></td></tr><tr><td data-num="172"></td><td><pre>     *         given task list, each of which has completed</pre></td></tr><tr><td data-num="173"></td><td><pre>     * @throws InterruptedException if interrupted while waiting, in</pre></td></tr><tr><td data-num="174"></td><td><pre>     *         which case unfinished tasks are cancelled</pre></td></tr><tr><td data-num="175"></td><td><pre>     * @throws NullPointerException if tasks or any of its elements are &#123;@code null&#125;</pre></td></tr><tr><td data-num="176"></td><td><pre>     * @throws RejectedExecutionException if any task cannot be</pre></td></tr><tr><td data-num="177"></td><td><pre>     *         scheduled for execution</pre></td></tr><tr><td data-num="178"></td><td><pre>     */</pre></td></tr><tr><td data-num="179"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="180"></td><td><pre>     * 批量执行任务，只有当这些任务都完成了，这个方法才会返回</pre></td></tr><tr><td data-num="181"></td><td><pre>    */</pre></td></tr><tr><td data-num="182"></td><td><pre>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="183"></td><td><pre>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="184"></td><td><pre></pre></td></tr><tr><td data-num="185"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="186"></td><td><pre>     * Executes the given tasks, returning a list of Futures holding</pre></td></tr><tr><td data-num="187"></td><td><pre>     * their status and results</pre></td></tr><tr><td data-num="188"></td><td><pre>     * when all complete or the timeout expires, whichever happens first.</pre></td></tr><tr><td data-num="189"></td><td><pre>     * &#123;@link Future#isDone&#125; is &#123;@code true&#125; for each</pre></td></tr><tr><td data-num="190"></td><td><pre>     * element of the returned list.</pre></td></tr><tr><td data-num="191"></td><td><pre>     * Upon return, tasks that have not completed are cancelled.</pre></td></tr><tr><td data-num="192"></td><td><pre>     * Note that a &lt;em>completed&lt;/em> task could have</pre></td></tr><tr><td data-num="193"></td><td><pre>     * terminated either normally or by throwing an exception.</pre></td></tr><tr><td data-num="194"></td><td><pre>     * The results of this method are undefined if the given</pre></td></tr><tr><td data-num="195"></td><td><pre>     * collection is modified while this operation is in progress.</pre></td></tr><tr><td data-num="196"></td><td><pre>     *</pre></td></tr><tr><td data-num="197"></td><td><pre>     * @param tasks the collection of tasks</pre></td></tr><tr><td data-num="198"></td><td><pre>     * @param timeout the maximum time to wait</pre></td></tr><tr><td data-num="199"></td><td><pre>     * @param unit the time unit of the timeout argument</pre></td></tr><tr><td data-num="200"></td><td><pre>     * @param &lt;T> the type of the values returned from the tasks</pre></td></tr><tr><td data-num="201"></td><td><pre>     * @return a list of Futures representing the tasks, in the same</pre></td></tr><tr><td data-num="202"></td><td><pre>     *         sequential order as produced by the iterator for the</pre></td></tr><tr><td data-num="203"></td><td><pre>     *         given task list. If the operation did not time out,</pre></td></tr><tr><td data-num="204"></td><td><pre>     *         each task will have completed. If it did time out, some</pre></td></tr><tr><td data-num="205"></td><td><pre>     *         of these tasks will not have completed.</pre></td></tr><tr><td data-num="206"></td><td><pre>     * @throws InterruptedException if interrupted while waiting, in</pre></td></tr><tr><td data-num="207"></td><td><pre>     *         which case unfinished tasks are cancelled</pre></td></tr><tr><td data-num="208"></td><td><pre>     * @throws NullPointerException if tasks, any of its elements, or</pre></td></tr><tr><td data-num="209"></td><td><pre>     *         unit are &#123;@code null&#125;</pre></td></tr><tr><td data-num="210"></td><td><pre>     * @throws RejectedExecutionException if any task cannot be scheduled</pre></td></tr><tr><td data-num="211"></td><td><pre>     *         for execution</pre></td></tr><tr><td data-num="212"></td><td><pre>     */</pre></td></tr><tr><td data-num="213"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="214"></td><td><pre>     * 在指定时间内批量执行任务，未执行完成的任务将被取消</pre></td></tr><tr><td data-num="215"></td><td><pre>     * timeout 是指所有任务的总时间，而不是单个任务的时间</pre></td></tr><tr><td data-num="216"></td><td><pre>    */</pre></td></tr><tr><td data-num="217"></td><td><pre>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="218"></td><td><pre>                                  <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="219"></td><td><pre>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="220"></td><td><pre></pre></td></tr><tr><td data-num="221"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="222"></td><td><pre>     * Executes the given tasks, returning the result</pre></td></tr><tr><td data-num="223"></td><td><pre>     * of one that has completed successfully (i.e., without throwing</pre></td></tr><tr><td data-num="224"></td><td><pre>     * an exception), if any do. Upon normal or exceptional return,</pre></td></tr><tr><td data-num="225"></td><td><pre>     * tasks that have not completed are cancelled.</pre></td></tr><tr><td data-num="226"></td><td><pre>     * The results of this method are undefined if the given</pre></td></tr><tr><td data-num="227"></td><td><pre>     * collection is modified while this operation is in progress.</pre></td></tr><tr><td data-num="228"></td><td><pre>     *</pre></td></tr><tr><td data-num="229"></td><td><pre>     * @param tasks the collection of tasks</pre></td></tr><tr><td data-num="230"></td><td><pre>     * @param &lt;T> the type of the values returned from the tasks</pre></td></tr><tr><td data-num="231"></td><td><pre>     * @return the result returned by one of the tasks</pre></td></tr><tr><td data-num="232"></td><td><pre>     * @throws InterruptedException if interrupted while waiting</pre></td></tr><tr><td data-num="233"></td><td><pre>     * @throws NullPointerException if tasks or any element task</pre></td></tr><tr><td data-num="234"></td><td><pre>     *         subject to execution is &#123;@code null&#125;</pre></td></tr><tr><td data-num="235"></td><td><pre>     * @throws IllegalArgumentException if tasks is empty</pre></td></tr><tr><td data-num="236"></td><td><pre>     * @throws ExecutionException if no task successfully completes</pre></td></tr><tr><td data-num="237"></td><td><pre>     * @throws RejectedExecutionException if tasks cannot be scheduled</pre></td></tr><tr><td data-num="238"></td><td><pre>     *         for execution</pre></td></tr><tr><td data-num="239"></td><td><pre>     */</pre></td></tr><tr><td data-num="240"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="241"></td><td><pre>     * 返回任意一个已完成任务的执行结果，未执行完成的任务将被取消</pre></td></tr><tr><td data-num="242"></td><td><pre>    */</pre></td></tr><tr><td data-num="243"></td><td><pre>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="244"></td><td><pre>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="245"></td><td><pre></pre></td></tr><tr><td data-num="246"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="247"></td><td><pre>     * Executes the given tasks, returning the result</pre></td></tr><tr><td data-num="248"></td><td><pre>     * of one that has completed successfully (i.e., without throwing</pre></td></tr><tr><td data-num="249"></td><td><pre>     * an exception), if any do before the given timeout elapses.</pre></td></tr><tr><td data-num="250"></td><td><pre>     * Upon normal or exceptional return, tasks that have not</pre></td></tr><tr><td data-num="251"></td><td><pre>     * completed are cancelled.</pre></td></tr><tr><td data-num="252"></td><td><pre>     * The results of this method are undefined if the given</pre></td></tr><tr><td data-num="253"></td><td><pre>     * collection is modified while this operation is in progress.</pre></td></tr><tr><td data-num="254"></td><td><pre>     *</pre></td></tr><tr><td data-num="255"></td><td><pre>     * @param tasks the collection of tasks</pre></td></tr><tr><td data-num="256"></td><td><pre>     * @param timeout the maximum time to wait</pre></td></tr><tr><td data-num="257"></td><td><pre>     * @param unit the time unit of the timeout argument</pre></td></tr><tr><td data-num="258"></td><td><pre>     * @param &lt;T> the type of the values returned from the tasks</pre></td></tr><tr><td data-num="259"></td><td><pre>     * @return the result returned by one of the tasks</pre></td></tr><tr><td data-num="260"></td><td><pre>     * @throws InterruptedException if interrupted while waiting</pre></td></tr><tr><td data-num="261"></td><td><pre>     * @throws NullPointerException if tasks, or unit, or any element</pre></td></tr><tr><td data-num="262"></td><td><pre>     *         task subject to execution is &#123;@code null&#125;</pre></td></tr><tr><td data-num="263"></td><td><pre>     * @throws TimeoutException if the given timeout elapses before</pre></td></tr><tr><td data-num="264"></td><td><pre>     *         any task successfully completes</pre></td></tr><tr><td data-num="265"></td><td><pre>     * @throws ExecutionException if no task successfully completes</pre></td></tr><tr><td data-num="266"></td><td><pre>     * @throws RejectedExecutionException if tasks cannot be scheduled</pre></td></tr><tr><td data-num="267"></td><td><pre>     *         for execution</pre></td></tr><tr><td data-num="268"></td><td><pre>     */</pre></td></tr><tr><td data-num="269"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="270"></td><td><pre>     * 在指定时间内如果有任务已完成，则返回任意一个已完成任务的执行结果，未执行完成的任务将被取消</pre></td></tr><tr><td data-num="271"></td><td><pre>    */</pre></td></tr><tr><td data-num="272"></td><td><pre>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="273"></td><td><pre>                    <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="274"></td><td><pre>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="275"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="abstractexecutorservice抽象类"><a class="anchor" href="#abstractexecutorservice抽象类">#</a> AbstractExecutorService 抽象类</h3><p>ExecutorService 接口的抽象实现类，对 ExecutorService 接口中一部分方法的具体实现，剩余的方法留给 AbstractExecutorService 类的子类去实现，如 ThreadPoolExecutor 类</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractExecutorService</span> <span class="token keyword">implements</span> <span class="token class-name">ExecutorService</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     * Returns a &#123;@code RunnableFuture&#125; for the given runnable and default</pre></td></tr><tr><td data-num="5"></td><td><pre>     * value.</pre></td></tr><tr><td data-num="6"></td><td><pre>     *</pre></td></tr><tr><td data-num="7"></td><td><pre>     * @param runnable the runnable task being wrapped</pre></td></tr><tr><td data-num="8"></td><td><pre>     * @param value the default value for the returned future</pre></td></tr><tr><td data-num="9"></td><td><pre>     * @param &lt;T> the type of the given value</pre></td></tr><tr><td data-num="10"></td><td><pre>     * @return a &#123;@code RunnableFuture&#125; which, when run, will run the</pre></td></tr><tr><td data-num="11"></td><td><pre>     * underlying runnable and which, as a &#123;@code Future&#125;, will yield</pre></td></tr><tr><td data-num="12"></td><td><pre>     * the given value as its result and provide for cancellation of</pre></td></tr><tr><td data-num="13"></td><td><pre>     * the underlying task</pre></td></tr><tr><td data-num="14"></td><td><pre>     * @since 1.6</pre></td></tr><tr><td data-num="15"></td><td><pre>     */</pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="21"></td><td><pre>     * Returns a &#123;@code RunnableFuture&#125; for the given callable task.</pre></td></tr><tr><td data-num="22"></td><td><pre>     *</pre></td></tr><tr><td data-num="23"></td><td><pre>     * @param callable the callable task being wrapped</pre></td></tr><tr><td data-num="24"></td><td><pre>     * @param &lt;T> the type of the callable's result</pre></td></tr><tr><td data-num="25"></td><td><pre>     * @return a &#123;@code RunnableFuture&#125; which, when run, will call the</pre></td></tr><tr><td data-num="26"></td><td><pre>     * underlying callable and which, as a &#123;@code Future&#125;, will yield</pre></td></tr><tr><td data-num="27"></td><td><pre>     * the callable's result as its result and provide for</pre></td></tr><tr><td data-num="28"></td><td><pre>     * cancellation of the underlying task</pre></td></tr><tr><td data-num="29"></td><td><pre>     * @since 1.6</pre></td></tr><tr><td data-num="30"></td><td><pre>     */</pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> callable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="36"></td><td><pre>     * @throws RejectedExecutionException &#123;@inheritDoc&#125;</pre></td></tr><tr><td data-num="37"></td><td><pre>     * @throws NullPointerException       &#123;@inheritDoc&#125;</pre></td></tr><tr><td data-num="38"></td><td><pre>     */</pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token comment">// 将任务包装成 RunnableFuture 接口类型，改接口的实现之一就是 FutureTask</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="48"></td><td><pre>     * @throws RejectedExecutionException &#123;@inheritDoc&#125;</pre></td></tr><tr><td data-num="49"></td><td><pre>     * @throws NullPointerException       &#123;@inheritDoc&#125;</pre></td></tr><tr><td data-num="50"></td><td><pre>     */</pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">T</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="59"></td><td><pre>     * @throws RejectedExecutionException &#123;@inheritDoc&#125;</pre></td></tr><tr><td data-num="60"></td><td><pre>     * @throws NullPointerException       &#123;@inheritDoc&#125;</pre></td></tr><tr><td data-num="61"></td><td><pre>     */</pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="70"></td><td><pre>     * invokeAny 的实际处理方法</pre></td></tr><tr><td data-num="71"></td><td><pre>     * the main mechanics of invokeAny.</pre></td></tr><tr><td data-num="72"></td><td><pre>     */</pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">doInvokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="74"></td><td><pre>                              <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="75"></td><td><pre>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tasks <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token keyword">int</span> ntasks <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ntasks <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> futures <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span>ntasks<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>        <span class="token class-name">ExecutorCompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> ecs <span class="token operator">=</span></pre></td></tr><tr><td data-num="83"></td><td><pre>            <span class="token keyword">new</span> <span class="token class-name">ExecutorCompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>        <span class="token comment">// For efficiency, especially in executors with limited</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token comment">// parallelism, check to see if previously submitted tasks are</span></pre></td></tr><tr><td data-num="87"></td><td><pre>        <span class="token comment">// done before submitting more of them. This interleaving</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        <span class="token comment">// plus the exception mechanics account for messiness of main</span></pre></td></tr><tr><td data-num="89"></td><td><pre>        <span class="token comment">// loop.</span></pre></td></tr><tr><td data-num="90"></td><td><pre></pre></td></tr><tr><td data-num="91"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>            <span class="token comment">// Record exceptions so that if we fail to obtain any</span></pre></td></tr><tr><td data-num="93"></td><td><pre>            <span class="token comment">// result, we can throw the last exception we got.</span></pre></td></tr><tr><td data-num="94"></td><td><pre>            <span class="token class-name">ExecutionException</span> ee <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>            <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> timed <span class="token operator">?</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanos <span class="token operator">:</span> <span class="token number">0L</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> it <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre></pre></td></tr><tr><td data-num="98"></td><td><pre>            <span class="token comment">// ExecutorCompletionService 逐个提交，并封装为 future</span></pre></td></tr><tr><td data-num="99"></td><td><pre>            <span class="token comment">// Start one task for sure; the rest incrementally</span></pre></td></tr><tr><td data-num="100"></td><td><pre>            futures<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ecs<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>            <span class="token operator">--</span>ntasks<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>            <span class="token keyword">int</span> active <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre></pre></td></tr><tr><td data-num="104"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>                <span class="token comment">// 轮询获取 ExecutorCompletionService 中的任务</span></pre></td></tr><tr><td data-num="106"></td><td><pre>                <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> ecs<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ntasks <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>                        <span class="token operator">--</span>ntasks<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>                        futures<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ecs<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>                        <span class="token operator">++</span>active<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>active <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="114"></td><td><pre>                        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>timed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>                        f <span class="token operator">=</span> ecs<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>nanos<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="118"></td><td><pre>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>                        nanos <span class="token operator">=</span> deadline <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="120"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>                    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="122"></td><td><pre>                        f <span class="token operator">=</span> ecs<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="123"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="125"></td><td><pre>                    <span class="token operator">--</span>active<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="126"></td><td><pre>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="127"></td><td><pre>                        <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="128"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> eex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="129"></td><td><pre>                        ee <span class="token operator">=</span> eex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="130"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> rex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="131"></td><td><pre>                        ee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">(</span>rex<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="133"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="134"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="135"></td><td><pre></pre></td></tr><tr><td data-num="136"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ee <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="137"></td><td><pre>                ee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>            <span class="token keyword">throw</span> ee<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="139"></td><td><pre></pre></td></tr><tr><td data-num="140"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="141"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">=</span> futures<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="142"></td><td><pre>                futures<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="143"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="144"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="145"></td><td><pre></pre></td></tr><tr><td data-num="146"></td><td><pre>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="147"></td><td><pre>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="148"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="149"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">doInvokeAny</span><span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="150"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> cannotHappen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="151"></td><td><pre>            <span class="token keyword">assert</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="152"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="153"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="154"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="155"></td><td><pre></pre></td></tr><tr><td data-num="156"></td><td><pre>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="157"></td><td><pre>                           <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="158"></td><td><pre>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="159"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">doInvokeAny</span><span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="160"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="161"></td><td><pre></pre></td></tr><tr><td data-num="162"></td><td><pre>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="163"></td><td><pre>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="164"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tasks <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="165"></td><td><pre>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="166"></td><td><pre>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> futures <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span>tasks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="167"></td><td><pre>        <span class="token keyword">boolean</span> done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="168"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="169"></td><td><pre>            <span class="token comment">// 将每个任务都封装为 Future 后执行</span></pre></td></tr><tr><td data-num="170"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> t <span class="token operator">:</span> tasks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="171"></td><td><pre>                <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="172"></td><td><pre>                futures<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="173"></td><td><pre>                <span class="token function">execute</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="174"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="175"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">=</span> futures<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="176"></td><td><pre>                <span class="token comment">// 获取每一个任务的执行结果</span></pre></td></tr><tr><td data-num="177"></td><td><pre>                <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> futures<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="178"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="179"></td><td><pre>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="180"></td><td><pre>                        f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="181"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancellationException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="182"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="183"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="184"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="185"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="186"></td><td><pre>            done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="187"></td><td><pre>            <span class="token keyword">return</span> futures<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="188"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="189"></td><td><pre>            <span class="token comment">// 若非以上 catch 的异常，那么就取消以上所有任务（线程）的执行</span></pre></td></tr><tr><td data-num="190"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="191"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">=</span> futures<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="192"></td><td><pre>                    futures<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="193"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="194"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="195"></td><td><pre></pre></td></tr><tr><td data-num="196"></td><td><pre>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="197"></td><td><pre>                                         <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="198"></td><td><pre>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="199"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tasks <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="200"></td><td><pre>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="201"></td><td><pre>        <span class="token keyword">long</span> nanos <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="202"></td><td><pre>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> futures <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span>tasks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="203"></td><td><pre>        <span class="token keyword">boolean</span> done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="204"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="205"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> t <span class="token operator">:</span> tasks<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="206"></td><td><pre>                futures<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">newTaskFor</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="207"></td><td><pre></pre></td></tr><tr><td data-num="208"></td><td><pre>            <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanos<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="209"></td><td><pre>            <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> futures<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="210"></td><td><pre></pre></td></tr><tr><td data-num="211"></td><td><pre>            <span class="token comment">// Interleave time checks and calls to execute in case</span></pre></td></tr><tr><td data-num="212"></td><td><pre>            <span class="token comment">// executor doesn't have any/much parallelism.</span></pre></td></tr><tr><td data-num="213"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="214"></td><td><pre>                <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span><span class="token punctuation">)</span>futures<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="215"></td><td><pre>                nanos <span class="token operator">=</span> deadline <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="216"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="217"></td><td><pre>                    <span class="token keyword">return</span> futures<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="218"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="219"></td><td><pre></pre></td></tr><tr><td data-num="220"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="221"></td><td><pre>                <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> futures<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="222"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="223"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="224"></td><td><pre>                        <span class="token keyword">return</span> futures<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="225"></td><td><pre>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="226"></td><td><pre>                        f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nanos<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="227"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancellationException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="228"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="229"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> toe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="230"></td><td><pre>                        <span class="token keyword">return</span> futures<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="231"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="232"></td><td><pre>                    nanos <span class="token operator">=</span> deadline <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="233"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="234"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="235"></td><td><pre>            done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="236"></td><td><pre>            <span class="token keyword">return</span> futures<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="237"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="238"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="239"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">=</span> futures<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="240"></td><td><pre>                    futures<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="241"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="242"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="243"></td><td><pre></pre></td></tr><tr><td data-num="244"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="runnable与future"><a class="anchor" href="#runnable与future">#</a> Runnable 与 Future</h3><p>Runnable（执行体）可以看成是动作（具体的一个任务），Future（相当于代理类）则是对 Runnable 的操作，例如可以获取 Runnable 的执行结果等，每一个 Runnable 在线程池中都会被封装为一个 Future 来执行</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="2"></td><td><pre> * A &#123;@link Future&#125; that is &#123;@link Runnable&#125;. Successful execution of</pre></td></tr><tr><td data-num="3"></td><td><pre> * the &#123;@code run&#125; method causes completion of the &#123;@code Future&#125;</pre></td></tr><tr><td data-num="4"></td><td><pre> * and allows access to its results.</pre></td></tr><tr><td data-num="5"></td><td><pre> * @see FutureTask</pre></td></tr><tr><td data-num="6"></td><td><pre> * @see Executor</pre></td></tr><tr><td data-num="7"></td><td><pre> * @since 1.6</pre></td></tr><tr><td data-num="8"></td><td><pre> * @author Doug Lea</pre></td></tr><tr><td data-num="9"></td><td><pre> * @param &lt;V> The result type returned by this Future's &#123;@code get&#125; method</pre></td></tr><tr><td data-num="10"></td><td><pre> */</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="13"></td><td><pre>     * Sets this Future to the result of its computation</pre></td></tr><tr><td data-num="14"></td><td><pre>     * unless it has been cancelled.</pre></td></tr><tr><td data-num="15"></td><td><pre>     */</pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="2"></td><td><pre> * The &lt;code>Runnable&lt;/code> interface should be implemented by any</pre></td></tr><tr><td data-num="3"></td><td><pre> * class whose instances are intended to be executed by a thread. The</pre></td></tr><tr><td data-num="4"></td><td><pre> * class must define a method of no arguments called &lt;code>run&lt;/code>.</pre></td></tr><tr><td data-num="5"></td><td><pre> * &lt;p></pre></td></tr><tr><td data-num="6"></td><td><pre> * This interface is designed to provide a common protocol for objects that</pre></td></tr><tr><td data-num="7"></td><td><pre> * wish to execute code while they are active. For example,</pre></td></tr><tr><td data-num="8"></td><td><pre> * &lt;code>Runnable&lt;/code> is implemented by class &lt;code>Thread&lt;/code>.</pre></td></tr><tr><td data-num="9"></td><td><pre> * Being active simply means that a thread has been started and has not</pre></td></tr><tr><td data-num="10"></td><td><pre> * yet been stopped.</pre></td></tr><tr><td data-num="11"></td><td><pre> * &lt;p></pre></td></tr><tr><td data-num="12"></td><td><pre> * In addition, &lt;code>Runnable&lt;/code> provides the means for a class to be</pre></td></tr><tr><td data-num="13"></td><td><pre> * active while not subclassing &lt;code>Thread&lt;/code>. A class that implements</pre></td></tr><tr><td data-num="14"></td><td><pre> * &lt;code>Runnable&lt;/code> can run without subclassing &lt;code>Thread&lt;/code></pre></td></tr><tr><td data-num="15"></td><td><pre> * by instantiating a &lt;code>Thread&lt;/code> instance and passing itself in</pre></td></tr><tr><td data-num="16"></td><td><pre> * as the target.  In most cases, the &lt;code>Runnable&lt;/code> interface should</pre></td></tr><tr><td data-num="17"></td><td><pre> * be used if you are only planning to override the &lt;code>run()&lt;/code></pre></td></tr><tr><td data-num="18"></td><td><pre> * method and no other &lt;code>Thread&lt;/code> methods.</pre></td></tr><tr><td data-num="19"></td><td><pre> * This is important because classes should not be subclassed</pre></td></tr><tr><td data-num="20"></td><td><pre> * unless the programmer intends on modifying or enhancing the fundamental</pre></td></tr><tr><td data-num="21"></td><td><pre> * behavior of the class.</pre></td></tr><tr><td data-num="22"></td><td><pre> *</pre></td></tr><tr><td data-num="23"></td><td><pre> * @author  Arthur van Hoff</pre></td></tr><tr><td data-num="24"></td><td><pre> * @see     java.lang.Thread</pre></td></tr><tr><td data-num="25"></td><td><pre> * @see     java.util.concurrent.Callable</pre></td></tr><tr><td data-num="26"></td><td><pre> * @since   JDK1.0</pre></td></tr><tr><td data-num="27"></td><td><pre> */</pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token annotation punctuation">@FunctionalInterface</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="31"></td><td><pre>     * When an object implementing interface &lt;code>Runnable&lt;/code> is used</pre></td></tr><tr><td data-num="32"></td><td><pre>     * to create a thread, starting the thread causes the object's</pre></td></tr><tr><td data-num="33"></td><td><pre>     * &lt;code>run&lt;/code> method to be called in that separately executing</pre></td></tr><tr><td data-num="34"></td><td><pre>     * thread.</pre></td></tr><tr><td data-num="35"></td><td><pre>     * &lt;p></pre></td></tr><tr><td data-num="36"></td><td><pre>     * The general contract of the method &lt;code>run&lt;/code> is that it may</pre></td></tr><tr><td data-num="37"></td><td><pre>     * take any action whatsoever.</pre></td></tr><tr><td data-num="38"></td><td><pre>     *</pre></td></tr><tr><td data-num="39"></td><td><pre>     * @see     java.lang.Thread#run()</pre></td></tr><tr><td data-num="40"></td><td><pre>     */</pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="2"></td><td><pre> * A &#123;@code Future&#125; represents the result of an asynchronous</pre></td></tr><tr><td data-num="3"></td><td><pre> * computation.  Methods are provided to check if the computation is</pre></td></tr><tr><td data-num="4"></td><td><pre> * complete, to wait for its completion, and to retrieve the result of</pre></td></tr><tr><td data-num="5"></td><td><pre> * the computation.  The result can only be retrieved using method</pre></td></tr><tr><td data-num="6"></td><td><pre> * &#123;@code get&#125; when the computation has completed, blocking if</pre></td></tr><tr><td data-num="7"></td><td><pre> * necessary until it is ready.  Cancellation is performed by the</pre></td></tr><tr><td data-num="8"></td><td><pre> * &#123;@code cancel&#125; method.  Additional methods are provided to</pre></td></tr><tr><td data-num="9"></td><td><pre> * determine if the task completed normally or was cancelled. Once a</pre></td></tr><tr><td data-num="10"></td><td><pre> * computation has completed, the computation cannot be cancelled.</pre></td></tr><tr><td data-num="11"></td><td><pre> * If you would like to use a &#123;@code Future&#125; for the sake</pre></td></tr><tr><td data-num="12"></td><td><pre> * of cancellability but not provide a usable result, you can</pre></td></tr><tr><td data-num="13"></td><td><pre> * declare types of the form &#123;@code Future&lt;?>&#125; and</pre></td></tr><tr><td data-num="14"></td><td><pre> * return &#123;@code null&#125; as a result of the underlying task.</pre></td></tr><tr><td data-num="15"></td><td><pre> *</pre></td></tr><tr><td data-num="16"></td><td><pre> * &lt;p></pre></td></tr><tr><td data-num="17"></td><td><pre> * &lt;b>Sample Usage&lt;/b> (Note that the following classes are all</pre></td></tr><tr><td data-num="18"></td><td><pre> * made-up.)</pre></td></tr><tr><td data-num="19"></td><td><pre> * &lt;pre> &#123;@code</pre></td></tr><tr><td data-num="20"></td><td><pre> * interface ArchiveSearcher &#123; String search(String target); &#125;</pre></td></tr><tr><td data-num="21"></td><td><pre> * class App &#123;</pre></td></tr><tr><td data-num="22"></td><td><pre> *   ExecutorService executor = ...</pre></td></tr><tr><td data-num="23"></td><td><pre> *   ArchiveSearcher searcher = ...</pre></td></tr><tr><td data-num="24"></td><td><pre> *   void showSearch(final String target)</pre></td></tr><tr><td data-num="25"></td><td><pre> *       throws InterruptedException &#123;</pre></td></tr><tr><td data-num="26"></td><td><pre> *     Future&lt;String> future</pre></td></tr><tr><td data-num="27"></td><td><pre> *       = executor.submit(new Callable&lt;String>() &#123;</pre></td></tr><tr><td data-num="28"></td><td><pre> *         public String call() &#123;</pre></td></tr><tr><td data-num="29"></td><td><pre> *             return searcher.search(target);</pre></td></tr><tr><td data-num="30"></td><td><pre> *         &#125;&#125;);</pre></td></tr><tr><td data-num="31"></td><td><pre> *     displayOtherThings(); // do other things while searching</pre></td></tr><tr><td data-num="32"></td><td><pre> *     try &#123;</pre></td></tr><tr><td data-num="33"></td><td><pre> *       displayText(future.get()); // use future</pre></td></tr><tr><td data-num="34"></td><td><pre> *     &#125; catch (ExecutionException ex) &#123; cleanup(); return; &#125;</pre></td></tr><tr><td data-num="35"></td><td><pre> *   &#125;</pre></td></tr><tr><td data-num="36"></td><td><pre> * &#125;&#125;&lt;/pre></pre></td></tr><tr><td data-num="37"></td><td><pre> *</pre></td></tr><tr><td data-num="38"></td><td><pre> * The &#123;@link FutureTask&#125; class is an implementation of &#123;@code Future&#125; that</pre></td></tr><tr><td data-num="39"></td><td><pre> * implements &#123;@code Runnable&#125;, and so may be executed by an &#123;@code Executor&#125;.</pre></td></tr><tr><td data-num="40"></td><td><pre> * For example, the above construction with &#123;@code submit&#125; could be replaced by:</pre></td></tr><tr><td data-num="41"></td><td><pre> *  &lt;pre> &#123;@code</pre></td></tr><tr><td data-num="42"></td><td><pre> * FutureTask&lt;String> future =</pre></td></tr><tr><td data-num="43"></td><td><pre> *   new FutureTask&lt;String>(new Callable&lt;String>() &#123;</pre></td></tr><tr><td data-num="44"></td><td><pre> *     public String call() &#123;</pre></td></tr><tr><td data-num="45"></td><td><pre> *       return searcher.search(target);</pre></td></tr><tr><td data-num="46"></td><td><pre> *   &#125;&#125;);</pre></td></tr><tr><td data-num="47"></td><td><pre> * executor.execute(future);&#125;&lt;/pre></pre></td></tr><tr><td data-num="48"></td><td><pre> *</pre></td></tr><tr><td data-num="49"></td><td><pre> * &lt;p>Memory consistency effects: Actions taken by the asynchronous computation</pre></td></tr><tr><td data-num="50"></td><td><pre> * &lt;a href="package-summary.html#MemoryVisibility"> &lt;i>happen-before&lt;/i>&lt;/a></pre></td></tr><tr><td data-num="51"></td><td><pre> * actions following the corresponding &#123;@code Future.get()&#125; in another thread.</pre></td></tr><tr><td data-num="52"></td><td><pre> *</pre></td></tr><tr><td data-num="53"></td><td><pre> * @see FutureTask</pre></td></tr><tr><td data-num="54"></td><td><pre> * @see Executor</pre></td></tr><tr><td data-num="55"></td><td><pre> * @since 1.5</pre></td></tr><tr><td data-num="56"></td><td><pre> * @author Doug Lea</pre></td></tr><tr><td data-num="57"></td><td><pre> * @param &lt;V> The result type returned by this Future's &#123;@code get&#125; method</pre></td></tr><tr><td data-num="58"></td><td><pre> */</pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="62"></td><td><pre>     * Attempts to cancel execution of this task.  This attempt will</pre></td></tr><tr><td data-num="63"></td><td><pre>     * fail if the task has already completed, has already been cancelled,</pre></td></tr><tr><td data-num="64"></td><td><pre>     * or could not be cancelled for some other reason. If successful,</pre></td></tr><tr><td data-num="65"></td><td><pre>     * and this task has not started when &#123;@code cancel&#125; is called,</pre></td></tr><tr><td data-num="66"></td><td><pre>     * this task should never run.  If the task has already started,</pre></td></tr><tr><td data-num="67"></td><td><pre>     * then the &#123;@code mayInterruptIfRunning&#125; parameter determines</pre></td></tr><tr><td data-num="68"></td><td><pre>     * whether the thread executing this task should be interrupted in</pre></td></tr><tr><td data-num="69"></td><td><pre>     * an attempt to stop the task.</pre></td></tr><tr><td data-num="70"></td><td><pre>     *</pre></td></tr><tr><td data-num="71"></td><td><pre>     * &lt;p>After this method returns, subsequent calls to &#123;@link #isDone&#125; will</pre></td></tr><tr><td data-num="72"></td><td><pre>     * always return &#123;@code true&#125;.  Subsequent calls to &#123;@link #isCancelled&#125;</pre></td></tr><tr><td data-num="73"></td><td><pre>     * will always return &#123;@code true&#125; if this method returned &#123;@code true&#125;.</pre></td></tr><tr><td data-num="74"></td><td><pre>     *</pre></td></tr><tr><td data-num="75"></td><td><pre>     * @param mayInterruptIfRunning &#123;@code true&#125; if the thread executing this</pre></td></tr><tr><td data-num="76"></td><td><pre>     * task should be interrupted; otherwise, in-progress tasks are allowed</pre></td></tr><tr><td data-num="77"></td><td><pre>     * to complete</pre></td></tr><tr><td data-num="78"></td><td><pre>     * @return &#123;@code false&#125; if the task could not be cancelled,</pre></td></tr><tr><td data-num="79"></td><td><pre>     * typically because it has already completed normally;</pre></td></tr><tr><td data-num="80"></td><td><pre>     * &#123;@code true&#125; otherwise</pre></td></tr><tr><td data-num="81"></td><td><pre>     */</pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre></pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="85"></td><td><pre>     * Returns &#123;@code true&#125; if this task was cancelled before it completed</pre></td></tr><tr><td data-num="86"></td><td><pre>     * normally.</pre></td></tr><tr><td data-num="87"></td><td><pre>     *</pre></td></tr><tr><td data-num="88"></td><td><pre>     * @return &#123;@code true&#125; if this task was cancelled before it completed</pre></td></tr><tr><td data-num="89"></td><td><pre>     */</pre></td></tr><tr><td data-num="90"></td><td><pre>    <span class="token keyword">boolean</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre></pre></td></tr><tr><td data-num="92"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="93"></td><td><pre>     * Returns &#123;@code true&#125; if this task completed.</pre></td></tr><tr><td data-num="94"></td><td><pre>     *</pre></td></tr><tr><td data-num="95"></td><td><pre>     * Completion may be due to normal termination, an exception, or</pre></td></tr><tr><td data-num="96"></td><td><pre>     * cancellation -- in all of these cases, this method will return</pre></td></tr><tr><td data-num="97"></td><td><pre>     * &#123;@code true&#125;.</pre></td></tr><tr><td data-num="98"></td><td><pre>     *</pre></td></tr><tr><td data-num="99"></td><td><pre>     * @return &#123;@code true&#125; if this task completed</pre></td></tr><tr><td data-num="100"></td><td><pre>     */</pre></td></tr><tr><td data-num="101"></td><td><pre>    <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre></pre></td></tr><tr><td data-num="103"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="104"></td><td><pre>     * Waits if necessary for the computation to complete, and then</pre></td></tr><tr><td data-num="105"></td><td><pre>     * retrieves its result.</pre></td></tr><tr><td data-num="106"></td><td><pre>     *</pre></td></tr><tr><td data-num="107"></td><td><pre>     * @return the computed result</pre></td></tr><tr><td data-num="108"></td><td><pre>     * @throws CancellationException if the computation was cancelled</pre></td></tr><tr><td data-num="109"></td><td><pre>     * @throws ExecutionException if the computation threw an</pre></td></tr><tr><td data-num="110"></td><td><pre>     * exception</pre></td></tr><tr><td data-num="111"></td><td><pre>     * @throws InterruptedException if the current thread was interrupted</pre></td></tr><tr><td data-num="112"></td><td><pre>     * while waiting</pre></td></tr><tr><td data-num="113"></td><td><pre>     */</pre></td></tr><tr><td data-num="114"></td><td><pre>    <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre></pre></td></tr><tr><td data-num="116"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="117"></td><td><pre>     * Waits if necessary for at most the given time for the computation</pre></td></tr><tr><td data-num="118"></td><td><pre>     * to complete, and then retrieves its result, if available.</pre></td></tr><tr><td data-num="119"></td><td><pre>     *</pre></td></tr><tr><td data-num="120"></td><td><pre>     * @param timeout the maximum time to wait</pre></td></tr><tr><td data-num="121"></td><td><pre>     * @param unit the time unit of the timeout argument</pre></td></tr><tr><td data-num="122"></td><td><pre>     * @return the computed result</pre></td></tr><tr><td data-num="123"></td><td><pre>     * @throws CancellationException if the computation was cancelled</pre></td></tr><tr><td data-num="124"></td><td><pre>     * @throws ExecutionException if the computation threw an</pre></td></tr><tr><td data-num="125"></td><td><pre>     * exception</pre></td></tr><tr><td data-num="126"></td><td><pre>     * @throws InterruptedException if the current thread was interrupted</pre></td></tr><tr><td data-num="127"></td><td><pre>     * while waiting</pre></td></tr><tr><td data-num="128"></td><td><pre>     * @throws TimeoutException if the wait timed out</pre></td></tr><tr><td data-num="129"></td><td><pre>     */</pre></td></tr><tr><td data-num="130"></td><td><pre>    <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="131"></td><td><pre>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="132"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><div class="tags"><a href="/tags/Java/" rel="tag"><i class="ic i-tag"></i> Java</a> <a href="/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/" rel="tag"><i class="ic i-tag"></i> 多线程与高并发</a></div></div><footer><div class="meta"><span class="item"><span class="icon"><i class="ic i-calendar-check"></i> </span><span class="text">更新于</span> <time title="修改时间：2021-12-24 14:39:09" itemprop="dateModified" datetime="2021-12-24T14:39:09+08:00">2021-12-24</time></span></div><div class="reward"><button><i class="ic i-heartbeat"></i> 赞赏</button><p>请我喝[茶]~(￣▽￣)~*</p><div id="qr"><div><img data-src="/images/wechatpay.png" alt="fanfanfan 微信支付"><p>微信支付</p></div><div><img data-src="/images/alipay.png" alt="fanfanfan 支付宝"><p>支付宝</p></div><div><img data-src="/images/paypal.png" alt="fanfanfan PayPal"><p>PayPal</p></div></div></div><div id="copyright"><ul><li class="author"><strong>本文作者： </strong>fanfanfan <i class="ic i-at"><em>@</em></i></li><li class="link"><strong>本文链接：</strong> <a href="https://baiyezi.vip/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B" title="并发编程">https://baiyezi.vip/并发编程</a></li><li class="license"><strong>版权声明： </strong>本站所有文章除特别声明外，均采用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC9kZWVkLnpo"><i class="ic i-creative-commons"><em>(CC)</em></i>BY-NC-SA</span> 许可协议。转载请注明出处！</li></ul></div></footer></article></div><div class="post-nav"><div class="item left"><a href="/Win10%E5%AE%89%E8%A3%85docker" itemprop="url" rel="prev" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;bfanfanfan&#x2F;img&#x2F;raw&#x2F;master&#x2F;guzhuang&#x2F;20211225105421.jpg" title="Win10安装docker"><span class="type">上一篇</span> <span class="category"><i class="ic i-flag"></i> Java</span><h3>Win10安装docker</h3></a></div><div class="item right"><a href="/JMH" itemprop="url" rel="next" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;bfanfanfan&#x2F;img&#x2F;raw&#x2F;master&#x2F;guzhuang&#x2F;20211225105422.jpg" title="JMH"><span class="type">下一篇</span> <span class="category"><i class="ic i-flag"></i> Java</span><h3>JMH</h3></a></div></div><div class="wrap" id="comments"></div></div><div id="sidebar"><div class="inner"><div class="panels"><div class="inner"><div class="contents panel pjax" data-title="文章目录"><ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7"><span class="toc-number">1.</span> <span class="toc-text">并发编程的三大特性</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8F%AF%E8%A7%81%E6%80%A7visibility"><span class="toc-number">1.1.</span> <span class="toc-text">可见性（visibility）</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#volatile%E4%BF%AE%E9%A5%B0%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B"><span class="toc-number">1.1.1.</span> <span class="toc-text">volatile 修饰基本类型</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#volatile%E4%BF%AE%E9%A5%B0%E5%BC%95%E7%94%A8%E4%BA%86%E7%B1%BB%E5%9E%8B"><span class="toc-number">1.1.2.</span> <span class="toc-text">volatile 修饰引用了类型</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98"><span class="toc-number">1.1.3.</span> <span class="toc-text">三级缓存</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E7%BC%93%E5%AD%98%E8%A1%8C"><span class="toc-number">1.1.4.</span> <span class="toc-text">缓存行</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE"><span class="toc-number">1.1.5.</span> <span class="toc-text">缓存一致性协议</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%9C%89%E5%BA%8F%E6%80%A7ordering"><span class="toc-number">1.2.</span> <span class="toc-text">有序性（ordering）</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%8F%AF%E4%BB%A5%E9%87%8D%E6%8E%92%E5%BA%8F%E7%9A%84%E6%9D%A1%E4%BB%B6"><span class="toc-number">1.2.1.</span> <span class="toc-text">可以重排序的条件</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90"><span class="toc-number">1.2.2.</span> <span class="toc-text">一个例子</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8E%9F%E5%AD%90%E6%80%A7atomicity"><span class="toc-number">1.3.</span> <span class="toc-text">原子性（atomicity）</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BD%93%E7%B3%BB"><span class="toc-number">2.</span> <span class="toc-text">多线程体系</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#executor%E6%8E%A5%E5%8F%A3"><span class="toc-number">2.1.</span> <span class="toc-text">Executor 接口</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#executorservice%E6%8E%A5%E5%8F%A3"><span class="toc-number">2.2.</span> <span class="toc-text">ExecutorService 接口</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#abstractexecutorservice%E6%8A%BD%E8%B1%A1%E7%B1%BB"><span class="toc-number">2.3.</span> <span class="toc-text">AbstractExecutorService 抽象类</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#runnable%E4%B8%8Efuture"><span class="toc-number">2.4.</span> <span class="toc-text">Runnable 与 Future</span></a></li></ol></li></ol></div><div class="related panel pjax" data-title="系列文章"><ul><li><a href="/Linux%E4%B8%8B%E5%AE%89%E8%A3%85MySQL" rel="bookmark" title="Linux下安装MySQL">Linux下安装MySQL</a></li><li><a href="/MySQL%E5%9F%BA%E7%A1%80" rel="bookmark" title="MySQL基础">MySQL基础</a></li><li><a href="/IOC%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="IOC配置方式（一）">IOC配置方式（一）</a></li><li><a href="/IOC%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89" rel="bookmark" title="IOC配置方式（二）">IOC配置方式（二）</a></li><li><a href="/IOC%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F" rel="bookmark" title="IOC注解方式">IOC注解方式</a></li><li><a href="/AOP" rel="bookmark" title="AOP">AOP</a></li><li><a href="/SpringBoot%E5%85%A5%E9%97%A8" rel="bookmark" title="SpringBoot入门">SpringBoot入门</a></li><li><a href="/SpringBoot-Web%E5%BC%80%E5%8F%91" rel="bookmark" title="SpringBoot-Web开发">SpringBoot-Web开发</a></li><li><a href="/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86" rel="bookmark" title="SpringBoot自动装配原理">SpringBoot自动装配原理</a></li><li><a href="/zookeeper%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" rel="bookmark" title="zookeeper搭建及基本概念">zookeeper搭建及基本概念</a></li><li><a href="/zookeeper%E5%8E%9F%E7%90%86" rel="bookmark" title="zookeeper原理">zookeeper原理</a></li><li><a href="/zookeeper%E6%A1%88%E4%BE%8B" rel="bookmark" title="zookeeper案例">zookeeper案例</a></li><li><a href="/MySQL%E8%B0%83%E4%BC%98%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="MySQL调优（一）">MySQL调优（一）</a></li><li><a href="/redis%E5%AE%89%E8%A3%85%E5%8F%8ANIO%E5%8E%9F%E7%90%86" rel="bookmark" title="redis安装及NIO原理">redis安装及NIO原理</a></li><li><a href="/SpringMVC%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="SpringMVC入门（一）">SpringMVC入门（一）</a></li><li><a href="/SpringMVC%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89" rel="bookmark" title="SpringMVC入门（二）">SpringMVC入门（二）</a></li><li><a href="/SpringMVC-REST%E9%A3%8E%E6%A0%BC" rel="bookmark" title="SpringMVC-REST风格">SpringMVC-REST风格</a></li><li><a href="/SpringMVC%E8%BF%9B%E9%98%B6" rel="bookmark" title="SpringMVC进阶">SpringMVC进阶</a></li><li><a href="/SpringMVC%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93" rel="bookmark" title="SpringMVC源码总结">SpringMVC源码总结</a></li><li><a href="/shiro%E5%85%A5%E9%97%A8" rel="bookmark" title="shiro入门">shiro入门</a></li><li><a href="/shiro%E6%95%B4%E5%90%88SpringBoot" rel="bookmark" title="shiro整合SpringBoot">shiro整合SpringBoot</a></li><li><a href="/shiro%E7%9A%84session%E7%AE%A1%E7%90%86" rel="bookmark" title="shiro的session管理">shiro的session管理</a></li><li><a href="/shiro%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E7%99%BB%E5%BD%95" rel="bookmark" title="shiro的缓存机制与分布式登录">shiro的缓存机制与分布式登录</a></li><li><a href="/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95" rel="bookmark" title="单点登录">单点登录</a></li><li><a href="/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86" rel="bookmark" title="线程基础知识">线程基础知识</a></li><li><a href="/%E5%AE%B9%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0" rel="bookmark" title="容器与线程池">容器与线程池</a></li><li><a href="/Win10%E5%AE%89%E8%A3%85docker" rel="bookmark" title="Win10安装docker">Win10安装docker</a></li><li><a href="/Win10%E5%AE%89%E8%A3%85docker" rel="bookmark" title="Win10安装docker">Win10安装docker</a></li><li><a href="/JMH" rel="bookmark" title="JMH">JMH</a></li><li class="active"><a href="/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B" rel="bookmark" title="并发编程">并发编程</a></li><li><a href="/java-%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB" rel="bookmark" title="java-日志体系">java-日志体系</a></li><li><a href="/redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" rel="bookmark" title="redis的数据类型">redis的数据类型</a></li><li><a href="/redis%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8" rel="bookmark" title="redis进阶使用">redis进阶使用</a></li><li><a href="/redis%E7%9A%84%E9%9B%86%E7%BE%A4" rel="bookmark" title="redis的集群">redis的集群</a></li><li><a href="/redis%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8" rel="bookmark" title="redis在开发中的简单使用">redis在开发中的简单使用</a></li><li><a href="/ChainOfResponsibility%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F" rel="bookmark" title="ChainOfResponsibility责任链模式">ChainOfResponsibility责任链模式</a></li><li><a href="/Composite%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Composite组合模式">Composite组合模式</a></li><li><a href="/Decorator%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Decorator装饰器模式">Decorator装饰器模式</a></li><li><a href="/Facade%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Facade门面模式">Facade门面模式</a></li><li><a href="/Factory%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Factory工厂模式">Factory工厂模式</a></li><li><a href="/Flyweight%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Flyweight享元模式">Flyweight享元模式</a></li><li><a href="/Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Iterator迭代器模式">Iterator迭代器模式</a></li><li><a href="/Mediator%E8%B0%83%E5%81%9C%E8%80%85%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Mediator调停者模式">Mediator调停者模式</a></li><li><a href="/Observer%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Observer观察者模式">Observer观察者模式</a></li><li><a href="/Proxy%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Proxy代理模式">Proxy代理模式</a></li><li><a href="/Singleton%E5%8D%95%E4%BE%8B" rel="bookmark" title="Singleton单例">Singleton单例</a></li><li><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8A%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95" rel="bookmark" title="微服务以及架构发展">微服务以及架构发展</a></li><li><a href="/JVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD" rel="bookmark" title="JVM-类的加载">JVM-类的加载</a></li><li><a href="/SpringCloud-Netflix%E4%BD%93%E7%B3%BB" rel="bookmark" title="SpringCloud-Netflix体系">SpringCloud-Netflix体系</a></li><li><a href="/%E5%BA%8F%E5%88%97%E5%8C%96" rel="bookmark" title="序列化">序列化</a></li><li><a href="/JVM-JMM" rel="bookmark" title="JVM-JMM">JVM-JMM</a></li><li><a href="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84" rel="bookmark" title="分布式系统与高并发系统架构">分布式系统与高并发系统架构</a></li><li><a href="/JVM-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA" rel="bookmark" title="JVM-对象的创建">JVM-对象的创建</a></li><li><a href="/JVM-JVM%E8%B0%83%E4%BC%98" rel="bookmark" title="JVM-JVM调优">JVM-JVM调优</a></li><li><a href="/JVM-GC" rel="bookmark" title="JVM-GC">JVM-GC</a></li><li><a href="/SpringCloud-Alibaba%E4%BD%93%E7%B3%BB" rel="bookmark" title="SpringCloud-Alibaba体系">SpringCloud-Alibaba体系</a></li><li><a href="/SpringCloud-SpringCloud%E4%BD%93%E7%B3%BB" rel="bookmark" title="SpringCloud-SpringCloud体系">SpringCloud-SpringCloud体系</a></li><li><a href="/Apollo" rel="bookmark" title="Apollo">Apollo</a></li><li><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="微服务中的会话管理（一）">微服务中的会话管理（一）</a></li><li><a href="/%E7%A3%81%E7%9B%98IO%E4%B8%8E%E7%BD%91%E7%BB%9CIO" rel="bookmark" title="磁盘IO与网络IO">磁盘IO与网络IO</a></li><li><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89" rel="bookmark" title="微服务中的会话管理（二）">微服务中的会话管理（二）</a></li><li><a href="/HTTPS" rel="bookmark" title="HTTPS">HTTPS</a></li><li><a href="/RocketMQ-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5" rel="bookmark" title="RocketMQ-基础概念">RocketMQ-基础概念</a></li><li><a href="/RocketMQ-%E6%B6%88%E6%81%AF%E3%80%81%E4%BA%8B%E5%8A%A1" rel="bookmark" title="RocketMQ-消息、事务">RocketMQ-消息、事务</a></li><li><a href="/Kafka-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84" rel="bookmark" title="Kafka-整体架构">Kafka-整体架构</a></li><li><a href="/%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B" rel="bookmark" title="网络IO模型">网络IO模型</a></li><li><a href="/Kafka-%E6%90%AD%E5%BB%BA" rel="bookmark" title="Kafka-搭建">Kafka-搭建</a></li><li><a href="/Netty" rel="bookmark" title="Netty">Netty</a></li><li><a href="/nginx%E5%AE%9E%E6%88%98" rel="bookmark" title="nginx实战">nginx实战</a></li><li><a href="/Java%E5%92%8C%E4%B8%B2%E5%8F%A3%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1" rel="bookmark" title="Java和串口进行通信">Java和串口进行通信</a></li></ul></div><div class="overview panel" data-title="站点概览"><div class="author" itemprop="author" itemscope itemtype="http://schema.org/Person"><img class="image" itemprop="image" alt="fanfanfan" data-src="/images/avatar.png"><p class="name" itemprop="name">fanfanfan</p><div class="description" itemprop="description">花有重开日，人无再少年</div></div><nav class="state"><div class="item posts"><a href="/archives/"><span class="count">73</span> <span class="name">文章</span></a></div><div class="item categories"><a href="/categories/"><span class="count">3</span> <span class="name">分类</span></a></div><div class="item tags"><a href="/tags/"><span class="count">77</span> <span class="name">标签</span></a></div></nav><div class="social"></div><ul class="menu"><li class="item"><a href="/" rel="section"><i class="ic i-home"></i>首页</a></li><li class="item dropdown"><a href="javascript:void(0);"><i class="ic i-feather"></i>文章</a><ul class="submenu"><li class="item"><a href="/archives/" rel="section"><i class="ic i-list-alt"></i>归档</a></li><li class="item"><a href="/categories/" rel="section"><i class="ic i-th"></i>分类</a></li><li class="item"><a href="/tags/" rel="section"><i class="ic i-tags"></i>标签</a></li></ul></li><li class="item"><a href="/friends/" rel="section"><i class="ic i-magic"></i>友链</a></li><li class="item"><a href="/about/" rel="section"><i class="ic i-user"></i>关于</a></li></ul></div></div></div><ul id="quick"><li class="prev pjax"><a href="/Win10%E5%AE%89%E8%A3%85docker" rel="prev" title="上一篇"><i class="ic i-chevron-left"></i></a></li><li class="up"><i class="ic i-arrow-up"></i></li><li class="down"><i class="ic i-arrow-down"></i></li><li class="next pjax"><a href="/JMH" rel="next" title="下一篇"><i class="ic i-chevron-right"></i></a></li><li class="percent"></li></ul></div></div><div class="dimmer"></div></div></main><footer id="footer"><div class="inner"><div class="widgets"><div class="rpost pjax"><h2>随机文章</h2><ul><li class="item"><div class="breadcrumb"><a href="/categories/instruments/" title="分类于 工具">工具</a></div><span><a href="/%E5%9F%BA%E4%BA%8ETypora%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%88%B6%E4%BD%9C" title="基于Typora的流程图制作">基于Typora的流程图制作</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/zookeeper%E5%8E%9F%E7%90%86" title="zookeeper原理">zookeeper原理</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/instruments/" title="分类于 工具">工具</a> <i class="ic i-angle-right"></i> <a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/Java%E5%92%8C%E4%B8%B2%E5%8F%A3%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1" title="Java和串口进行通信">Java和串口进行通信</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/%E5%AE%B9%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0" title="容器与线程池">容器与线程池</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/instruments/" title="分类于 工具">工具</a></div><span><a href="/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E7%BF%BB%E8%AF%91%E5%B0%8F%E5%B7%A5%E5%85%B7%EF%BC%88%E4%B8%80%EF%BC%89" title="手动实现翻译小工具（一）">手动实现翻译小工具（一）</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F" title="Iterator迭代器模式">Iterator迭代器模式</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/redis%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8" title="redis进阶使用">redis进阶使用</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a> <i class="ic i-angle-right"></i> <a href="/categories/java/%E5%BE%AE%E6%9C%8D%E5%8A%A1/" title="分类于 微服务">微服务</a></div><span><a href="/SpringCloud-Netflix%E4%BD%93%E7%B3%BB" title="SpringCloud-Netflix体系">SpringCloud-Netflix体系</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/Composite%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F" title="Composite组合模式">Composite组合模式</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89" title="微服务中的会话管理（二）">微服务中的会话管理（二）</a></span></li></ul></div><div><h2>最新评论</h2><ul class="leancloud-recent-comment"></ul></div></div><div class="status"><div class="copyright">&copy; 2010 – <span itemprop="copyrightYear">2021</span> <span class="with-love"><i class="ic i-sakura rotate"></i> </span><span class="author" itemprop="copyrightHolder">fanfanfan @</span></div><div class="count"><span class="post-meta-item-icon"><i class="ic i-chart-area"></i> </span><span title="站点总字数">1.3m 字</span> <span class="post-meta-divider">|</span> <span class="post-meta-item-icon"><i class="ic i-coffee"></i> </span><span title="站点阅读时长">20:22</span></div><div class="powered-by">基于 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo</span> & Theme.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==">Shoka</span></div></div></div></footer></div><script data-config type="text/javascript">var LOCAL={path:"/并发编程",favicon:{show:"书院十四先生",hide:"书院十四先生"},search:{placeholder:"文章搜索",empty:"关于 「 ${query} 」，什么也没搜到",stats:"${time} ms 内找到 ${hits} 条结果"},valine:!0,fancybox:!0,copyright:'复制成功，转载请遵守 <i class="ic i-creative-commons"></i>BY-NC-SA 协议。',ignores:[function(e){return e.includes("#")},function(e){return new RegExp(LOCAL.path+"$").test(e)}]}</script><script src="https://cdn.polyfill.io/v2/polyfill.js"></script><script src="//cdn.jsdelivr.net/combine/npm/pace-js@1.0.2/pace.min.js,npm/pjax@0.2.8/pjax.min.js,npm/whatwg-fetch@3.4.0/dist/fetch.umd.min.js,npm/animejs@3.2.0/lib/anime.min.js,npm/algoliasearch@4/dist/algoliasearch-lite.umd.js,npm/instantsearch.js@4/dist/instantsearch.production.min.js,npm/lozad@1/dist/lozad.min.js,npm/quicklink@2/dist/quicklink.umd.js"></script><script src="/js/app.js?v=0.2.5"></script></body></html><!-- rebuild by hrmmi -->