<!-- build time:Sat Dec 25 2021 19:43:26 GMT+0800 (中国标准时间) --><!DOCTYPE html><html lang="zh-CN,en,default"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=2"><meta name="theme-color" content="#FFF"><link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png"><link rel="icon" type="image/ico" sizes="32x32" href="/images/favicon.ico"><meta http-equiv="Cache-Control" content="no-transform"><meta http-equiv="Cache-Control" content="no-siteapp"><link rel="alternate" type="application/rss+xml" href="https://baiyezi.vip/rss.xml"><link rel="alternate" type="application/atom+xml" href="https://baiyezi.vip/atom.xml"><link rel="alternate" type="application/json" href="https://baiyezi.vip/feed.json"><link rel="stylesheet" href="//fonts.googleapis.com/css?family=Mulish:300,300italic,400,400italic,700,700italic%7CFredericka%20the%20Great:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20JP:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20SC:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext"><link rel="stylesheet" href="/css/app.css?v=0.2.5"><meta name="keywords" content="Java,NIO,IO,socket,BIO"><link rel="canonical" href="https://baiyezi.vip/%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B"><title>网络IO模型 - Java |</title><meta name="generator" content="Hexo 5.4.0"></head><body itemscope itemtype="http://schema.org/WebPage"><div id="loading"><div class="cat"><div class="body"></div><div class="head"><div class="face"></div></div><div class="foot"><div class="tummy-end"></div><div class="bottom"></div><div class="legs left"></div><div class="legs right"></div></div><div class="paw"><div class="hands left"></div><div class="hands right"></div></div></div></div><div id="container"><header id="header" itemscope itemtype="http://schema.org/WPHeader"><div class="inner"><div id="brand"><div class="pjax"><h1 itemprop="name headline">网络IO模型</h1><div class="meta"><span class="item" title="创建时间：2021-08-15 19:54:25"><span class="icon"><i class="ic i-calendar"></i> </span><span class="text">发表于</span> <time itemprop="dateCreated datePublished" datetime="2021-08-15T19:54:25+08:00">2021-08-15</time> </span><span class="item" title="本文字数"><span class="icon"><i class="ic i-pen"></i> </span><span class="text">本文字数</span> <span>47k</span> <span class="text">字</span> </span><span class="item" title="阅读时长"><span class="icon"><i class="ic i-clock"></i> </span><span class="text">阅读时长</span> <span>42 分钟</span> </span><span class="item" title="浏览次数"><span class="icon"><i class="ic i-eye"></i> </span><span class="leancloud-visitors-count"></span></span></div></div></div><nav id="nav"><div class="inner"><div class="toggle"><div class="lines" aria-label="切换导航栏"><span class="line"></span> <span class="line"></span> <span class="line"></span></div></div><ul class="menu"><li class="item title"><a href="/" rel="start"></a></li></ul><ul class="right"><li class="item theme"><i class="ic i-sun"></i></li><li class="item search"><i class="ic i-search"></i></li></ul></div></nav></div><div id="imgs" class="pjax"><ul><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105418.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225104957.png"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105422.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105423.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105419.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105008.png"></li></ul></div></header><div id="waves"><svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"/></defs><g class="parallax"><use xlink:href="#gentle-wave" x="48" y="0"/><use xlink:href="#gentle-wave" x="48" y="3"/><use xlink:href="#gentle-wave" x="48" y="5"/><use xlink:href="#gentle-wave" x="48" y="7"/></g></svg></div><main><div class="inner"><div id="main" class="pjax"><div class="article wrap"><div class="breadcrumb" itemscope itemtype="https://schema.org/BreadcrumbList"><i class="ic i-home"></i> <span><a href="/">首页</a></span><i class="ic i-angle-right"></i> <span class="current" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/categories/java/" itemprop="item" rel="index" title="分类于 Java"><span itemprop="name">Java</span></a><meta itemprop="position" content="1"></span></div><article itemscope itemtype="http://schema.org/Article" class="post block" lang="zh-CN"><link itemprop="mainEntityOfPage" href="https://baiyezi.vip/%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B"><span hidden itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="image" content="/images/avatar.png"><meta itemprop="name" content="fanfanfan"><meta itemprop="description" content=", 花有重开日，人无再少年"></span><span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization"><meta itemprop="name" content=""></span><div class="body md" itemprop="articleBody"><h2 id="bio"><a class="anchor" href="#bio">#</a> BIO</h2><h3 id="tcp的一些参数"><a class="anchor" href="#tcp的一些参数">#</a> TCP 的一些参数</h3><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#查看指定进程的文件描述符</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">lsof</span> -p </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#查看连接状态</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">netstat</span> -natp</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#抓取网络通讯包</span></pre></td></tr><tr><td data-num="6"></td><td><pre>tcpdump</pre></td></tr></table></figure><p>socket 服务端（ip：192.168.137.131）</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="10"></td><td><pre> * BIO  多线程的方式</pre></td></tr><tr><td data-num="11"></td><td><pre> */</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketIOPropertites</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">//server socket listen property:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RECEIVE_BUFFER <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SO_TIMEOUT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> REUSE_ADDR <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BACK_LOG <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">//client socket listen property on server endpoint:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 是否是长连接</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> CLI_KEEPALIVE <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> CLI_OOB <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CLI_REC_BUF <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> CLI_REUSE_ADDR <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CLI_SEND_BUF <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> CLI_LINGER <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CLI_LINGER_N <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CLI_TIMEOUT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> CLI_NO_DELAY <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">/*</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    StandardSocketOptions.TCP_NODELAY</pre></td></tr><tr><td data-num="34"></td><td><pre>    StandardSocketOptions.SO_KEEPALIVE</pre></td></tr><tr><td data-num="35"></td><td><pre>    StandardSocketOptions.SO_LINGER</pre></td></tr><tr><td data-num="36"></td><td><pre>    StandardSocketOptions.SO_RCVBUF</pre></td></tr><tr><td data-num="37"></td><td><pre>    StandardSocketOptions.SO_SNDBUF</pre></td></tr><tr><td data-num="38"></td><td><pre>    StandardSocketOptions.SO_REUSEADDR</pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre> */</pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BACK_LOG<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">setReceiveBufferSize</span><span class="token punctuation">(</span>RECEIVE_BUFFER<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">setReuseAddress</span><span class="token punctuation">(</span>REUSE_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span>SO_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server up use 9090!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>               <span class="token comment">// 阻塞，等待输入，此时，客户端发过来的消息会被放入内核的缓存中，直到该服务端执行以下的 accept ()</span></pre></td></tr><tr><td data-num="61"></td><td><pre>                <span class="token comment">// 时，此时内核缓存中的数据会发送给服务端</span></pre></td></tr><tr><td data-num="62"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre>                <span class="token class-name">Socket</span> client <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 阻塞的，没有 -1  一直卡着不动  accept (4,</span></pre></td></tr><tr><td data-num="65"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client port: "</span> <span class="token operator">+</span> client<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setKeepAlive</span><span class="token punctuation">(</span>CLI_KEEPALIVE<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setOOBInline</span><span class="token punctuation">(</span>CLI_OOB<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setReceiveBufferSize</span><span class="token punctuation">(</span>CLI_REC_BUF<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setReuseAddress</span><span class="token punctuation">(</span>CLI_REUSE_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setSendBufferSize</span><span class="token punctuation">(</span>CLI_SEND_BUF<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setSoLinger</span><span class="token punctuation">(</span>CLI_LINGER<span class="token punctuation">,</span> CLI_LINGER_N<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span>CLI_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setTcpNoDelay</span><span class="token punctuation">(</span>CLI_NO_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre>                <span class="token comment">//client.read   // 阻塞   没有  -1 0</span></pre></td></tr><tr><td data-num="77"></td><td><pre>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="78"></td><td><pre>                        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>                                <span class="token class-name">InputStream</span> in <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>                                <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>                                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>                                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>                                    <span class="token keyword">int</span> num <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>                                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client read some data is :"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">" val :"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>                                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>                                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client readed nothing!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>                                        <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>                                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>                                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client readed -1..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>                                        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>                                        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>                                        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>                                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>                                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="99"></td><td><pre></pre></td></tr><tr><td data-num="100"></td><td><pre>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>                            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="103"></td><td><pre></pre></td></tr><tr><td data-num="104"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre></pre></td></tr><tr><td data-num="107"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="112"></td><td><pre>                server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="117"></td><td><pre></pre></td></tr><tr><td data-num="118"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="119"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>Socket 客户端（ip：192.168.137.128）</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="5"></td><td><pre> */</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketClient</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token comment">// 连接服务端</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token class-name">Socket</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"192.168.137.131"</span><span class="token punctuation">,</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>            client<span class="token punctuation">.</span><span class="token function">setSendBufferSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            client<span class="token punctuation">.</span><span class="token function">setTcpNoDelay</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token class-name">String</span> line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>line <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bb <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> bb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#启动 Socket 服务端</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>root@localhost testsocket<span class="token punctuation">]</span><span class="token comment"># java SocketIOPropertites </span></pre></td></tr><tr><td data-num="3"></td><td><pre>server up use <span class="token number">9090</span><span class="token operator">!</span></pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># netstat -natp</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Active Internet connections <span class="token punctuation">(</span>servers and established<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#可以看到端口 9090 处于监听状态</span></pre></td></tr><tr><td data-num="5"></td><td><pre>tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::9090                 :::*                    LISTEN      <span class="token number">4626</span>/java           </pre></td></tr><tr><td data-num="6"></td><td><pre>tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::111                  :::*                    LISTEN      <span class="token number">1</span>/systemd</pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># jps</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">4626</span> SocketIOPropertites</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">4645</span> Jps</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#查看以上 Socket 服务端进程的文件描述符</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsof -p 4626</span></pre></td></tr><tr><td data-num="6"></td><td><pre>java    <span class="token number">4626</span> root    7u  IPv6              <span class="token number">71164</span>      0t0      TCP *:websm <span class="token punctuation">(</span>LISTEN<span class="token punctuation">)</span></pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#监听指定网卡的端口</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># tcpdump -nn -i ens33 port 9090</span></pre></td></tr><tr><td data-num="3"></td><td><pre>tcpdump: verbose output suppressed, use -v or -vv <span class="token keyword">for</span> full protocol decode</pre></td></tr><tr><td data-num="4"></td><td><pre>listening on ens33, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes</pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#启动客户端</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>root@localhost testsocket<span class="token punctuation">]</span><span class="token comment"># java SocketClient</span></pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># netstat -natp</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Active Internet connections <span class="token punctuation">(</span>servers and established<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name     </pre></td></tr><tr><td data-num="4"></td><td><pre>tcp6       <span class="token number">1</span>      <span class="token number">0</span> :::9090                 :::*                    LISTEN      <span class="token number">4626</span>/java           </pre></td></tr><tr><td data-num="5"></td><td><pre>tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::111                  :::*                    LISTEN      <span class="token number">1</span>/systemd    <span class="token comment">#服务端 131 与客户端 128 建立了连接，但并没有 pid，因为服务端在阻塞等待输入</span></pre></td></tr><tr><td data-num="6"></td><td><pre>tcp6       <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">192.168</span>.137.131:9090    <span class="token number">192.168</span>.137.128:55058   ESTABLISHED -</pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#数据包查看</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># tcpdump -nn -i ens33 port 9090</span></pre></td></tr><tr><td data-num="3"></td><td><pre>tcpdump: verbose output suppressed, use -v or -vv <span class="token keyword">for</span> full protocol decode</pre></td></tr><tr><td data-num="4"></td><td><pre>listening on ens33, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#可以看到 131 与 128 有三次握手</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">17</span>:48:07.627589 IP <span class="token number">192.168</span>.137.128.55058 <span class="token operator">></span> <span class="token number">192.168</span>.137.131.9090: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">377241970</span>, win <span class="token number">29200</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">202063491</span> ecr <span class="token number">0</span>,nop,wscale <span class="token number">7</span><span class="token punctuation">]</span>, length <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">17</span>:48:07.627992 IP <span class="token number">192.168</span>.137.131.9090 <span class="token operator">></span> <span class="token number">192.168</span>.137.128.55058: Flags <span class="token punctuation">[</span>S.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">2901635676</span>, ack <span class="token number">377241971</span>, win <span class="token number">1152</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">1965980806</span> ecr <span class="token number">202063491</span>,nop,wscale <span class="token number">0</span><span class="token punctuation">]</span>, length <span class="token number">0</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">17</span>:48:07.628870 IP <span class="token number">192.168</span>.137.128.55058 <span class="token operator">></span> <span class="token number">192.168</span>.137.131.9090: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, ack <span class="token number">1</span>, win <span class="token number">229</span>, options <span class="token punctuation">[</span>nop,nop,TS val <span class="token number">202063493</span> ecr <span class="token number">1965980806</span><span class="token punctuation">]</span>, length <span class="token number">0</span></pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#客户端发送消息</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>root@localhost testsocket<span class="token punctuation">]</span><span class="token comment"># java SocketClient </span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">1111</span></pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#服务端在阻塞等待输入，所以无法接收到客户端发送的消息</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>root@localhost testsocket<span class="token punctuation">]</span><span class="token comment"># java SocketIOPropertites </span></pre></td></tr><tr><td data-num="3"></td><td><pre>server up use <span class="token number">9090</span><span class="token operator">!</span></pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># tcpdump -nn -i ens33 port 9090</span></pre></td></tr><tr><td data-num="2"></td><td><pre>tcpdump: verbose output suppressed, use -v or -vv <span class="token keyword">for</span> full protocol decode</pre></td></tr><tr><td data-num="3"></td><td><pre>listening on ens33, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">17</span>:48:07.627589 IP <span class="token number">192.168</span>.137.128.55058 <span class="token operator">></span> <span class="token number">192.168</span>.137.131.9090: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">377241970</span>, win <span class="token number">29200</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">202063491</span> ecr <span class="token number">0</span>,nop,wscale <span class="token number">7</span><span class="token punctuation">]</span>, length <span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">17</span>:48:07.627992 IP <span class="token number">192.168</span>.137.131.9090 <span class="token operator">></span> <span class="token number">192.168</span>.137.128.55058: Flags <span class="token punctuation">[</span>S.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">2901635676</span>, ack <span class="token number">377241971</span>, win <span class="token number">1152</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">1965980806</span> ecr <span class="token number">202063491</span>,nop,wscale <span class="token number">0</span><span class="token punctuation">]</span>, length <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">17</span>:48:07.628870 IP <span class="token number">192.168</span>.137.128.55058 <span class="token operator">></span> <span class="token number">192.168</span>.137.131.9090: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, ack <span class="token number">1</span>, win <span class="token number">229</span>, options <span class="token punctuation">[</span>nop,nop,TS val <span class="token number">202063493</span> ecr <span class="token number">1965980806</span><span class="token punctuation">]</span>, length <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#有数据包</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">17</span>:51:00.374704 IP <span class="token number">192.168</span>.137.128.55058 <span class="token operator">></span> <span class="token number">192.168</span>.137.131.9090: Flags <span class="token punctuation">[</span>P.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">1</span>:2, ack <span class="token number">1</span>, win <span class="token number">229</span>, options <span class="token punctuation">[</span>nop,nop,TS val <span class="token number">202236239</span> ecr <span class="token number">1965980806</span><span class="token punctuation">]</span>, length <span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">17</span>:51:00.374760 IP <span class="token number">192.168</span>.137.131.9090 <span class="token operator">></span> <span class="token number">192.168</span>.137.128.55058: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, ack <span class="token number">2</span>, win <span class="token number">1151</span>, options <span class="token punctuation">[</span>nop,nop,TS val <span class="token number">1966153553</span> ecr <span class="token number">202236239</span><span class="token punctuation">]</span>, length <span class="token number">0</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">17</span>:51:00.374830 IP <span class="token number">192.168</span>.137.128.55058 <span class="token operator">></span> <span class="token number">192.168</span>.137.131.9090: Flags <span class="token punctuation">[</span>P.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">2</span>:3, ack <span class="token number">1</span>, win <span class="token number">229</span>, options <span class="token punctuation">[</span>nop,nop,TS val <span class="token number">202236239</span> ecr <span class="token number">1965980806</span><span class="token punctuation">]</span>, length <span class="token number">1</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">17</span>:51:00.374875 IP <span class="token number">192.168</span>.137.128.55058 <span class="token operator">></span> <span class="token number">192.168</span>.137.131.9090: Flags <span class="token punctuation">[</span>P.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">3</span>:4, ack <span class="token number">1</span>, win <span class="token number">229</span>, options <span class="token punctuation">[</span>nop,nop,TS val <span class="token number">202236239</span> ecr <span class="token number">1965980806</span><span class="token punctuation">]</span>, length <span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">17</span>:51:00.375174 IP <span class="token number">192.168</span>.137.128.55058 <span class="token operator">></span> <span class="token number">192.168</span>.137.131.9090: Flags <span class="token punctuation">[</span>P.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">4</span>:5, ack <span class="token number">1</span>, win <span class="token number">229</span>, options <span class="token punctuation">[</span>nop,nop,TS val <span class="token number">202236239</span> ecr <span class="token number">1966153553</span><span class="token punctuation">]</span>, length <span class="token number">1</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">17</span>:51:00.385449 IP <span class="token number">192.168</span>.137.128.55058 <span class="token operator">></span> <span class="token number">192.168</span>.137.131.9090: Flags <span class="token punctuation">[</span>P.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">4</span>:5, ack <span class="token number">1</span>, win <span class="token number">229</span>, options <span class="token punctuation">[</span>nop,nop,TS val <span class="token number">202236246</span> ecr <span class="token number">1966153553</span><span class="token punctuation">]</span>, length <span class="token number">1</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">17</span>:51:00.385932 IP <span class="token number">192.168</span>.137.131.9090 <span class="token operator">></span> <span class="token number">192.168</span>.137.128.55058: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, ack <span class="token number">5</span>, win <span class="token number">1148</span>, options <span class="token punctuation">[</span>nop,nop,TS val <span class="token number">1966153564</span> ecr <span class="token number">202236239</span>,nop,nop,sack <span class="token number">1</span> <span class="token punctuation">&#123;</span><span class="token number">4</span>:5<span class="token punctuation">&#125;</span><span class="token punctuation">]</span>, length <span class="token number">0</span></pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># netstat -natp</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Active Internet connections <span class="token punctuation">(</span>servers and established<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name  </pre></td></tr><tr><td data-num="4"></td><td><pre>tcp6       <span class="token number">1</span>      <span class="token number">0</span> :::9090                 :::*                    LISTEN      <span class="token number">4626</span>/java           </pre></td></tr><tr><td data-num="5"></td><td><pre>tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::111                  :::*                    LISTEN      <span class="token number">1</span>/systemd    <span class="token comment">#可以看到服务端无法接收消息时，内核会缓存客户端发送的消息，这里为 4 字节（1111）</span></pre></td></tr><tr><td data-num="6"></td><td><pre>tcp6       <span class="token number">4</span>      <span class="token number">0</span> <span class="token number">192.168</span>.137.131:9090    <span class="token number">192.168</span>.137.128:55058   ESTABLISHED -</pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># jps</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">4626</span> SocketIOPropertites</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">4734</span> Jps</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsof -p 4626</span></pre></td></tr><tr><td data-num="5"></td><td><pre>COMMAND  PID <span class="token environment constant">USER</span>   FD   TYPE             DEVICE SIZE/OFF     NODE NAME</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#由于服务端阻塞，所以文件描述符仍然处于监听状态，而不是建立连接状态</span></pre></td></tr><tr><td data-num="7"></td><td><pre>java    <span class="token number">4626</span> root    7u  IPv6              <span class="token number">71164</span>      0t0      TCP *:websm <span class="token punctuation">(</span>LISTEN<span class="token punctuation">)</span></pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#服务端回车，结束阻塞</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>root@localhost testsocket<span class="token punctuation">]</span><span class="token comment"># java SocketIOPropertites </span></pre></td></tr><tr><td data-num="3"></td><td><pre>server up use <span class="token number">9090</span><span class="token operator">!</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#回车后，立即收到了客户端发送的消息</span></pre></td></tr><tr><td data-num="6"></td><td><pre>client port: <span class="token number">55058</span></pre></td></tr><tr><td data-num="7"></td><td><pre>client <span class="token builtin class-name">read</span> some data is :4 val :1111</pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># netstat -natp</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Active Internet connections <span class="token punctuation">(</span>servers and established<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </pre></td></tr><tr><td data-num="4"></td><td><pre>tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::9090                 :::*                    LISTEN      <span class="token number">4626</span>/java           </pre></td></tr><tr><td data-num="5"></td><td><pre>tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::111                  :::*                    LISTEN      <span class="token number">1</span>/systemd   </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#服务端结束阻塞后，内核缓存的数据发送给了服务端，此时与客户端正式建立 socket 连接</span></pre></td></tr><tr><td data-num="7"></td><td><pre>tcp6       <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">192.168</span>.137.131:9090    <span class="token number">192.168</span>.137.128:55058   ESTABLISHED <span class="token number">4626</span>/java</pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsof -p 4626</span></pre></td></tr><tr><td data-num="2"></td><td><pre>COMMAND  PID <span class="token environment constant">USER</span>   FD   TYPE             DEVICE SIZE/OFF     NODE NAME</pre></td></tr><tr><td data-num="3"></td><td><pre>java    <span class="token number">4626</span> root    7u  IPv6              <span class="token number">71164</span>      0t0      TCP *:websm <span class="token punctuation">(</span>LISTEN<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>java    <span class="token number">4626</span> root    8u  IPv6              <span class="token number">72314</span>      0t0      TCP localhost.localdomain:websm-<span class="token operator">></span><span class="token number">192.168</span>.137.128:55058 <span class="token punctuation">(</span>ESTABLISHED<span class="token punctuation">)</span></pre></td></tr></table></figure><p>综上所述，TCP 是面向连接的、可靠的（ack 确认机制）网络传输协议。三次握手之后，客户端与服务端均在内核开辟资源分配文件描述符，该资源就代表连接。</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/20210428195054.png" alt="image-20210428185837128"></p><h3 id="socket"><a class="anchor" href="#socket">#</a> Socket</h3><p>socket 是一个唯一的四元组，即客户端 IP、客户端端口、服务端 IP、服务端端口，每一个四元组在内核中会分配一个文件描述符 FD。socket 是内核级别的，TCP 建立的连接过程中会在内核开辟资源，这个资源就包括了四元组。</p><p>服务端与客户端在建立连接的过程中，先各自在内核中开辟资源分配文件描述符，随后快速完成三次握手建立双方的连接</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/20210505115111.png" alt="image-20210505115108320"></p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">strace</span> -ff -o out 命令 <span class="token comment">#跟踪命令执行过程中的系统调用过程</span></pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#使用 netstat -natp 查看连接状态时，其中 LISTEN 的状态需要在内核中完成以下系统调用过程</span></pre></td></tr><tr><td data-num="2"></td><td><pre>socket <span class="token operator">=</span> fd3</pre></td></tr><tr><td data-num="3"></td><td><pre>bind<span class="token punctuation">(</span>fd3,port<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>listen<span class="token punctuation">(</span>fd3<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>accept<span class="token punctuation">(</span>fd3,<span class="token punctuation">)</span><span class="token comment">#阻塞等待客户端连接</span></pre></td></tr><tr><td data-num="6"></td><td><pre>recv<span class="token punctuation">(</span>fd5<span class="token punctuation">)</span><span class="token comment">#阻塞读取客户端消息</span></pre></td></tr></table></figure><h3 id="socket底层调用函数查看"><a class="anchor" href="#socket底层调用函数查看">#</a> socket 底层调用函数查看</h3><pre><code>man 2 socket #返回文件描述符，如socket=fd3
 	  bind #绑定文件描述符以及端口，bind(fd3, 8090)
      listen #监听描述符，listen(fd3)，此时使用 netstat -natp 可以看到0.0.0.0:8090 0.0.0.0.* LISTEN
	  accept #阻塞等待客户端连接，accept(fd3,)，比如客户端以文件描述符fd5来连接fd3，两者通过文件描述符交换消息
	  recv #阻塞接收客户端的消息，比如从文件描述符fd5来接收客户端的消息recv(fd5,)
</code></pre><p>使用克隆来解决以上的阻塞，将 accept 与 recv 分开，accept 工作在主线程且只负责接收客户端连接，recv 工作在克隆线程且只负责接收客户端消息。也就是说只要 accept 了一个客户端，那么就会 clone 出一个对应的子线程去接收该客户端的消息，防止 recv 阻塞读取客户端消息时影响 accept 接收新的客户端连接。但 clone 的同时也会拖慢下个客户端连接的时间（只有本次 clone 完成后才会允许下一个客户端连接进来），这也是 BIO 慢的原因（即内核本身的原因），所以引进了 NIO。可以通过 socket 的参数 SOCK_NONBLOCK 来设置监听文件描述符以及客户端连接描述符为非阻塞。</p><h3 id="c10k问题"><a class="anchor" href="#c10k问题">#</a> c10k 问题</h3><p>c10k 问题 <span class="exturl" data-url="aHR0cDovL2tlZ2VsLmNvbS9jMTBrLmh0bWw=">http://kegel.com/c10k.html</span></p><p>NIO 的优势是可以使用一个线程来解决 N 个 IO 的连接，但是随着客户端连接数量的增多，服务端循环接收客户端消息时（recv (fd,)）的复杂度提高，为 O (n)，这其中有大量的无意义的循坏去进行系统调用 recv，即无意义的内核态与用户态之间的切换，造成资源的浪费，而多路复用器可以较好的解决这个问题。</p><p>客户端</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SocketChannel</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C10Kclient</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">></span></span> clients <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">InetSocketAddress</span> serverAddr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"192.168.150.11"</span><span class="token punctuation">,</span> <span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token comment">// 端口号的问题：65535</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token comment">//  windows</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">65000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token class-name">SocketChannel</span> client1 <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token class-name">SocketChannel</span> client2 <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token comment">/*</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                linux 中你看到的连接就是：</pre></td></tr><tr><td data-num="22"></td><td><pre>                client...port: 10508</pre></td></tr><tr><td data-num="23"></td><td><pre>                client...port: 10508</pre></td></tr><tr><td data-num="24"></td><td><pre>                 */</pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>                client1<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"192.168.150.1"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token comment">//  192.168.150.1：10000   192.168.150.11：9090</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                client1<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>serverAddr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                clients<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>client1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>                client2<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"192.168.110.100"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                <span class="token comment">//  192.168.110.100：10000  192.168.150.11：9090</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                client2<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>serverAddr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                clients<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>client2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"clients "</span><span class="token operator">+</span> clients<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketIOPropertites</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">//server socket listen property:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RECEIVE_BUFFER <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SO_TIMEOUT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> REUSE_ADDR <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BACK_LOG <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">//client socket listen property on server endpoint:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> CLI_KEEPALIVE <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> CLI_OOB <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CLI_REC_BUF <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> CLI_REUSE_ADDR <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CLI_SEND_BUF <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> CLI_LINGER <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CLI_LINGER_N <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CLI_TIMEOUT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> CLI_NO_DELAY <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">/*</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>    StandardSocketOptions.TCP_NODELAY</pre></td></tr><tr><td data-num="30"></td><td><pre>    StandardSocketOptions.SO_KEEPALIVE</pre></td></tr><tr><td data-num="31"></td><td><pre>    StandardSocketOptions.SO_LINGER</pre></td></tr><tr><td data-num="32"></td><td><pre>    StandardSocketOptions.SO_RCVBUF</pre></td></tr><tr><td data-num="33"></td><td><pre>    StandardSocketOptions.SO_SNDBUF</pre></td></tr><tr><td data-num="34"></td><td><pre>    StandardSocketOptions.SO_REUSEADDR</pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre> */</pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BACK_LOG<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">setReceiveBufferSize</span><span class="token punctuation">(</span>RECEIVE_BUFFER<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">setReuseAddress</span><span class="token punctuation">(</span>REUSE_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span>SO_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server up use 9090!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>                <span class="token comment">// System.in.read ();  // 分水岭：</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>                <span class="token class-name">Socket</span> client <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 阻塞的，没有 -1  一直卡着不动  accept (4,</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client port: "</span> <span class="token operator">+</span> client<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setKeepAlive</span><span class="token punctuation">(</span>CLI_KEEPALIVE<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setOOBInline</span><span class="token punctuation">(</span>CLI_OOB<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setReceiveBufferSize</span><span class="token punctuation">(</span>CLI_REC_BUF<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setReuseAddress</span><span class="token punctuation">(</span>CLI_REUSE_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setSendBufferSize</span><span class="token punctuation">(</span>CLI_SEND_BUF<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setSoLinger</span><span class="token punctuation">(</span>CLI_LINGER<span class="token punctuation">,</span> CLI_LINGER_N<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span>CLI_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">setTcpNoDelay</span><span class="token punctuation">(</span>CLI_NO_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>                <span class="token comment">//BIO 时需要额外的线程去读写客户端</span></pre></td></tr><tr><td data-num="71"></td><td><pre>                <span class="token comment">//client.read   // 阻塞   没有  -1 0</span></pre></td></tr><tr><td data-num="72"></td><td><pre>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="73"></td><td><pre>                        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>                                <span class="token class-name">InputStream</span> in <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>                                <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>                                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>                                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre></pre></td></tr><tr><td data-num="80"></td><td><pre>                                    <span class="token keyword">int</span> num <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>                                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client read some data is :"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">" val :"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>                                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>                                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client readed nothing!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>                                        <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>                                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>                                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client readed -1..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>                                        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>                                        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>                                        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>                                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>                                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="94"></td><td><pre></pre></td></tr><tr><td data-num="95"></td><td><pre>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>                            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="98"></td><td><pre></pre></td></tr><tr><td data-num="99"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre></pre></td></tr><tr><td data-num="102"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="106"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>                server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="112"></td><td><pre></pre></td></tr><tr><td data-num="113"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>客户端 192.168.110.100、192.168.150.1 同时去连接服务端 192.168.150.11，当服务端给 192.168.110.100 回复时无法建立连接，因为和服务端的网关不同，此时可以在服务端加一条路由规则，使得客户端 192.168.110.100 的网关和服务端能建立连接</p><pre><code>route add -host 192.168.110.100 gw 192.168.150.1
route -n
</code></pre><h2 id="nio"><a class="anchor" href="#nio">#</a> NIO</h2><p>NIO 中的 N 在 JDK 指的是 New IO，在 Linux 操作系统中指的是 NONBLOCKING，即非阻塞</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">StandardSocketOptions</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SocketChannel</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketNIO</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">></span></span> clients <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token class-name">ServerSocketChannel</span> ss <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 服务端开启监听：接受客户端</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        ss<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        ss<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重点，将服务端设置为非阻塞，即 NIO，  OS  NONBLOCKING!!!  // 只让接受客户端  不阻塞。此处设置的是 listen 阶段的 socket 不阻塞。</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">//        ss.setOption(StandardSocketOptions.TCP_NODELAY, false);</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">//        StandardSocketOptions.TCP_NODELAY</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">//        StandardSocketOptions.SO_KEEPALIVE</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">//        StandardSocketOptions.SO_LINGER</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">//        StandardSocketOptions.SO_RCVBUF</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">//        StandardSocketOptions.SO_SNDBUF</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">//        StandardSocketOptions.SO_REUSEADDR</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token comment">// 接受客户端的连接</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token class-name">SocketChannel</span> client <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由于以上设置了 ss.configureBlocking (false)，所以不会阻塞</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token comment">//accept  调用内核了：没有客户端连接进来，返回值？在 BIO 的时候一直卡着，没有返回值，但是在 NIO ，不卡着，返回 - 1（操作系统层面），NULL（java 层面）</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token comment">// 如果来客户端的连接，accept 返回的是这个客户端的 fd（操作系统层面），client  object（java 层面）</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token comment">//NONBLOCKING 就是代码能往下走了，只不过有不同的情况</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>client <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>             <span class="token comment">//   System.out.println("null.....");</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                <span class="token comment">// 为 false 时，接收已经连接的客户端的消息不会阻塞，每个客户端可以直接发送消息</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重点，将客户端设置为非阻塞，即 NIO，  socket（服务端的 listen socket&lt; 连接请求三次握手后，往我这里扔，我去通过 accept 得到  连接的 socket>，连接 socket&lt; 连接后的数据读写使用的 > ）。此处是将已经连接的 socket 设置为不阻塞，使得读取消息时不阻塞。</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token keyword">int</span> port <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client..port: "</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                clients<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 可以在堆里   堆外</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>            <span class="token comment">// 遍历已经链接进来的客户端能不能读写数据？可以的</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            <span class="token comment">//BIO 时 accept 客户端连接后，需要用另外的线程去接收客户端的消息，现在 NIO 只需要一个线程既可以接收客户端的连接，又可以接收客户端的消息</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> c <span class="token operator">:</span> clients<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 串行化！！！！  多线程！！</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                <span class="token keyword">int</span> num <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// >0  -1  0   // 不会阻塞</span></pre></td></tr><tr><td data-num="50"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                    buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aaa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                    buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>                    <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>                    buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>执行以上 c10k 的客户端代码来连接该服务端，可以看到客户端的连接数量取决于每个 cpu 内核可打开的文件描述符数量（比如四核八进程可打开的文件描述符数量为 4x8x1024）</p><pre><code class="language-sh">[root@localhost ~]# ulimit -a
core file size          (blocks, -c) unlimited
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 10995
max locked memory       (kbytes, -l) 16384
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024 #单个内核（进程）可打开的文件描述符数量，默认为1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 10995
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
[root@localhost ~]# ulimit -SHn 500000 #设置单个内核可以打开五十万描述符，但其实无法达到这么多，受file-max限制
[root@localhost ~]# ulimit -n
500000

#内核级别的文件描述符数量，随着内存的增大而增大，1GB大约10万描述符
[root@localhost ~]# cat /proc/sys/fs/file-max
279691

</code></pre><p>虽然单进程的默认文件描述符数量为 1024，但是 root 用户会突破该限制，普通用户则不会</p><h3 id="单线程的多路复用器"><a class="anchor" href="#单线程的多路复用器">#</a> 单线程的多路复用器</h3><p>多路复用器的底层是 epoll，相对于原生的 NIO 来说性能会有所提高，而 Netty 是多线程的多路复用器。多路复用器是指多个 IO 连接复用一个系统调用来传递 IO 状态（然后程序自己对有状态的 IO 进行读写，也就是说多路复用器传递的是各个 IO 连接的状态），而不是一个连接占用一个系统调用，很大程度上减少了用户态与内核态之间的切换。这样，对于程序来说，IO 模型就是同步的（即 IO 连接是同步的，但对 IO 读取到的数据的处理可能是异步的）。之前在程序中需要循环查看是否由客户端发送信息（如果有，则会返回连接的文件描述符），现在变为了让多路复用器去询问连接的状态，即是否准备好了文件描述符来进行读写。</p><p>同步：程序自己的读写</p><p>异步：由 kernel 完成向 buffer 的读写，程序访问 buffer 获取数据</p><p>阻塞：BLOCKING</p><p>非阻塞：NONBLOCKING</p><p>同步阻塞：程序自己读取，调用了方法一直等待有效返回结果</p><p>同步非阻塞：程序自己读取，调用方法一瞬间，给出是否读到（自己要解决下一次啥时候再去读）</p><p>异步阻塞：</p><p>异步非阻塞：无意义</p><p>多路复用器可以是 SELECT、POLL、EPOLL，都是同步非阻塞模型。Linux 目前没有内核级的异步解决方法。</p><h3 id="selectpoll"><a class="anchor" href="#selectpoll">#</a> SELECT/POLL</h3><p>synchronous I/O multiplexing</p><p>FD_SETSIZE 文件描述符数量最大为 1024，这也是 SELECT 被淘汰的原因之一，POLL 和 EPOLL 没有限制</p><pre><code>  int select(int nfds, fd_set *readfds, fd_set *writefds,
                  fd_set *exceptfds, struct timeval *timeout);


select()  and pselect() allow a program to monitor multiple file descriptors, waiting until one or more of the file descriptors become &quot;ready&quot; for some class of I/O operation (e.g., input possible).  A file descriptor  is considered  ready  if it is possible to perform a corresponding I/O operation (e.g., read(2) without blocking,or a sufficiently small write(2)).
       select() can monitor only file descriptors numbers that are less than FD_SETSIZE; poll(2) does not  have  this limitation.  See BUGS.

</code></pre><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210816191011452.png" alt="image-20210816191011452"></p><p>无论是 NIO 还是 SELECT、POLL 都是遍历所有的 IO，询问状态。只不过在 NIO 中遍历的成本是内核态与用户态间的频繁切换，而在 SELECT、POLL 中，遍历的过程只触发了一次系统调用，用户态内核态切换过程中，把 fds 传递给内核，内核重新根据用户本次调用传过来的 fds 来遍历修改状态。一个 IO 连接对应一个文件描述符。</p><p>SELECT、POLL 的弊端：</p><p>1、每次都要重新传递 fds</p><p>2、每次内核被调用后，触发一个遍历 fds 全量的复杂度</p><h4 id="程序调用内核过程"><a class="anchor" href="#程序调用内核过程">#</a> 程序调用内核过程</h4><p>软中断：当程序调用内核时，会由 CPU 触发一个中断指令，然后去查询中断向量表进行相应的回调</p><p>硬中断：如时钟中断</p><p>IO 中断：IO 设备（网卡、键盘、鼠标等）</p><p>当中断来了后（对于程序来说，R/W 就是一次 IO 中断，那么就会触发 epoll_wait）会有相应的回调以及事件，在 EPOLL 之前，回调只是完成了将网卡发来的数据，走内核网络协议栈最终关联到 FD 的 buffer。所以，某一时间程序询问内核某些 FD 是否可读写时会有状态返回。如果，内核在回调处理中加入额外的处理（EPOLL 在内核中开辟了红黑树空间以及 list，红黑树用来存储 FD，如果 FD 可读写，那么就放在 list 中供程序直接调用，程序不用再遍历每个 FD 询问状态），那么就是 EPOLL。</p><h3 id="epoll"><a class="anchor" href="#epoll">#</a> EPOLL</h3><h4 id="epoll组成"><a class="anchor" href="#epoll组成">#</a> EPOLL 组成</h4><pre><code class="language-sh">[root@localhost ~]# man epoll
NAME
       epoll - I/O event notification facility

SYNOPSIS
       #include &lt;sys/epoll.h&gt;

DESCRIPTION
       The epoll API performs a similar task to poll(2): monitoring multiple file descriptors to see if I/O is possi‐
       ble on any of them.  The epoll API can be used either as an edge-triggered or a level-triggered interface  and
       scales  well  to large numbers of watched file descriptors.  The following system calls are provided to create
       and manage an epoll instance:

       *  epoll_create(2) creates a new epoll instance and returns a file  descriptor  referring  to  that  instance.
          (The more recent epoll_create1(2) extends the functionality of epoll_create(2).)

       *  Interest  in  particular file descriptors is then registered via epoll_ctl(2).  The set of file descriptors
          currently registered on an epoll instance is sometimes called an epoll set.

       *  epoll_wait(2) waits for I/O events, blocking the calling thread if no events are currently available.

</code></pre><p><strong>epoll_create</strong></p><p>当服务端程序进行完 listen 后就调用 epoll_create，然后返回一个文件描述符。epoll_create 在内核中开辟了空间，用于存放红黑树，而红黑树存放的就是客户端连接的 FD。该过程在建立连接时只会调用一次。</p><pre><code class="language-sh">[root@localhost ~]# man 2 epoll_create

NAME
       epoll_create, epoll_create1 - open an epoll file descriptor

SYNOPSIS
       #include &lt;sys/epoll.h&gt;

       int epoll_create(int size);
       int epoll_create1(int flags);

DESCRIPTION
       epoll_create()  creates a new epoll(7) instance.  Since Linux 2.6.8, the size argument is ignored, but must be
       greater than zero; see NOTES below.

       epoll_create() returns a file descriptor referring to the new epoll instance.  This file  descriptor  is  used
       for all the subsequent calls to the epoll interface.  When no longer required, the file descriptor returned by
       epoll_create() should be closed by using close(2).  When all file descriptors referring to an  epoll  instance
       have been closed, the kernel destroys the instance and releases the associated resources for reuse.

   epoll_create1()
       If  flags  is  0, then, other than the fact that the obsolete size argument is dropped, epoll_create1() is the
       same as epoll_create().  The following value can be included in flags to obtain different behavior:

       EPOLL_CLOEXEC
              Set the close-on-exec (FD_CLOEXEC) flag on the  new  file  descriptor.   See  the  description  of  the
              O_CLOEXEC flag in open(2) for reasons why this may be useful.

RETURN VALUE
       On  success,  these system calls return a nonnegative file descriptor.  On error, -1 is returned, and errno is
       set to indicate the error.

</code></pre><p><strong>epoll_ctl</strong></p><p>该过程会被频繁调用，用来在 epoll_create 创建的红黑树中添加或移除 FD，此外还会向 epoll 注册 fd 的读写等事件</p><pre><code class="language-sh">[root@localhost ~]# man 2 epoll_ctl

NAME
       epoll_ctl - control interface for an epoll file descriptor

SYNOPSIS
       #include &lt;sys/epoll.h&gt;
		# 客户端fd 操作类型（add、mod、del）服务端fd 事件（读写）
       int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);

DESCRIPTION
       This system call performs control operations on the epoll(7) instance referred to by the file descriptor epfd.
       It requests that the operation op be performed for the target file descriptor, fd.

       Valid values for the op argument are:

       EPOLL_CTL_ADD
              Register the target file descriptor fd on the epoll instance referred to by the  file  descriptor  epfd
              and associate the event event with the internal file linked to fd.

       EPOLL_CTL_MOD
              Change the event event associated with the target file descriptor fd.

       EPOLL_CTL_DEL
              Remove  (deregister)  the  target  file descriptor fd from the epoll instance referred to by epfd.  The
              event is ignored and can be NULL (but see BUGS below).

</code></pre><p><strong>epoll_wait</strong></p><p>当中断发生时，网卡将数据写入服务端 FD 的 buffer 中，同时调用 epoll_wait 由内核中的红黑树空间向另一个内核空间（链表）中迁移已经建立连接的服务端的 FD。这样做的好处是，客户端下次连接时直接从链表中获取服务端的 FD，规避了 SELECT 多路复用器对 FD 的全量遍历（包括已建立连接和未建立连接的 FD）。epoll_wait 调用之后，程序仍然需要自己调用 accept、recv</p><pre><code class="language-sh">[root@localhost ~]# man 2 epoll_wait
NAME
       epoll_wait, epoll_pwait - wait for an I/O event on an epoll file descriptor

SYNOPSIS
       #include &lt;sys/epoll.h&gt;

       int epoll_wait(int epfd, struct epoll_event *events,
                      int maxevents, int timeout);
       int epoll_pwait(int epfd, struct epoll_event *events,
                      int maxevents, int timeout,
                      const sigset_t *sigmask);

DESCRIPTION
       The  epoll_wait()  system  call  waits  for events on the epoll(7) instance referred to by the file descriptor
       epfd.  The memory area pointed to by events will contain the events that will be available for the caller.  Up
       to maxevents are returned by epoll_wait().  The maxevents argument must be greater than zero.

       The  timeout  argument  specifies  the  number of milliseconds that epoll_wait() will block.  Time is measured
       against the CLOCK_MONOTONIC clock.  The call will block until either:

       *  a file descriptor delivers an event;

       *  the call is interrupted by a signal handler; or

       *  the timeout expires.

       Note that the timeout interval will be rounded up to the  system  clock  granularity,  and  kernel  scheduling
       delays  mean  that  the  blocking  interval  may overrun by a small amount.  Specifying a timeout of -1 causes
       epoll_wait() to block indefinitely, while specifying a timeout equal to  zero  cause  epoll_wait()  to  return
       immediately, even if no events are available.

</code></pre><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210817173527782.png" alt="image-20210817173527782"></p><pre><code># 一个用户允许的fd连接数
cat proc/sys/epoll/max_user_watches
</code></pre><h3 id="java对于epoll的抽象"><a class="anchor" href="#java对于epoll的抽象">#</a> Java 对于 EPOLL 的抽象</h3><p>Java 中对于 EPOLL 的实现是 java.nio.channels.Selector，但是该实现并未实现像如 epoll_ctl 中所有的事件，因为 Java 要考虑到跨平台的移植性问题。</p><h4 id="单线程"><a class="anchor" href="#单线程">#</a> 单线程</h4><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketMultiplexingSingleThreadv1</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>   <span class="token keyword">private</span> <span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>   <span class="token comment">//linux 中的多路复用器（select、poll、epoll）</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   <span class="token keyword">private</span> <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>   <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">9090</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="19"></td><td><pre>     * 服务端初始化</pre></td></tr><tr><td data-num="20"></td><td><pre>     */</pre></td></tr><tr><td data-num="21"></td><td><pre>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>           server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>           <span class="token comment">// 非阻塞，NIO</span></pre></td></tr><tr><td data-num="25"></td><td><pre>           server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>           server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>           <span class="token comment">//select、poll、epoll，linux 优先选择 epoll，可以通过启动参数 - D 指定</span></pre></td></tr><tr><td data-num="29"></td><td><pre>           <span class="token comment">// 如果是在 epoll 模型下，此处相当于 epoll_create，如 epoll_create (fd4</span></pre></td></tr><tr><td data-num="30"></td><td><pre>           selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>           <span class="token comment">// 此时 server 处于 listen (fd) 状态，将 server 注册在多路复用器，并使多路复用器开启 accept 事件</span></pre></td></tr><tr><td data-num="33"></td><td><pre>           <span class="token comment">// 如果是 select、poll 模型，则在 jvm 里开辟一个数组，将接收到的客户端的 fd 放进去，如 fd3</span></pre></td></tr><tr><td data-num="34"></td><td><pre>           <span class="token comment">// 如果是 epoll 模型，相当于 epoll_ctl (fd3,ADD,fd4,EPOLL_IN)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>           server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>       <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="42"></td><td><pre>     * 启动服务</pre></td></tr><tr><td data-num="43"></td><td><pre>     */</pre></td></tr><tr><td data-num="44"></td><td><pre>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>       <span class="token function">initServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务启动了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>       <span class="token keyword">try</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>           <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>               <span class="token comment">//1、调用多路复用器</span></pre></td></tr><tr><td data-num="51"></td><td><pre>               <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"keys="</span> <span class="token operator">+</span> keys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>               <span class="token comment">// 如果是 select、poll 模型，那么 selector.select () 调用的是内核的 select (fd) 或 poll (fd)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>               <span class="token comment">// 如果是 epoll 模型，那么 selector.select ()（如果大于 0，代表有 IO 时间，则触发 IO 中断）代表触发了中断，调用的是 epoll_wait，大于 0 代表有客户端 fd 回调了事件，如读写事件</span></pre></td></tr><tr><td data-num="55"></td><td><pre>               <span class="token comment">// 本质上，是注册在多路复用器的 fd（客户端 fd）触发了回调事件，如读写事件</span></pre></td></tr><tr><td data-num="56"></td><td><pre>               <span class="token comment">// 参数：超时时间默认 500ms，如果为 0，则代表阻塞；selector.wakeup () 唤醒阻塞</span></pre></td></tr><tr><td data-num="57"></td><td><pre>               <span class="token keyword">while</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//fd 是否有事件触发</span></pre></td></tr><tr><td data-num="58"></td><td><pre>                   <span class="token comment">// 返回有状态的 fd 集合</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                   <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>                   <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>                   <span class="token comment">// 无论是哪种多路复用器，这里只能获取到 fd 的状态，程序需要自己处理 fd 的 R/W</span></pre></td></tr><tr><td data-num="62"></td><td><pre>                   <span class="token comment">//socket 的状态分为两种：一是处于 listen 状态等待客户端连接（accept），二是处于 R/W 状态</span></pre></td></tr><tr><td data-num="63"></td><td><pre>                   <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>                       <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>                       <span class="token comment">// 处理过的 fd 后就从集合移除，避免重复处理（并不是移除内核中的 fd）</span></pre></td></tr><tr><td data-num="66"></td><td><pre>                       iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>                       <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>                           <span class="token comment">// 可以 accept 一个新的 fd 连接，那么如何处理新的 fd 连接呢？</span></pre></td></tr><tr><td data-num="69"></td><td><pre>                           <span class="token comment">// 对于 select、poll 模型，由于他们在内核中没有空间，所以就将新的 fd 放在 listen 时期 jvm 开辟的数组中</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                           <span class="token comment">// 对于 epoll 模型，会由 epoll_ctl (fd3,ADD,fd4,EPOLL_IN) 将新的 fd 注册在内核开辟的红黑树空间中</span></pre></td></tr><tr><td data-num="71"></td><td><pre>                           <span class="token function">acceptHandler</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>                       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>                           <span class="token comment">// 多个 fd 可读时，该方法可能会阻塞，导致无法处理新的 fd 连接</span></pre></td></tr><tr><td data-num="74"></td><td><pre>                           <span class="token comment">// 为此，提出了 IO threads 去专注处理读写，而此处只负责将可读的 fd 交给 IO threads。</span></pre></td></tr><tr><td data-num="75"></td><td><pre>                           <span class="token comment">// 将 IO 和处理解耦，提高并发性</span></pre></td></tr><tr><td data-num="76"></td><td><pre>                           <span class="token function">readWriteHandler</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>                       <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>                   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>               <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>           <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>       <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="88"></td><td><pre>     * 新的客户端连接处理</pre></td></tr><tr><td data-num="89"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num="90"></td><td><pre>     */</pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">acceptHandler</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>            <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>            <span class="token comment">//  接收新的 fd 注册</span></pre></td></tr><tr><td data-num="95"></td><td><pre>            <span class="token class-name">SocketChannel</span> client <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>            client<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre></pre></td></tr><tr><td data-num="98"></td><td><pre>            <span class="token comment">//fd 用来在 channel 中读写的 buffer</span></pre></td></tr><tr><td data-num="99"></td><td><pre>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre></pre></td></tr><tr><td data-num="101"></td><td><pre>            <span class="token comment">// 和服务端一样，客户端也只与多路复用器打交道，在多路复用器中注册自己的 fd 状态</span></pre></td></tr><tr><td data-num="102"></td><td><pre>            <span class="token comment">// 如果是 select、poll 模型，则在 jvm 里开辟一个数组，将接收到的客户端端的 fd 放进去，如 fd3</span></pre></td></tr><tr><td data-num="103"></td><td><pre>            <span class="token comment">// 如果是 epoll 模型，相当于 epoll_ctl (fd3,ADD,fd4,EPOLL_IN)</span></pre></td></tr><tr><td data-num="104"></td><td><pre>            <span class="token comment">// 同时注册写事件</span></pre></td></tr><tr><td data-num="105"></td><td><pre>            client<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新客户端连接："</span> <span class="token operator">+</span> client<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="112"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="113"></td><td><pre></pre></td></tr><tr><td data-num="114"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="115"></td><td><pre>     * 读写客户端</pre></td></tr><tr><td data-num="116"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num="117"></td><td><pre>     */</pre></td></tr><tr><td data-num="118"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readWriteHandler</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>        <span class="token class-name">SocketChannel</span> client <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="120"></td><td><pre>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>        <span class="token keyword">int</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="123"></td><td><pre></pre></td></tr><tr><td data-num="124"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="125"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="126"></td><td><pre>                <span class="token comment">// 读</span></pre></td></tr><tr><td data-num="127"></td><td><pre>                read <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="128"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="129"></td><td><pre>                    <span class="token comment">// 反转，服务端将客户端发送的内容写回去给客户端</span></pre></td></tr><tr><td data-num="130"></td><td><pre>                    buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="131"></td><td><pre>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>                        <span class="token comment">// 写</span></pre></td></tr><tr><td data-num="133"></td><td><pre>                        client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="134"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="135"></td><td><pre>                    buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="136"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="137"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="139"></td><td><pre>                    <span class="token comment">//-1 代表客户端连接断开，此时服务端如果没有响应客户端的连接断开，那么四次挥手将不完全</span></pre></td></tr><tr><td data-num="140"></td><td><pre>                    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="141"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="142"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="143"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="144"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="145"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="146"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="147"></td><td><pre></pre></td></tr><tr><td data-num="148"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="149"></td><td><pre>        <span class="token class-name">SocketMultiplexingSingleThreadv1</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SocketMultiplexingSingleThreadv1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="150"></td><td><pre>        service<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="151"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="152"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><pre><code class="language-sh">#使用poll多路复用器
#演示客户端主动断开连接，且服务端不做处理
[root@localhost socket-test]# javac SocketMultiplexingSingleThreadv1.java &amp;&amp; strace -ff -o poll java -Djava.nio.channels.spi.SelectorProvider=sun.nio.ch.PollSelectorProvider SocketMultiplexingSingleThreadv1


[root@localhost socket-test]# nc localhost 9090
sgsfgsdg
sgsfgsdg
^C
[root@localhost socket-test]# 

[root@localhost socket-test]# netstat -natp
#由于缺少两次握手，所以客户端处于FIN_WAIT2 ，服务端处于CLOSE_WAIT 
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name  
tcp6       0      0 ::1:40288               ::1:9090                FIN_WAIT2   -                   
tcp6       0      0 ::1:9090                ::1:40288               CLOSE_WAIT  3859/java 



#使用epoll多路复用器（默认使用epoll）
#客户端断开，服务端主动处理
[root@localhost socket-test]# javac SocketMultiplexingSingleThreadv1.java &amp;&amp; strace -ff -o epoll java SocketMultiplexingSingleThreadv1
[root@localhost ~]# nc localhost 9090
sggdg
[root@localhost socket-test]# netstat -natp
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name 
tcp6       0      0 ::1:40292               ::1:9090                ESTABLISHED 5460/nc             
tcp6       0      0 ::1:9090                ::1:40292               ESTABLISHED 5441/java  
[root@localhost ~]# lsof -p 5441
COMMAND  PID USER   FD      TYPE             DEVICE SIZE/OFF     NODE NAME
java    5441 root   10u     IPv6              82376      0t0      TCP localhost:websm-&gt;localhost:40294 (ESTABLISHED)

#断开客户端连接
[root@localhost ~]# nc localhost 9090
sggdg^C
[root@localhost ~]# 
[root@localhost socket-test]# netstat -natp
#客户端断开后，由于服务端程序做了主动关闭处理，服务端处于CLOSED瞬时状态后又继续处于LISTEN状态。客户端处于TIME_WAIT 状态，2MSL后，客户端将彻底断开。在TIME_WAIT没有结束前，内核中的socket四元组资源仍然被占用，其他连接无法使用相同的四元组资源，所以TIME_WAIT会消耗四元组规则。
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name 
tcp6       0      0 :::9090                 :::*                    LISTEN      5441/java                 
tcp6       0      0 ::1:40292               ::1:9090                TIME_WAIT   - 


[root@localhost ~]# sysctl -a | grep reuse
net.ipv4.tcp_tw_reuse = 2 #将该值设置为1可以快速重复使用已经断开连接的客户端端口

</code></pre><p>以上通过 strace 追踪执行过程的日志中可以对应到 java 代码</p><pre><code class="language-sh">OS:POLL  jdk  用户空间保存了fd
socket(PF_INET, SOCK_STREAM, IPPROTO_IP) = 4 #server = ServerSocketChannel.open();服务端socket获得文件描述符fd4
fcntl(4, F_SETFL, O_RDWR|O_NONBLOCK) = 0  #server.configureBlocking(false);设置服务端accept为非阻塞
bind(4, &#123;sa_family=AF_INET, sin_port=htons(9090) #将9090端口绑定到fd4
listen(4, 50)
poll([&#123;fd=5, events=POLLIN&#125;, &#123;fd=4, events=POLLIN&#125;], 2, -1) = 1 #server.register(selector, SelectionKey.OP_ACCEPT);此处发生了系统调用poll；将服务端的文件描述符fd4放在jvm开辟的数组（fd5）中
accept(4,    = 7  #SocketChannel client = ssc.accept();接收新的客户端fd7
fcntl(7, F_SETFL, O_RDWR|O_NONBLOCK) #client.configureBlocking(false);设置接收客户端消息recv为非阻塞
poll([&#123;fd=5, events=POLLIN&#125;, &#123;fd=4, events=POLLIN&#125;, &#123;fd=7, events=POLLIN&#125;], 3, -1)  = 1 #client.register(selector, SelectionKey.OP_ACCEPT);将新连接的fd继续放在jvm开辟的数组中
#while (selector.select() &gt; 0);也会触发系统调用poll，因为其触发了系统调用poll中的事件（读写、添加、删除）
</code></pre><pre><code class="language-sh">OS:EPOLL 内核开辟空间，保存fd
socket(PF_INET, SOCK_STREAM, IPPROTO_IP) = 4
fcntl(4, F_SETFL, O_RDWR|O_NONBLOCK)    = 0
bind(4, &#123;sa_family=AF_INET, sin_port=htons(9090)
listen(4, 50)

epoll_create(256) = 7 #selector = Selector.open();epoll开辟内核空间，对应的文件描述符为fd7
epoll_ctl(7, EPOLL_CTL_ADD, 4) #server.register(selector, SelectionKey.OP_ACCEPT);将服务端的文件描述符fd4添加到epoll开辟的内核空间fd7
epoll_wait(7, &#123;&#123;EPOLLIN, &#123;u32=4, u64=2216749036554158084&#125;&#125;&#125;, 4096, -1) = 1 # while (selector.select() &gt; 0) 
accept(4  =8 #新连接的client的fd8
fcntl(8, F_SETFL, O_RDWR|O_NONBLOCK)#client.configureBlocking(false);设置接收客户端消息recv为非阻塞
epoll_ctl(7, EPOLL_CTL_ADD, 8, &#123;EPOLLIN, #client.register(selector, SelectionKey.OP_ACCEPT);将新连接的fd8添加到epoll开辟的内核空间fd7
epoll_wait(7, &#123;&#123;EPOLLIN,&#123;u32=8,u64=2302962838504734728&#125;&#125;&#125;,4096,-1)=1 # while (selector.select() &gt; 0);客户端fd8有数据进来，服务端产生中断去调用相应的read事件读取数据，读取完之后再回到中断现场从内核空间拿出中断时迁移（红黑树-&gt;链表）的服务端的fd，继续等到客户端连接
</code></pre><p>单独注册写事件</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SelectionKey</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">Selector</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SocketChannel</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketMultiplexingSingleThreadv1_1</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment">//linux 多路复用器（select poll epoll）</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">9090</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  select  poll  *epoll</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token function">initServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器启动了。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">//                Set&lt;SelectionKey> keys = selector.keys();</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">//                System.out.println(keys.size()+"   size");</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token comment">// 由于读事件时注册了写事件，那么第二次循环进来时会发现 selector 中写事件返回大于 0，所以可以执行 writeHandler (key);</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token keyword">while</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> iter <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>                        <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>                        iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                            <span class="token function">acceptHandler</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                            <span class="token function">readHandler</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 处理了 read 事件并注册这个 key 的 write 事件</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>                            <span class="token comment">// 写事件，send-queue 只要是空的（有空间），就一定会给你返回可以写的事件，就会重复调起以下的 writeHandler (key);</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                            <span class="token comment">// 什么时候写？多路复用器能不能写是参考 send-queue 有没有空间</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                            <span class="token comment">//1，准备好要写什么</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                            <span class="token comment">//2，关心 send-queue 是否有空间</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                            <span class="token comment">//3，所以，读 read 客户端一开始就要注册，但是 write 依赖以上关系，什么时候用什么时候注册</span></pre></td></tr><tr><td data-num="55"></td><td><pre>                            <span class="token comment">//4，如果一开始就注册了 write 的事件，进入死循环，一直调起！！！</span></pre></td></tr><tr><td data-num="56"></td><td><pre>                            <span class="token function">writeHandler</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="67"></td><td><pre>     * 服务端写处理</pre></td></tr><tr><td data-num="68"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num="69"></td><td><pre>     */</pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeHandler</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"write handler..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            <span class="token class-name">SocketChannel</span> client <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>            buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>                    client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>            buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>            key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="95"></td><td><pre></pre></td></tr><tr><td data-num="96"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acceptHandler</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>            <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>            <span class="token class-name">SocketChannel</span> client <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>            client<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>            client<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新客户端："</span> <span class="token operator">+</span> client<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre></pre></td></tr><tr><td data-num="107"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="111"></td><td><pre></pre></td></tr><tr><td data-num="112"></td><td><pre>    <span class="token comment">/**</span></pre></td></tr><tr><td data-num="113"></td><td><pre>     * 服务端读处理</pre></td></tr><tr><td data-num="114"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num="115"></td><td><pre>     */</pre></td></tr><tr><td data-num="116"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readHandler</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read handler....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="118"></td><td><pre>            <span class="token class-name">SocketChannel</span> client <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="120"></td><td><pre>            buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>            <span class="token keyword">int</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="123"></td><td><pre>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>                    read <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="125"></td><td><pre>                    <span class="token comment">// 如果客户端可读，那么客户端才注册写事件到多路复用器</span></pre></td></tr><tr><td data-num="126"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="127"></td><td><pre>                        <span class="token comment">// 注册写事件，可以在 while (selector.select () > 0) 中读到</span></pre></td></tr><tr><td data-num="128"></td><td><pre>                        <span class="token comment">//OP_WRITE 关心 send-queue 是不是有空间，只要有空间就可以触发 OP_WRITE 写事件</span></pre></td></tr><tr><td data-num="129"></td><td><pre>                        client<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="130"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="131"></td><td><pre>                        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="133"></td><td><pre>                        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="134"></td><td><pre>                        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="135"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="136"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="137"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="139"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="140"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="141"></td><td><pre></pre></td></tr><tr><td data-num="142"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="143"></td><td><pre>        <span class="token class-name">SocketMultiplexingSingleThreadv1_1</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SocketMultiplexingSingleThreadv1_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="144"></td><td><pre>        service<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="145"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="146"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h4 id="多线程"><a class="anchor" href="#多线程">#</a> 多线程</h4><p>以上单线程对于读写的 fd 是一个接一个线性处理的，只要有一个 fd 处理的较慢，那么就会影响到其他 fd 的处理。为此，可以将读写事件各自放在单独的线程去处理</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SelectionKey</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">Selector</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SocketChannel</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketMultiplexingSingleThreadv2</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment">//linux 多路复用器（select poll epoll） nginx  event &#123;&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">9090</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  select  poll  *epoll</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token function">initServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器启动了。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">//                Set&lt;SelectionKey> keys = selector.keys();</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">//                System.out.println(keys.size()+"   size");</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token comment">// 注册在多路复用器的 fd（客户端 fd）触发了回调事件，如读写事件</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token keyword">while</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> iter <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>                        <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>                        iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                            <span class="token function">acceptHandler</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                            key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先在多路复用器里把 key  cancel 了（在内核中将 fd 剔除，而在操作系统中仍然存在）</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                            <span class="token function">readHandler</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 没有把 key cancel 之前，即便已抛出了线程去读取，但是在时差里，这个 key 的 read 事件会被重复触发</span></pre></td></tr><tr><td data-num="50"></td><td><pre>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                            key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 没有把 key cancel 之前，即便 y 抛出了线程去读取，但是在时差里，这个 key 的 write 事件会被重复触发</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                            <span class="token function">writeHandler</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeHandler</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"write handler..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>            <span class="token class-name">SocketChannel</span> client <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>            buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                    client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>            buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>                client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="89"></td><td><pre></pre></td></tr><tr><td data-num="90"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acceptHandler</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>            <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>            <span class="token class-name">SocketChannel</span> client <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>            client<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>            client<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新客户端："</span> <span class="token operator">+</span> client<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre></pre></td></tr><tr><td data-num="101"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="105"></td><td><pre></pre></td></tr><tr><td data-num="106"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readHandler</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read handler....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>            <span class="token class-name">SocketChannel</span> client <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>            buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre>            <span class="token keyword">int</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>                    read <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="118"></td><td><pre>                        client<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="120"></td><td><pre>                        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>                        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="123"></td><td><pre>                        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="125"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="126"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="127"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="128"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="129"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="130"></td><td><pre></pre></td></tr><tr><td data-num="131"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="132"></td><td><pre></pre></td></tr><tr><td data-num="133"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="134"></td><td><pre>        <span class="token class-name">SocketMultiplexingSingleThreadv2</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SocketMultiplexingSingleThreadv2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="135"></td><td><pre>        service<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="136"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="137"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>以上程序虽然读写的 fd 不再阻塞，但是频繁调用 key.cancel () 意味着频繁调用 epoll/poll 的 DEL 事件（如果是 epoll，则调用 epoll (fd,DEL,fd)），也就意味着程序和内核之间频繁的进行用户态与内核态之间的转换，性能不是很高。</p><p>无论是以上单线程还是多线程的代码，本质上就是不断去轮询多路复用器中的 fd 是否有可读可写的状态（读：内核可以判断客户端是否有消息到达，如果有那么对应的 fd 就是可读状态；写：只要内核中的 send_queue 队列为空就可以往里写，即 fd 是可写状态），如果有则进一步回调 fd 的回调事件（触发回调事件后可以自定义处理触发后的动作，如对读写的处理），只不过多线程是并行去处理回调事件被触发后的操作（如读写操作）。</p><p>当有 N 个 fd 需要 R/W 处理时，可以将 N 个 fd 分组，每一组 fd 使用一个 selector，且一个 selector 单独占用一个线程，所以 selector 个数取决于线程个数（最佳线程个数是 cpu 核数或 cpu 核数 * 2）。这样每个 selector 中的 fd 是线性处理的，而多个 selector 是并行处理的，所以总体上 fd 是被并行处理的，此时就不需要再频繁调用 key.cancel () 来清理内核中的 fd，避免了内核态与用户态之间的频繁切换，大大的提高了性能，当然也可以单独拿出其中的一个 selector 专门负责接收客户端的 accept，并将接收到的 fd 分配给其他的 selector，以上做法采用了分而治之的思想。</p><p><strong>代码实现</strong></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>reactor</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="4"></td><td><pre> * @Description</pre></td></tr><tr><td data-num="5"></td><td><pre> * @Author fan</pre></td></tr><tr><td data-num="6"></td><td><pre> * @Date 2021-08-23 10:39</pre></td></tr><tr><td data-num="7"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num="8"></td><td><pre> **/</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainThread</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token comment">// 不参与 IO 和业务</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token comment">//1、创建 IO Thread (一个或多个)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token comment">//server 线程组</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token class-name">SelectorThreadGroup</span> boss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectorThreadGroup</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment">//client 线程组</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token class-name">SelectorThreadGroup</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectorThreadGroup</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token comment">// 混杂模式，其中一个线程既负责 accept，又负责 R/W</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">//        SelectorThreadGroup stg = new SelectorThreadGroup(3);</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token comment">// 使得 server 线程组 boss 持有 client 线程组 worker 的引用</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        boss<span class="token punctuation">.</span><span class="token function">setWorker</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token comment">//2、将监听的 server 注册到某一个 selector，以便和客户端交互</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token comment">//boss 中选一个线程注册 listen 后，这个被选中的线程需要持有 worker 的引用，因为该线程一旦 accept 得到</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token comment">//client 后，需要去 worker 中获取一个线程分配给 client</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        boss<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        boss<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        boss<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        boss<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>reactor</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="9"></td><td><pre> * @Description</pre></td></tr><tr><td data-num="10"></td><td><pre> * @Author fan</pre></td></tr><tr><td data-num="11"></td><td><pre> * @Date 2021-08-23 11:27</pre></td></tr><tr><td data-num="12"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num="13"></td><td><pre> **/</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectorThreadGroup</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token class-name">SelectorThread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sts<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token class-name">AtomicInteger</span> xid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token class-name">SelectorThreadGroup</span> stg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWorker</span><span class="token punctuation">(</span><span class="token class-name">SelectorThreadGroup</span> stg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>stg <span class="token operator">=</span> stg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token class-name">SelectorThreadGroup</span> <span class="token punctuation">(</span><span class="token keyword">int</span> threadNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        sts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectorThread</span><span class="token punctuation">[</span>threadNum<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            sts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectorThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token comment">// 将 server 注册到哪个 selector？</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token function">nextSelectorV3</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextSelector</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token class-name">SelectorThread</span> st <span class="token operator">=</span> <span class="token function">getSelectorThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token comment">// 1、通过队列传递数据 消息</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        st<span class="token punctuation">.</span>lbq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token comment">// 2、打断 SelectorThread 中的 selector.select () 阻塞，让对应的线程在唤醒 selector 后取出队列中的 server 或 client 完成在 selector 中的注册</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        st<span class="token punctuation">.</span>selector<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token comment">//        //c 可能是 server 或 client</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token comment">//        ServerSocketChannel s = (ServerSocketChannel) c;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment">//        try &#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token comment">//            // 由于 SelectorThread 中的 selector.select (); 是阻塞的，所以以下的 register 中的 selector 是阻塞的，可以使用 wakeup 唤醒阻塞</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment">//            s.register(st.selector, SelectionKey.OP_ACCEPT);</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token comment">//            st.selector.wakeup();</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token comment">//        &#125; catch (ClosedChannelException e) &#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token comment">//            e.printStackTrace();</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token comment">//        &#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextSelectorV3</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>                <span class="token comment">// 将 server 注册在当前线程组 (boss 线程组) 中的一个线程中</span></pre></td></tr><tr><td data-num="67"></td><td><pre>                <span class="token class-name">SelectorThread</span> st <span class="token operator">=</span> <span class="token function">getSelectorThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>                <span class="token comment">// 1、通过队列传递数据 消息</span></pre></td></tr><tr><td data-num="69"></td><td><pre>                st<span class="token punctuation">.</span>lbq<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                <span class="token comment">//server 线程开启后， 更新该线程的线程组</span></pre></td></tr><tr><td data-num="71"></td><td><pre>                st<span class="token punctuation">.</span><span class="token function">setWorker</span><span class="token punctuation">(</span>stg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>                <span class="token comment">// 2、打断 SelectorThread 中的 selector.select () 阻塞，让对应的线程在唤醒 selector 后取出队列中的 server 或 client 完成在 selector 中的注册</span></pre></td></tr><tr><td data-num="73"></td><td><pre>                st<span class="token punctuation">.</span>selector<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>                <span class="token comment">// 将 client 注册在 worker 线程组中的线程</span></pre></td></tr><tr><td data-num="80"></td><td><pre>                <span class="token class-name">SelectorThread</span> st <span class="token operator">=</span> <span class="token function">getSelectorThreadV3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>                <span class="token comment">// 1、通过队列传递数据 消息</span></pre></td></tr><tr><td data-num="82"></td><td><pre>                st<span class="token punctuation">.</span>lbq<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>                <span class="token comment">// 2、打断 SelectorThread 中的 selector.select () 阻塞，让对应的线程在唤醒 selector 后取出队列中的 server 或 client 完成在 selector 中的注册</span></pre></td></tr><tr><td data-num="84"></td><td><pre>                st<span class="token punctuation">.</span>selector<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="90"></td><td><pre></pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token comment">//server 、client 都需要选择一个 selector</span></pre></td></tr><tr><td data-num="92"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">SelectorThread</span> <span class="token function">getSelectorThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>        <span class="token comment">// 取出一个 selector，每次新的 server、client 来都会轮询分配到不同的 selector</span></pre></td></tr><tr><td data-num="94"></td><td><pre>        <span class="token keyword">int</span> index <span class="token operator">=</span> xid<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> sts<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>        <span class="token keyword">return</span> sts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="97"></td><td><pre></pre></td></tr><tr><td data-num="98"></td><td><pre>    <span class="token comment">//worker 线程组中线程</span></pre></td></tr><tr><td data-num="99"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">SelectorThread</span> <span class="token function">getSelectorThreadV3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>        <span class="token comment">// 取出一个 selector，每次新的 server、client 来都会轮询分配到不同的 selector</span></pre></td></tr><tr><td data-num="101"></td><td><pre>        <span class="token keyword">int</span> index <span class="token operator">=</span> xid<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> stg<span class="token punctuation">.</span>sts<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>        <span class="token keyword">return</span> stg<span class="token punctuation">.</span>sts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>reactor</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">LinkedBlockingDeque</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="12"></td><td><pre> * @Description</pre></td></tr><tr><td data-num="13"></td><td><pre> * @Author fan</pre></td></tr><tr><td data-num="14"></td><td><pre> * @Date 2021-08-23 10:40</pre></td></tr><tr><td data-num="15"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num="16"></td><td><pre> **/</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectorThread</span> <span class="token keyword">extends</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">// 每个线程对应一个 selector</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// 每个客户端只绑定到其中一个 selector</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">//    LinkedBlockingQueue&lt;Channel> lbq = new LinkedBlockingQueue&lt;>();</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">></span></span> lbq <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token class-name">SelectorThreadGroup</span> stg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">protected</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">></span></span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token class-name">SelectorThread</span><span class="token punctuation">(</span><span class="token class-name">SelectorThreadGroup</span> stg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>stg <span class="token operator">=</span> stg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>                <span class="token comment">// 1、select ();select 没有设置超时时间会阻塞，直到有文件描述符注册在多路复用器</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">//                System.out.println(Thread.currentThread().getName() + " : before select..." + selector.keys().size());</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                <span class="token keyword">int</span> select <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment">//                Thread.sleep (1000); // 非正确的解决方案</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token comment">//                System.out.println(Thread.currentThread().getName() + " : after select..." + selector.keys().size());</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>                <span class="token comment">// 2、处理 selectkeys ();</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>select <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                    <span class="token comment">// 有事件</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> iter <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>                        <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>                        iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                            <span class="token comment">// 接收客户端，要注册在哪里？如何注册？</span></pre></td></tr><tr><td data-num="60"></td><td><pre>                            <span class="token function">acceptHandler</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>                            <span class="token function">readHandler</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>                <span class="token comment">//3、处理一些 task</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lbq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>                    <span class="token comment">// 队列是堆里的对象，堆是共享的，只有方法的逻辑、本地变量是线程隔离的，线程的栈是独立的</span></pre></td></tr><tr><td data-num="72"></td><td><pre>                    <span class="token class-name">Channel</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>                        c <span class="token operator">=</span> lbq<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"queue"</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>                        <span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>                        server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" register listen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>                        <span class="token class-name">SocketChannel</span> client <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>                        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>                        <span class="token comment">// 将 client 注册到 selector，并将 buffer 绑定到 selector</span></pre></td></tr><tr><td data-num="87"></td><td><pre>                        client<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" register client "</span> <span class="token operator">+</span> client<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="96"></td><td><pre></pre></td></tr><tr><td data-num="97"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readHandler</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : readHandler..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>        <span class="token class-name">SocketChannel</span> client <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>                <span class="token keyword">int</span> read <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="106"></td><td><pre>                    <span class="token comment">// 将读到的内容翻转，然后直接写出</span></pre></td></tr><tr><td data-num="107"></td><td><pre>                    buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>                        client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>                    buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>                    <span class="token comment">// 客户端断开了</span></pre></td></tr><tr><td data-num="116"></td><td><pre>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client："</span> <span class="token operator">+</span> client<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" closed..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>                    <span class="token comment">// 从多路复用器中将 fd 移除</span></pre></td></tr><tr><td data-num="118"></td><td><pre>                    key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="120"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="123"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="125"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="126"></td><td><pre></pre></td></tr><tr><td data-num="127"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">acceptHandler</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="128"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : acceptHandler..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="129"></td><td><pre>        <span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="130"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="131"></td><td><pre>            <span class="token class-name">SocketChannel</span> client <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>            client<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="133"></td><td><pre></pre></td></tr><tr><td data-num="134"></td><td><pre>            <span class="token comment">// 将连接的客户端注册到多路复用器中去处理</span></pre></td></tr><tr><td data-num="135"></td><td><pre><span class="token comment">//            stg.nextSelector(client);</span></pre></td></tr><tr><td data-num="136"></td><td><pre>            stg<span class="token punctuation">.</span><span class="token function">nextSelectorV3</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="137"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="139"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="140"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="141"></td><td><pre></pre></td></tr><tr><td data-num="142"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWorker</span><span class="token punctuation">(</span><span class="token class-name">SelectorThreadGroup</span> stgWorker<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="143"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>stg <span class="token operator">=</span> stgWorker<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="144"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="145"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="三次握手四次挥手"><a class="anchor" href="#三次握手四次挥手">#</a> 三次握手四次挥手</h3><p>以上的状态是四次挥手过程中的状态：</p><p>1、客户端向服务端发送 FIN 想要断开连接，客户端处于 FIN WAIT1 状态，此时服务端处于 CLOSE_WAIT1 状态</p><p>2、服务端向客户端回复第一条消息 FIN_ACK，请稍等（服务端要确认把业务数据全部传完给客户端），此时客户端处于 FIN WAIT2</p><p>3、服务端向客户端回复第二条消息 FIN，服务端已做好断开准备（确保业务数据已经发送完毕），服务端处于 LAST_ACK 状态</p><p>4、客户端向服务端回复消息 ACK，客户端进入 TIME_WAIT 状态，等待 2MSL（报文活动时长的 2 倍，一般为 30s），确保 ACK 到达服务端，如果在 2MSL 后，服务端没有响应，那么就证明服务端收到了客户端的 ACK，且服务端关闭了，服务端进入瞬时状态 CLOSED 后又继续处于 LISTEN 状态。如果 2MSL 内，服务端没有收到客户端的 ACK，那么服务端会再次发送 FIN 给客户端，告诉客户端服务端已做好断开准备。</p><p>此外，服务端也可以主动发起断开请求，那么在四次挥手的最后一步，服务端也会进入 2MSL 的等待状态，确保客户端收到自己的消息后才可以最终关闭连接。</p><p>以下概念参考自 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmotbXItbGkvcC8xMTEwNjM5MC5odG1s">https://www.cnblogs.com/bj-mr-li/p/11106390.html</span></p><table><thead><tr><th>标志位</th><th>全拼写</th><th>释义</th></tr></thead><tbody><tr><td>SYN</td><td>synchronous</td><td>请求建立连接</td></tr><tr><td>ACK</td><td>acknowledgement</td><td>判定确认号 ack 是否有效，ACK=1 时有效</td></tr><tr><td>FIN</td><td>finish</td><td>FIN=1 时表示发送方数据已经发送完毕，请求断开连接</td></tr><tr><td>PSH</td><td>push</td><td>提示接收方立即从缓冲区把数据读走</td></tr><tr><td>RST</td><td>reset</td><td>对方要求重新建立连接</td></tr><tr><td>URG</td><td>urgent</td><td>紧急指针。URG=1 时，表示数据要被优先处理</td></tr></tbody></table><p>标志位的值为 1 或为 0，ack、seq 表示数据的序号，且 ack=seq+1。</p><p>序列号 seq：占 4 个字节，用来标记数据段的顺序，TCP 把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号 seq 就是这个报文段中的第一个字节的数据编号。</p><p>确认号 ack：占 4 个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号 + 1 即为确认号。</p><p>确认 ACK：占 1 位，仅当 ACK=1 时，确认号字段才有效。ACK=0 时，确认号无效。</p><p>同步 SYN：连接建立时用于同步序号。当 SYN=1，ACK=0 时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得 SYN=1，ACK=1。因此，SYN=1 表示这是一个连接请求，或连接接受报文。SYN 这个标志位只有在 TCP 建产连接时才会被置 1，握手完成后 SYN 标志位被置 0。</p><p>终止 FIN：用来释放一个连接。FIN=1 表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接。</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210818161102760.png" alt="image-20210818161102760"></p><p>&lt;img src=&quot;<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vYmZhbmZhbmZhbi9pbWcvcmF3L21hc3Rlci9kb2NzaWZ5LyVFNCVCOCU4OSVFNiVBQyVBMSVFNiU4RiVBMSVFNiU4OSU4QiVFNSU5QiU5QiVFNiVBQyVBMSVFNiU4QyVBNSVFNiU4OSU4QiUyMCgxKS5wbmc=">https://gitee.com/bfanfanfan/img/raw/master/docsify/ 三次握手四次挥手 (1).png</span>&quot; style=&quot;zoom:50%;&quot; /&gt;</p><p>以下概念参考自 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOUIlOUIlRTYlQUMlQTElRTYlOEMlQTUlRTYlODklOEIvNzc5NDI4Nz9mcj1hbGFkZGlu">https://baike.baidu.com/item/ 四次挥手 / 7794287?fr=aladdin</span></p><p>连接终止协议（四次挥手）</p><p>由于 TCP 连接是全双工的，因此每个方向都必须单独进行关闭。这原则是当一方完成它的数据发送任务后就能发送一个 FIN 来终止这个方向的连接。收到一个 FIN 只意味着这一方向上没有数据流动，一个 TCP 连接在收到一个 FIN 后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</p><p>（1） TCP 客户端发送一个 FIN，用来关闭客户到服务器的<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTYlOEQlQUUlRTQlQkMlQTAlRTklODAlODE=">数据传送</span>。</p><p>（2） 服务器收到这个 FIN，它发回一个 ACK，确认序号为收到的序号加 1。和 SYN 一样，一个 FIN 将占用一个序号。</p><p>（3） 服务器关闭客户端的连接，发送一个 FIN 给客户端。</p><p>（4） 客户端发回 ACK<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOEElQTUlRTYlOTYlODc="> 报文</span>确认，并将确认序号设置为收到序号加 1。</p><p><strong>CLOSED</strong></p><p>表示初始状态。</p><p><strong>LISTEN</strong></p><p>这个也是非常容易理解的一个状态，表示服务器端的某个 SOCKET 处于<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOUIlOTElRTUlOTAlQUMlRTclOEElQjYlRTYlODAlODE=">监听状态</span>，可以接受连接了。</p><p><strong>SYN_RCVD</strong></p><p>这个状态表示接受到了 SYN<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOEElQTUlRTYlOTYlODc="> 报文</span>，在正常情况下，这个状态是服务器端的 SOCKET 在建立 TCP 连接时的<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglODklRTYlQUMlQTElRTYlOEYlQTElRTYlODklOEI=">三次握手</span>会话过程中的一个中间状态，很短暂，基本上用 netstat 你是很难看到这种状态的，除非你特意写了一个客户端<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQjUlOEIlRTglQUYlOTUlRTclQTglOEIlRTUlQkElOEY=">测试程序</span>，故意将三次 TCP 握手过程中最后一个 ACK 报文不予发送。因此这种状态时，当收到客户端的 ACK 报文后，它会进入到 ESTABLISHED 状态。</p><p><strong>SYN_SENT</strong></p><p>这个状态与 SYN_RCVD 遥相呼应，当客户端 SOCKET 执行 CONNECT 连接时，它首先发送 SYN<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOEElQTUlRTYlOTYlODc="> 报文</span>，因此也随即它会进入到了 SYN_SENT 状态，并等待服务端的发送<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglODklRTYlQUMlQTElRTYlOEYlQTElRTYlODklOEI=">三次握手</span>中的第 2 个报文。SYN_SENT 状态表示客户端已发送 SYN 报文。</p><p><strong>ESTABLISHED</strong></p><p>表示连接已经建立了。</p><p><strong>FIN_WAIT_1</strong></p><p>这个状态要好好解释一下，其实 FIN_WAIT_1 和 FIN_WAIT_2 状态的真正含义都是表示等待对方的 FIN<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOEElQTUlRTYlOTYlODc="> 报文</span>。而这两种状态的区别是：FIN_WAIT_1 状态实际上是当 SOCKET 在 ESTABLISHED 状态时，它想主动关闭连接，向对方发送了 FIN 报文，此时该 SOCKET 即进入到 FIN_WAIT_1 状态。而当对方回应 ACK 报文后，则进入到 FIN_WAIT_2 状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应 ACK 报文，所以 FIN_WAIT_1 状态一般是比较难见到的，而 FIN_WAIT_2 状态还有时常常可以用 netstat 看到。</p><p><strong>FIN_WAIT_2</strong></p><p>上面已经详细解释了这种状态，实际上 FIN_WAIT_2 状态下的 SOCKET，表示半连接，也即有一方要求 close 连接，但另外还告诉对方，我暂时还有点数据需要传送给你，稍后再关闭连接。</p><p><strong>TIME_WAIT</strong></p><p>表示收到了对方的 FIN<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOEElQTUlRTYlOTYlODc="> 报文</span>，并发送出了 ACK 报文，就等 2MSL 后即可回到 CLOSED 可用状态了。如果 FIN_WAIT_1 状态下，收到了对方同时带 FIN 标志和 ACK 标志的报文时，可以直接进入到 TIME_WAIT 状态，而无须经过 FIN_WAIT_2 状态。</p><p><strong>CLOSING</strong></p><p>这种状态比较特殊，实际情况中应该是很少见，属于一种比较罕见的例外状态。正常情况下，当你发送 FIN<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOEElQTUlRTYlOTYlODc="> 报文</span>后，按理来说是应该先收到（或同时收到）对方的 ACK 报文，再收到对方的 FIN 报文。但是 CLOSING 状态表示你发送 FIN 报文后，并没有收到对方的 ACK 报文，反而却收到了对方的 FIN 报文。什么情况下会出现此种情况呢？其实细想一下，也不难得出结论：那就是如果双方几乎在同时 close 一个 SOCKET 的话，那么就出现了双方同时发送 FIN 报文的情况，也就会出现 CLOSING 状态，表示双方都正在关闭 SOCKET 连接。</p><p><strong>CLOSE_WAIT</strong></p><p>这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方 close 一个 SOCKET 后发送 FIN<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOEElQTUlRTYlOTYlODc="> 报文</span>给自己，你系统毫无疑问地会回应一个 ACK 报文给对方，此时则进入到 CLOSE_WAIT 状态。接下来呢，实际上你真正需要考虑的事情是查看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close 这个 SOCKET，发送 FIN 报文给对方，也即关闭连接。所以你在 CLOSE_WAIT 状态下，需要完成的事情是等待你去关闭连接。</p><p><strong>LAST_ACK</strong></p><p>这个状态还是比较容易好理解的，它是被动关闭一方在发送 FIN<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOEElQTUlRTYlOTYlODc="> 报文</span>后，最后等待对方的 ACK 报文。当收到 ACK 报文后，也即可以进入到 CLOSED 可用状态了。</p><h2 id="长连接-短链接-长轮询-短轮询"><a class="anchor" href="#长连接-短链接-长轮询-短轮询">#</a> 长连接、短链接、长轮询、短轮询</h2><p>长连接：长连接与短连接指的是 TCP 连接，具体实现是在 HTTP 中，HTTP1.1 默认是长连接，即 Connection 的值为 keep-alive。长连接的好处是多个客户端请求（多个 HTTP 请求）可以复用同一个 TCP 连接，再次有 HTTP 请求就不会重复进行三次握手，节省了网络资源、提高了请求资源的响应速度。长连接并不是永久的连接，如果在指定超时时间内没有 HTTP 请求，那么连接会被断开进入<strong> TIME_WAIT</strong> 状态。超时时间在服务端中可以在 header 中设置。</p><p>短连接：适用于 HTTP 请求不频繁的场景，无论请求是否有结果都会自动断开连接。</p><p>长轮询、短轮询：场轮询与短轮询是通过服务端的变成来控制的。长轮询是指客户端去服务端请求数据，如果服务端没有数据那么就会阻塞等待直到有客户端需要的数据返回给客户端后断开。短轮询是指客户端去服务端请求数据，无论请求是否有结果都将立即返回。</p><div class="tags"><a href="/tags/Java/" rel="tag"><i class="ic i-tag"></i> Java</a> <a href="/tags/NIO/" rel="tag"><i class="ic i-tag"></i> NIO</a> <a href="/tags/IO/" rel="tag"><i class="ic i-tag"></i> IO</a> <a href="/tags/socket/" rel="tag"><i class="ic i-tag"></i> socket</a> <a href="/tags/BIO/" rel="tag"><i class="ic i-tag"></i> BIO</a></div></div><footer><div class="meta"><span class="item"><span class="icon"><i class="ic i-calendar-check"></i> </span><span class="text">更新于</span> <time title="修改时间：2021-12-24 10:51:59" itemprop="dateModified" datetime="2021-12-24T10:51:59+08:00">2021-12-24</time> </span><span id="/网络IO模型" class="item leancloud_visitors" data-flag-title="网络IO模型" title="阅读次数"><span class="icon"><i class="ic i-eye"></i> </span><span class="text">阅读次数</span> <span class="leancloud-visitors-count"></span> <span class="text">次</span></span></div><div class="reward"><button><i class="ic i-heartbeat"></i> 赞赏</button><p>请我喝[茶]~(￣▽￣)~*</p><div id="qr"><div><img data-src="/images/wechatpay.png" alt="fanfanfan 微信支付"><p>微信支付</p></div><div><img data-src="/images/alipay.png" alt="fanfanfan 支付宝"><p>支付宝</p></div><div><img data-src="/images/paypal.png" alt="fanfanfan PayPal"><p>PayPal</p></div></div></div><div id="copyright"><ul><li class="author"><strong>本文作者： </strong>fanfanfan <i class="ic i-at"><em>@</em></i></li><li class="link"><strong>本文链接：</strong> <a href="https://baiyezi.vip/%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B" title="网络IO模型">https://baiyezi.vip/网络IO模型</a></li><li class="license"><strong>版权声明： </strong>本站所有文章除特别声明外，均采用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC9kZWVkLnpo"><i class="ic i-creative-commons"><em>(CC)</em></i>BY-NC-SA</span> 许可协议。转载请注明出处！</li></ul></div></footer></article></div><div class="post-nav"><div class="item left"><a href="/Kafka-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84" itemprop="url" rel="prev" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;bfanfanfan&#x2F;img&#x2F;raw&#x2F;master&#x2F;guzhuang&#x2F;20211225105423.jpg" title="Kafka-整体架构"><span class="type">上一篇</span> <span class="category"><i class="ic i-flag"></i> Java</span><h3>Kafka-整体架构</h3></a></div><div class="item right"><a href="/Kafka-%E6%90%AD%E5%BB%BA" itemprop="url" rel="next" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;bfanfanfan&#x2F;img&#x2F;raw&#x2F;master&#x2F;guzhuang&#x2F;20211225105422.jpg" title="Kafka-搭建"><span class="type">下一篇</span> <span class="category"><i class="ic i-flag"></i> Java</span><h3>Kafka-搭建</h3></a></div></div><div class="wrap" id="comments"></div></div><div id="sidebar"><div class="inner"><div class="panels"><div class="inner"><div class="contents panel pjax" data-title="文章目录"><ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#bio"><span class="toc-number">1.</span> <span class="toc-text">BIO</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#tcp%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%82%E6%95%B0"><span class="toc-number">1.1.</span> <span class="toc-text">TCP 的一些参数</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#socket"><span class="toc-number">1.2.</span> <span class="toc-text">Socket</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#socket%E5%BA%95%E5%B1%82%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E6%9F%A5%E7%9C%8B"><span class="toc-number">1.3.</span> <span class="toc-text">socket 底层调用函数查看</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#c10k%E9%97%AE%E9%A2%98"><span class="toc-number">1.4.</span> <span class="toc-text">c10k 问题</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#nio"><span class="toc-number">2.</span> <span class="toc-text">NIO</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E5%99%A8"><span class="toc-number">2.1.</span> <span class="toc-text">单线程的多路复用器</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#selectpoll"><span class="toc-number">2.2.</span> <span class="toc-text">SELECT&#x2F;POLL</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E7%A8%8B%E5%BA%8F%E8%B0%83%E7%94%A8%E5%86%85%E6%A0%B8%E8%BF%87%E7%A8%8B"><span class="toc-number">2.2.1.</span> <span class="toc-text">程序调用内核过程</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#epoll"><span class="toc-number">2.3.</span> <span class="toc-text">EPOLL</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#epoll%E7%BB%84%E6%88%90"><span class="toc-number">2.3.1.</span> <span class="toc-text">EPOLL 组成</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#java%E5%AF%B9%E4%BA%8Eepoll%E7%9A%84%E6%8A%BD%E8%B1%A1"><span class="toc-number">2.4.</span> <span class="toc-text">Java 对于 EPOLL 的抽象</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%8D%95%E7%BA%BF%E7%A8%8B"><span class="toc-number">2.4.1.</span> <span class="toc-text">单线程</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%A4%9A%E7%BA%BF%E7%A8%8B"><span class="toc-number">2.4.2.</span> <span class="toc-text">多线程</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B"><span class="toc-number">2.5.</span> <span class="toc-text">三次握手四次挥手</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E9%95%BF%E8%BF%9E%E6%8E%A5-%E7%9F%AD%E9%93%BE%E6%8E%A5-%E9%95%BF%E8%BD%AE%E8%AF%A2-%E7%9F%AD%E8%BD%AE%E8%AF%A2"><span class="toc-number">3.</span> <span class="toc-text">长连接、短链接、长轮询、短轮询</span></a></li></ol></div><div class="related panel pjax" data-title="系列文章"><ul><li><a href="/Linux%E4%B8%8B%E5%AE%89%E8%A3%85MySQL" rel="bookmark" title="Linux下安装MySQL">Linux下安装MySQL</a></li><li><a href="/MySQL%E5%9F%BA%E7%A1%80" rel="bookmark" title="MySQL基础">MySQL基础</a></li><li><a href="/IOC%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="IOC配置方式（一）">IOC配置方式（一）</a></li><li><a href="/IOC%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89" rel="bookmark" title="IOC配置方式（二）">IOC配置方式（二）</a></li><li><a href="/IOC%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F" rel="bookmark" title="IOC注解方式">IOC注解方式</a></li><li><a href="/AOP" rel="bookmark" title="AOP">AOP</a></li><li><a href="/SpringBoot%E5%85%A5%E9%97%A8" rel="bookmark" title="SpringBoot入门">SpringBoot入门</a></li><li><a href="/SpringBoot-Web%E5%BC%80%E5%8F%91" rel="bookmark" title="SpringBoot-Web开发">SpringBoot-Web开发</a></li><li><a href="/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86" rel="bookmark" title="SpringBoot自动装配原理">SpringBoot自动装配原理</a></li><li><a href="/zookeeper%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" rel="bookmark" title="zookeeper搭建及基本概念">zookeeper搭建及基本概念</a></li><li><a href="/zookeeper%E5%8E%9F%E7%90%86" rel="bookmark" title="zookeeper原理">zookeeper原理</a></li><li><a href="/zookeeper%E6%A1%88%E4%BE%8B" rel="bookmark" title="zookeeper案例">zookeeper案例</a></li><li><a href="/MySQL%E8%B0%83%E4%BC%98%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="MySQL调优（一）">MySQL调优（一）</a></li><li><a href="/redis%E5%AE%89%E8%A3%85%E5%8F%8ANIO%E5%8E%9F%E7%90%86" rel="bookmark" title="redis安装及NIO原理">redis安装及NIO原理</a></li><li><a href="/SpringMVC%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="SpringMVC入门（一）">SpringMVC入门（一）</a></li><li><a href="/SpringMVC%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89" rel="bookmark" title="SpringMVC入门（二）">SpringMVC入门（二）</a></li><li><a href="/SpringMVC-REST%E9%A3%8E%E6%A0%BC" rel="bookmark" title="SpringMVC-REST风格">SpringMVC-REST风格</a></li><li><a href="/SpringMVC%E8%BF%9B%E9%98%B6" rel="bookmark" title="SpringMVC进阶">SpringMVC进阶</a></li><li><a href="/SpringMVC%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93" rel="bookmark" title="SpringMVC源码总结">SpringMVC源码总结</a></li><li><a href="/shiro%E5%85%A5%E9%97%A8" rel="bookmark" title="shiro入门">shiro入门</a></li><li><a href="/shiro%E6%95%B4%E5%90%88SpringBoot" rel="bookmark" title="shiro整合SpringBoot">shiro整合SpringBoot</a></li><li><a href="/shiro%E7%9A%84session%E7%AE%A1%E7%90%86" rel="bookmark" title="shiro的session管理">shiro的session管理</a></li><li><a href="/shiro%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E7%99%BB%E5%BD%95" rel="bookmark" title="shiro的缓存机制与分布式登录">shiro的缓存机制与分布式登录</a></li><li><a href="/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95" rel="bookmark" title="单点登录">单点登录</a></li><li><a href="/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86" rel="bookmark" title="线程基础知识">线程基础知识</a></li><li><a href="/%E5%AE%B9%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0" rel="bookmark" title="容器与线程池">容器与线程池</a></li><li><a href="/Win10%E5%AE%89%E8%A3%85docker" rel="bookmark" title="Win10安装docker">Win10安装docker</a></li><li><a href="/Win10%E5%AE%89%E8%A3%85docker" rel="bookmark" title="Win10安装docker">Win10安装docker</a></li><li><a href="/JMH" rel="bookmark" title="JMH">JMH</a></li><li><a href="/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B" rel="bookmark" title="并发编程">并发编程</a></li><li><a href="/java-%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB" rel="bookmark" title="java-日志体系">java-日志体系</a></li><li><a href="/redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" rel="bookmark" title="redis的数据类型">redis的数据类型</a></li><li><a href="/redis%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8" rel="bookmark" title="redis进阶使用">redis进阶使用</a></li><li><a href="/redis%E7%9A%84%E9%9B%86%E7%BE%A4" rel="bookmark" title="redis的集群">redis的集群</a></li><li><a href="/redis%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8" rel="bookmark" title="redis在开发中的简单使用">redis在开发中的简单使用</a></li><li><a href="/ChainOfResponsibility%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F" rel="bookmark" title="ChainOfResponsibility责任链模式">ChainOfResponsibility责任链模式</a></li><li><a href="/Composite%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Composite组合模式">Composite组合模式</a></li><li><a href="/Decorator%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Decorator装饰器模式">Decorator装饰器模式</a></li><li><a href="/Facade%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Facade门面模式">Facade门面模式</a></li><li><a href="/Factory%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Factory工厂模式">Factory工厂模式</a></li><li><a href="/Flyweight%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Flyweight享元模式">Flyweight享元模式</a></li><li><a href="/Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Iterator迭代器模式">Iterator迭代器模式</a></li><li><a href="/Mediator%E8%B0%83%E5%81%9C%E8%80%85%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Mediator调停者模式">Mediator调停者模式</a></li><li><a href="/Observer%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Observer观察者模式">Observer观察者模式</a></li><li><a href="/Proxy%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Proxy代理模式">Proxy代理模式</a></li><li><a href="/Singleton%E5%8D%95%E4%BE%8B" rel="bookmark" title="Singleton单例">Singleton单例</a></li><li><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8A%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95" rel="bookmark" title="微服务以及架构发展">微服务以及架构发展</a></li><li><a href="/JVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD" rel="bookmark" title="JVM-类的加载">JVM-类的加载</a></li><li><a href="/SpringCloud-Netflix%E4%BD%93%E7%B3%BB" rel="bookmark" title="SpringCloud-Netflix体系">SpringCloud-Netflix体系</a></li><li><a href="/%E5%BA%8F%E5%88%97%E5%8C%96" rel="bookmark" title="序列化">序列化</a></li><li><a href="/JVM-JMM" rel="bookmark" title="JVM-JMM">JVM-JMM</a></li><li><a href="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84" rel="bookmark" title="分布式系统与高并发系统架构">分布式系统与高并发系统架构</a></li><li><a href="/JVM-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA" rel="bookmark" title="JVM-对象的创建">JVM-对象的创建</a></li><li><a href="/JVM-JVM%E8%B0%83%E4%BC%98" rel="bookmark" title="JVM-JVM调优">JVM-JVM调优</a></li><li><a href="/JVM-GC" rel="bookmark" title="JVM-GC">JVM-GC</a></li><li><a href="/SpringCloud-Alibaba%E4%BD%93%E7%B3%BB" rel="bookmark" title="SpringCloud-Alibaba体系">SpringCloud-Alibaba体系</a></li><li><a href="/SpringCloud-SpringCloud%E4%BD%93%E7%B3%BB" rel="bookmark" title="SpringCloud-SpringCloud体系">SpringCloud-SpringCloud体系</a></li><li><a href="/Apollo" rel="bookmark" title="Apollo">Apollo</a></li><li><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="微服务中的会话管理（一）">微服务中的会话管理（一）</a></li><li><a href="/%E7%A3%81%E7%9B%98IO%E4%B8%8E%E7%BD%91%E7%BB%9CIO" rel="bookmark" title="磁盘IO与网络IO">磁盘IO与网络IO</a></li><li><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89" rel="bookmark" title="微服务中的会话管理（二）">微服务中的会话管理（二）</a></li><li><a href="/HTTPS" rel="bookmark" title="HTTPS">HTTPS</a></li><li><a href="/RocketMQ-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5" rel="bookmark" title="RocketMQ-基础概念">RocketMQ-基础概念</a></li><li><a href="/RocketMQ-%E6%B6%88%E6%81%AF%E3%80%81%E4%BA%8B%E5%8A%A1" rel="bookmark" title="RocketMQ-消息、事务">RocketMQ-消息、事务</a></li><li><a href="/Kafka-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84" rel="bookmark" title="Kafka-整体架构">Kafka-整体架构</a></li><li class="active"><a href="/%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B" rel="bookmark" title="网络IO模型">网络IO模型</a></li><li><a href="/Kafka-%E6%90%AD%E5%BB%BA" rel="bookmark" title="Kafka-搭建">Kafka-搭建</a></li><li><a href="/Netty" rel="bookmark" title="Netty">Netty</a></li><li><a href="/nginx%E5%AE%9E%E6%88%98" rel="bookmark" title="nginx实战">nginx实战</a></li><li><a href="/Java%E5%92%8C%E4%B8%B2%E5%8F%A3%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1" rel="bookmark" title="Java和串口进行通信">Java和串口进行通信</a></li></ul></div><div class="overview panel" data-title="站点概览"><div class="author" itemprop="author" itemscope itemtype="http://schema.org/Person"><img class="image" itemprop="image" alt="fanfanfan" data-src="/images/avatar.png"><p class="name" itemprop="name">fanfanfan</p><div class="description" itemprop="description">花有重开日，人无再少年</div></div><nav class="state"><div class="item posts"><a href="/archives/"><span class="count">73</span> <span class="name">文章</span></a></div><div class="item categories"><a href="/categories/"><span class="count">3</span> <span class="name">分类</span></a></div><div class="item tags"><a href="/tags/"><span class="count">77</span> <span class="name">标签</span></a></div></nav><div class="social"></div><ul class="menu"><li class="item"><a href="/" rel="section"><i class="ic i-home"></i>首页</a></li><li class="item dropdown"><a href="javascript:void(0);"><i class="ic i-feather"></i>文章</a><ul class="submenu"><li class="item"><a href="/archives/" rel="section"><i class="ic i-list-alt"></i>归档</a></li><li class="item"><a href="/categories/" rel="section"><i class="ic i-th"></i>分类</a></li><li class="item"><a href="/tags/" rel="section"><i class="ic i-tags"></i>标签</a></li></ul></li><li class="item"><a href="/friends/" rel="section"><i class="ic i-magic"></i>友链</a></li><li class="item"><a href="/about/" rel="section"><i class="ic i-user"></i>关于</a></li></ul></div></div></div><ul id="quick"><li class="prev pjax"><a href="/Kafka-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84" rel="prev" title="上一篇"><i class="ic i-chevron-left"></i></a></li><li class="up"><i class="ic i-arrow-up"></i></li><li class="down"><i class="ic i-arrow-down"></i></li><li class="next pjax"><a href="/Kafka-%E6%90%AD%E5%BB%BA" rel="next" title="下一篇"><i class="ic i-chevron-right"></i></a></li><li class="percent"></li></ul></div></div><div class="dimmer"></div></div></main><footer id="footer"><div class="inner"><div class="widgets"><div class="rpost pjax"><h2>随机文章</h2><ul><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/Composite%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F" title="Composite组合模式">Composite组合模式</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/Flyweight%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F" title="Flyweight享元模式">Flyweight享元模式</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/JVM-GC" title="JVM-GC">JVM-GC</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" title="redis的数据类型">redis的数据类型</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/Win10%E5%AE%89%E8%A3%85docker" title="Win10安装docker">Win10安装docker</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/Kafka-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84" title="Kafka-整体架构">Kafka-整体架构</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a> <i class="ic i-angle-right"></i> <a href="/categories/java/%E5%BE%AE%E6%9C%8D%E5%8A%A1/" title="分类于 微服务">微服务</a></div><span><a href="/Apollo" title="Apollo">Apollo</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/RocketMQ-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5" title="RocketMQ-基础概念">RocketMQ-基础概念</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/JVM-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA" title="JVM-对象的创建">JVM-对象的创建</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/ChainOfResponsibility%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F" title="ChainOfResponsibility责任链模式">ChainOfResponsibility责任链模式</a></span></li></ul></div><div><h2>最新评论</h2><ul class="leancloud-recent-comment"></ul></div></div><div class="status"><div class="copyright">&copy; 2010 – <span itemprop="copyrightYear">2021</span> <span class="with-love"><i class="ic i-sakura rotate"></i> </span><span class="author" itemprop="copyrightHolder">fanfanfan @</span></div><div class="count"><span class="post-meta-item-icon"><i class="ic i-chart-area"></i> </span><span title="站点总字数">1.3m 字</span> <span class="post-meta-divider">|</span> <span class="post-meta-item-icon"><i class="ic i-coffee"></i> </span><span title="站点阅读时长">20:22</span></div><div class="powered-by">基于 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo</span> & Theme.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==">Shoka</span></div></div></div></footer></div><script data-config type="text/javascript">var LOCAL={path:"/网络IO模型",favicon:{show:"书院十四先生",hide:"书院十四先生"},search:{placeholder:"文章搜索",empty:"关于 「 ${query} 」，什么也没搜到",stats:"${time} ms 内找到 ${hits} 条结果"},valine:!0,fancybox:!0,copyright:'复制成功，转载请遵守 <i class="ic i-creative-commons"></i>BY-NC-SA 协议。',ignores:[function(e){return e.includes("#")},function(e){return new RegExp(LOCAL.path+"$").test(e)}]}</script><script src="https://cdn.polyfill.io/v2/polyfill.js"></script><script src="//cdn.jsdelivr.net/combine/npm/pace-js@1.0.2/pace.min.js,npm/pjax@0.2.8/pjax.min.js,npm/whatwg-fetch@3.4.0/dist/fetch.umd.min.js,npm/animejs@3.2.0/lib/anime.min.js,npm/algoliasearch@4/dist/algoliasearch-lite.umd.js,npm/instantsearch.js@4/dist/instantsearch.production.min.js,npm/lozad@1/dist/lozad.min.js,npm/quicklink@2/dist/quicklink.umd.js"></script><script src="/js/app.js?v=0.2.5"></script></body></html><!-- rebuild by hrmmi -->