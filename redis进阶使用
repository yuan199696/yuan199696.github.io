<!-- build time:Sat Dec 25 2021 20:22:23 GMT+0800 (中国标准时间) --><!DOCTYPE html><html lang="zh-CN,en,default"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=2"><meta name="theme-color" content="#FFF"><link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png"><link rel="icon" type="image/ico" sizes="32x32" href="/images/favicon.ico"><meta http-equiv="Cache-Control" content="no-transform"><meta http-equiv="Cache-Control" content="no-siteapp"><link rel="alternate" type="application/rss+xml" href="https://baiyezi.vip/rss.xml"><link rel="alternate" type="application/atom+xml" href="https://baiyezi.vip/atom.xml"><link rel="alternate" type="application/json" href="https://baiyezi.vip/feed.json"><link rel="stylesheet" href="//fonts.googleapis.com/css?family=Mulish:300,300italic,400,400italic,700,700italic%7CFredericka%20the%20Great:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20JP:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20SC:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext"><link rel="stylesheet" href="/css/app.css?v=0.2.5"><meta name="keywords" content="Java,数据库,IO,Redis,缓存"><link rel="canonical" href="https://baiyezi.vip/redis%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8"><title>redis进阶使用 - Java |</title><meta name="generator" content="Hexo 5.4.0"></head><body itemscope itemtype="http://schema.org/WebPage"><div id="loading"><div class="cat"><div class="body"></div><div class="head"><div class="face"></div></div><div class="foot"><div class="tummy-end"></div><div class="bottom"></div><div class="legs left"></div><div class="legs right"></div></div><div class="paw"><div class="hands left"></div><div class="hands right"></div></div></div></div><div id="container"><header id="header" itemscope itemtype="http://schema.org/WPHeader"><div class="inner"><div id="brand"><div class="pjax"><h1 itemprop="name headline">redis进阶使用</h1><div class="meta"><span class="item" title="创建时间：2021-04-03 19:25:20"><span class="icon"><i class="ic i-calendar"></i> </span><span class="text">发表于</span> <time itemprop="dateCreated datePublished" datetime="2021-04-03T19:25:20+08:00">2021-04-03</time> </span><span class="item" title="本文字数"><span class="icon"><i class="ic i-pen"></i> </span><span class="text">本文字数</span> <span>29k</span> <span class="text">字</span> </span><span class="item" title="阅读时长"><span class="icon"><i class="ic i-clock"></i> </span><span class="text">阅读时长</span> <span>26 分钟</span> </span><span class="item" title="浏览次数"><span class="icon"><i class="ic i-eye"></i> </span><span class="leancloud-visitors-count"></span></span></div></div></div><nav id="nav"><div class="inner"><div class="toggle"><div class="lines" aria-label="切换导航栏"><span class="line"></span> <span class="line"></span> <span class="line"></span></div></div><ul class="menu"><li class="item title"><a href="/" rel="start"></a></li></ul><ul class="right"><li class="item theme"><i class="ic i-sun"></i></li><li class="item search"><i class="ic i-search"></i></li></ul></div></nav></div><div id="imgs" class="pjax"><ul><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105422.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105420.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105418.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105008.png"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105423.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105419.jpg"></li></ul></div></header><div id="waves"><svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"/></defs><g class="parallax"><use xlink:href="#gentle-wave" x="48" y="0"/><use xlink:href="#gentle-wave" x="48" y="3"/><use xlink:href="#gentle-wave" x="48" y="5"/><use xlink:href="#gentle-wave" x="48" y="7"/></g></svg></div><main><div class="inner"><div id="main" class="pjax"><div class="article wrap"><div class="breadcrumb" itemscope itemtype="https://schema.org/BreadcrumbList"><i class="ic i-home"></i> <span><a href="/">首页</a></span><i class="ic i-angle-right"></i> <span class="current" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/categories/java/" itemprop="item" rel="index" title="分类于 Java"><span itemprop="name">Java</span></a><meta itemprop="position" content="1"></span></div><article itemscope itemtype="http://schema.org/Article" class="post block" lang="zh-CN"><link itemprop="mainEntityOfPage" href="https://baiyezi.vip/redis%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8"><span hidden itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="image" content="/images/avatar.png"><meta itemprop="name" content="fanfanfan"><meta itemprop="description" content=", 花有重开日，人无再少年"></span><span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization"><meta itemprop="name" content=""></span><div class="body md" itemprop="articleBody"><h2 id="redis的进阶使用"><a class="anchor" href="#redis的进阶使用">#</a> redis 的进阶使用</h2><h3 id="管道pipeline"><a class="anchor" href="#管道pipeline">#</a> 管道（pipeline）</h3><p>通过 nc 与 redis 建立一个 socket 连接后，可以使用管道符一次性给 redis 发送多条命令（节省往返时间）以及批量数据</p><p>例如：</p><p>窗口一：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># redis-cli</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span></pre></td></tr></table></figure><p>窗口二：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nc localhost 6379</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token builtin class-name">set</span> k1 hello</pre></td></tr><tr><td data-num="3"></td><td><pre>+OK</pre></td></tr></table></figure><p>窗口一：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k1</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token string">"hello"</span></pre></td></tr></table></figure><p>可以通过 echo 来打印命令结果：</p><p>窗口二：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo -e "set k2 99\n incr k2\n get k2" | nc localhost 6379</span></pre></td></tr><tr><td data-num="2"></td><td><pre>+OK</pre></td></tr><tr><td data-num="3"></td><td><pre>:100</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token variable">$3</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">100</span></pre></td></tr></table></figure><p>窗口一：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k2</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token string">"100"</span></pre></td></tr></table></figure><h3 id="发布订阅pubsub"><a class="anchor" href="#发布订阅pubsub">#</a> 发布 / 订阅（Pub/Sub）</h3><p>redis 是一个快速、稳定的发布 / 订阅的信息系统。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">help</span> @pubsub</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>  PSUBSCRIBE pattern <span class="token punctuation">[</span>pattern <span class="token punctuation">..</span>.<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  summary: Listen <span class="token keyword">for</span> messages published to channels matching the given patterns</pre></td></tr><tr><td data-num="5"></td><td><pre>  since: <span class="token number">2.0</span>.0</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  PUBLISH channel message</pre></td></tr><tr><td data-num="8"></td><td><pre>  summary: Post a message to a channel</pre></td></tr><tr><td data-num="9"></td><td><pre>  since: <span class="token number">2.0</span>.0</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  PUBSUB subcommand <span class="token punctuation">[</span>argument <span class="token punctuation">[</span>argument <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  summary: Inspect the state of the Pub/Sub subsystem</pre></td></tr><tr><td data-num="13"></td><td><pre>  since: <span class="token number">2.8</span>.0</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  PUNSUBSCRIBE <span class="token punctuation">[</span>pattern <span class="token punctuation">[</span>pattern <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  summary: Stop listening <span class="token keyword">for</span> messages posted to channels matching the given patterns</pre></td></tr><tr><td data-num="17"></td><td><pre>  since: <span class="token number">2.0</span>.0</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>  SUBSCRIBE channel <span class="token punctuation">[</span>channel <span class="token punctuation">..</span>.<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  summary: Listen <span class="token keyword">for</span> messages published to the given channels</pre></td></tr><tr><td data-num="21"></td><td><pre>  since: <span class="token number">2.0</span>.0</pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>  UNSUBSCRIBE <span class="token punctuation">[</span>channel <span class="token punctuation">[</span>channel <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  summary: Stop listening <span class="token keyword">for</span> messages posted to the given channels</pre></td></tr><tr><td data-num="25"></td><td><pre>  since: <span class="token number">2.0</span>.0</pre></td></tr></table></figure><p>!&gt; 注意：先要订阅者存在后才能收到发布者的消息，如果是发布者先发布消息而订阅者事先没有监听发布者的端口，那么订阅者是无法收到发布者的消息。</p><p>应用场景一：无历史数据，只显示当前数据。如只显示当前的实时数据。</p><p>窗口一：订阅者一直监听端口中发布者的管道</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> SUBSCRIBE k1</pre></td></tr><tr><td data-num="2"></td><td><pre>Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"subscribe"</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"k1"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span></pre></td></tr></table></figure><p>窗口二：发布者向管道发布消息</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> PUBLISH k1 helloPDD</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span></pre></td></tr></table></figure><p>窗口一：订阅者收到发布者管道中的消息</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> SUBSCRIBE k1</pre></td></tr><tr><td data-num="2"></td><td><pre>Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"subscribe"</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"k1"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"k1"</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"helloPDD"</span></pre></td></tr></table></figure><p>应用场景二：有历史数据，时间更早的历史数据存在数据库中，而时间较新的数据可以用 redis 作为缓存来解决数据的读请求，同时可以利用 sorted_set 集合，以时间作为 key，数据作为 value 来进行近期数据的排序。</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/20201221222226.png" alt="image-20201221222224133"></p><p>为保证以上发送到 sorted_set 集合中的数据能够正常到达，可以单独用一个 redis 进程来读取另一个 redis 进程已经发布的数据，然后进一步将数据发送给 sorted_set 排序后做近期的历史记录数据。</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/20201221222256.png" alt="image-20201221222255234"></p><p>其实，也可以使用 redis 提供的事务来保证一个 redis 进程中的所有操作是原子的，要么都成功，要么都失败。</p><h3 id="事务"><a class="anchor" href="#事务">#</a> 事务</h3><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">help</span> @transactions</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>  DISCARD -</pre></td></tr><tr><td data-num="4"></td><td><pre>  summary: Discard all commands issued after MULTI</pre></td></tr><tr><td data-num="5"></td><td><pre>  since: <span class="token number">2.0</span>.0</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  EXEC -</pre></td></tr><tr><td data-num="8"></td><td><pre>  summary: Execute all commands issued after MULTI</pre></td></tr><tr><td data-num="9"></td><td><pre>  since: <span class="token number">1.2</span>.0</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  MULTI -</pre></td></tr><tr><td data-num="12"></td><td><pre>  summary: Mark the start of a transaction block</pre></td></tr><tr><td data-num="13"></td><td><pre>  since: <span class="token number">1.2</span>.0</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  UNWATCH -</pre></td></tr><tr><td data-num="16"></td><td><pre>  summary: Forget about all watched keys</pre></td></tr><tr><td data-num="17"></td><td><pre>  since: <span class="token number">2.2</span>.0</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>  WATCH key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  summary: Watch the given keys to determine execution of the MULTI/EXEC block</pre></td></tr><tr><td data-num="21"></td><td><pre>  since: <span class="token number">2.2</span>.0</pre></td></tr></table></figure><p>事务可以一次执行多个命令， 并且带有以下两个重要的保证：</p><ul><li>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li><li>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</li></ul><p><span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9leGVjLmh0bWw=">EXEC</span> 命令负责触发并执行事务中的所有命令：</p><ul><li>如果客户端在使用 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9tdWx0aS5odG1s">MULTI</span> 开启了一个事务之后，却因为断线而没有成功执行 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9leGVjLmh0bWw=">EXEC</span> ，那么事务中的所有命令都不会被执行。</li><li>另一方面，如果客户端成功在开启事务之后执行 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9leGVjLmh0bWw=">EXEC</span> ，那么事务中的所有命令都会被执行。</li></ul><p>当使用 AOF 方式做持久化的时候， Redis 会使用单个 write (2) 命令将事务写入到磁盘中。然而，如果 Redis 服务器因为某些原因被管理员杀死，或者遇上某种硬件故障，那么可能只有部分事务命令会被成功写入到磁盘中。</p><p>如果 Redis 在重新启动时发现 AOF 文件出了这样的问题，那么它会退出，并汇报一个错误。使用 <code>redis-check-aof</code> 程序可以修复这一问题：它会移除 AOF 文件中不完整事务的信息，确保服务器可以顺利启动。</p><p>从 2.2 版本开始，Redis 还可以通过乐观锁（optimistic lock）实现 CAS （check-and-set）操作，具体信息请参考文档的后半部分。</p><p><span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9tdWx0aS5odG1s">MULTI</span> 命令用于开启一个事务，它总是返回 <code>OK</code> 。 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9tdWx0aS5odG1s">MULTI</span> 执行之后， 客户端可以继续向服务器发送任意多条命令， 这些命令不会立即被执行， 而是被放到一个队列中， 当 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9leGVjLmh0bWw=">EXEC</span> 命令被调用时， 所有队列中的命令才会被执行。</p><p><span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy93YXRjaC5odG1s">WATCH</span> 命令用于在事务开启之前监控事务要操作的 key，如果该 key 在 WATCH 之后被改变，那么操作该 key 的事务是失败的，即事务中的所有命令是无效的。</p><p>另一方面， 通过调用 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9kaXNjYXJkLmh0bWw=">DISCARD</span> ， 客户端可以清空事务队列， 并放弃执行事务。</p><p>例如：现在有两个 redis 客户端对同一个 key 进行操作，那么使用 multi 开启事务后，谁先调用 exec 命令谁就会先执行相应的客户端命令来操作 key。</p><p>窗口一：开启事务后获取指定 key 的值</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> FLUSHALL</pre></td></tr><tr><td data-num="2"></td><td><pre>OK</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 hello</pre></td></tr><tr><td data-num="4"></td><td><pre>OK</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> multi</pre></td></tr><tr><td data-num="6"></td><td><pre>OK</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k1</pre></td></tr><tr><td data-num="8"></td><td><pre>QUEUED</pre></td></tr></table></figure><p>窗口二：开启事务后删除指定 key 的值，并且优先调用 exec 命令来执行事务</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> multi</pre></td></tr><tr><td data-num="2"></td><td><pre>OK</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> del k1</pre></td></tr><tr><td data-num="4"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">exec</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span></pre></td></tr></table></figure><p>窗口一：使用 exec 命令来执行事务。可以看到无法取到指定 key 的值，因为已经被窗口二中的事务优先执行删除了 key 的值。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">exec</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span></pre></td></tr></table></figure><p>!&gt; 以下演示 WATCH 的作用</p><p>窗口一：设置一个 key 并开启事务</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> FLUSHALL</pre></td></tr><tr><td data-num="2"></td><td><pre>OK</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 hello</pre></td></tr><tr><td data-num="4"></td><td><pre>OK</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> multi</pre></td></tr><tr><td data-num="6"></td><td><pre>OK</pre></td></tr></table></figure><p>窗口二：使用 WATCH 监控指定的 key，并开启事务</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token function">watch</span> k1</pre></td></tr><tr><td data-num="2"></td><td><pre>OK</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> multi</pre></td></tr><tr><td data-num="4"></td><td><pre>OK</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k1</pre></td></tr><tr><td data-num="6"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys *</pre></td></tr><tr><td data-num="8"></td><td><pre>QUEUED</pre></td></tr></table></figure><p>窗口一：改变 key 的值并执行事务</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 abcd</pre></td></tr><tr><td data-num="2"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">exec</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">1</span><span class="token punctuation">)</span> OK</pre></td></tr></table></figure><p>窗口二：执行事务，可以看到该事务中的所有命令均为执行，因为 WATCH 监控到 key 的值已经改变，所以事务不会执行成功</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">exec</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">(</span>nil<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="布隆过滤器"><a class="anchor" href="#布隆过滤器">#</a> 布隆过滤器</h3><p>redis 是<span class="exturl" data-url="aHR0cHM6Ly9yZWRpcy5pby9tb2R1bGVz">模块化</span>的，可以集成其他模块。布隆过滤器模块可以解决 redis 缓存穿透问题。</p><h4 id="布隆过滤器安装"><a class="anchor" href="#布隆过滤器安装">#</a> 布隆过滤器安装</h4><p>下载布隆过滤器源码</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># wget https://github.com/RedisBloom/RedisBloom/archive/master.zip</span></pre></td></tr></table></figure><p>解压源码</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># unzip RedisBloom-master.zip</span></pre></td></tr></table></figure><p>进入解压目录，执行 make，之后在解压目录下生成一个文件 <span class="exturl" data-url="aHR0cDovL3JlZGlzYmxvb20uc28=">redisbloom.so</span>，将该文件复制到 redis 的安装目录下</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost RedisBloom-master<span class="token punctuation">]</span><span class="token comment"># make</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>root@localhost RedisBloom-master<span class="token punctuation">]</span><span class="token comment"># ls</span></pre></td></tr><tr><td data-num="3"></td><td><pre>changelog    contrib     docs     Makefile    opt       README.md      rmutil  tests</pre></td></tr><tr><td data-num="4"></td><td><pre>codecov.yml  Dockerfile  LICENSE  mkdocs.yml  ramp.yml  redisbloom.so  src</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span>root@localhost RedisBloom-master<span class="token punctuation">]</span><span class="token comment"># cp redisbloom.so /opt/fan/redis6</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span>root@localhost RedisBloom-master<span class="token punctuation">]</span><span class="token comment"># cd /opt/fan/redis6/</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span>root@localhost redis6<span class="token punctuation">]</span><span class="token comment"># ls</span></pre></td></tr><tr><td data-num="8"></td><td><pre>bin  redisbloom.so</pre></td></tr></table></figure><p>之后关闭 redis 服务，重新启动 redis 服务并挂载到布隆过滤器模块</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost redis6<span class="token punctuation">]</span><span class="token comment"># service redis_6379 stop</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Stopping <span class="token punctuation">..</span>.</pre></td></tr><tr><td data-num="3"></td><td><pre>Redis stopped</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span>root@localhost redis6<span class="token punctuation">]</span><span class="token comment"># redis-server --loadmodule /opt/fan/redis6/redisbloom.so</span></pre></td></tr></table></figure><p>然后启动 redis 客户端后就会多了一些以 BF 开头的命令（注意：由于挂载布隆过滤器时默认是挂载到 6379 端口的 redis 客户端的，所以只有在该端口的客户端有布隆过滤器的命令可以执行）</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># redis-cli</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> BF.INFO key</pre></td></tr></table></figure><h4 id="布隆过滤器介绍"><a class="anchor" href="#布隆过滤器介绍">#</a> 布隆过滤器介绍</h4><p>缓存穿透：客户端查询的数据在缓存中以及数据库中都没有，在数据库中没有的数据本应该在缓存中查询时就被拦截掉，而没必要再去数据库中查询浪费数据库资源，但是缓存并不能完全的判断客户端要查询的数据在数据库中是否存在，于是一部分查询即使数据库中没有数据也会穿透缓存去数据库中查询，这样大大的降低了数据库的性能。</p><p>可以通过给 redis 缓存加一个布隆过滤器的模块以及 bitmap（数据作为 key，事先判断数据库有相应无数据，如果有，通过布隆过滤器将数据存入 bitmap 并将二进制位标记为 1），利用布隆过滤器来判断客户端请求的数据在数据库中是否存在（判断请求的数据是否在 bitmap 中的二进制位为 1，如果为 1 那么就放行去数据库查询，为 0 就过滤掉），可以很大程度减少客户端查询时缓存穿透问题。</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20201222190654580.png" alt="image-20201222190654580"></p><p>布隆过滤器算法可以在客户端实现，也可以在 redis 中实现，而最常用就是直接在 redis 端利用 redis 提供的布隆过滤器模块将数据库中存在的数据添加到 bitmap，然后客户端在查询时通过布隆过滤器来进行过滤查询。但是布隆过滤器并不能百分之百保证缓存不被穿透，有小概率放行不存在的数据去到数据库查询。其次，如果缓存穿透了但数据库没有要查询的数据时，可以在 redis 中增加 key 并标记 value，这样下次有同样的查询时就会被过滤掉。</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20201222150223617.png" alt="image-20201222150223617"></p><blockquote><p>[!tip]</p><p>redis 作为数据库 / 缓存的区别</p></blockquote><h2 id="redis作为缓存"><a class="anchor" href="#redis作为缓存">#</a> redis 作为缓存</h2><p><span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvbHJ1LWNhY2hlLmh0bWw=">将 Redis 当做使用 LRU 算法的缓存来使用</span>：如何配置并且将 Redis 当做缓存来使用，通过限制内存及自动回收键。</p><ul><li><p>缓存在内存中，无法持久化</p></li><li><p>缓存中的数据不是全量数据</p></li><li><p>缓存应该随着访问的变换，存放热数据</p></li></ul><p>!&gt; 由于内存空间有限，redis 里的数据怎么能随着业务变化，只保留热数据，淘汰掉冷数据？</p><p>根据业务逻辑来设置 key 的有效期，或者使用淘汰策略淘汰 key。</p><h3 id="key的淘汰策略"><a class="anchor" href="#key的淘汰策略">#</a> key 的淘汰策略</h3><p>/etc/redis/6379.conf 配置文件中有两个参数与内存相关</p><ul><li><p>maxmemory &lt;bytes&gt;：最大内存，建议在 1~10GB，不宜过大，否则在迁移时比较麻烦</p></li><li><p>maxmemory-policy：<strong>当内存达到最大时</strong>，内存中 key 的<span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvbHJ1LWNhY2hlLmh0bWw=">回收策略</span></p></li></ul><p>当 maxmemory 限制达到的时候 Redis 会使用的行为由 Redis 的 maxmemory-policy 配置指令来进行配置。</p><p>以下的策略是可用的:</p><ul><li><strong>noeviction</strong>: 返回错误当内存限制达到并且客户端尝试执行会让更多内存被使用的命令（大部分的写入指令，但 DEL 和几个例外）。适合 redis 作为数据库使用，因为数据库数据不能丢失。</li><li><strong>allkeys-lru</strong>: 尝试回收最近最少使用的键（LRU，Least Recently Used），使得新添加的数据有空间存放。</li><li><strong>volatile-lru</strong>: 尝试回收最近最少使用的键（LRU），但仅限于在过期集合的键，使得新添加的数据有空间存放。</li><li><strong>allkeys-lfu</strong>：回收访问频率最少的键（LFU，Least Frequently Used）</li><li><strong>allkeys-random</strong>: 回收随机的键使得新添加的数据有空间存放。</li><li><strong>volatile-random</strong>: 回收随机的键使得新添加的数据有空间存放，但仅限于在过期集合的键。</li><li><strong>volatile-ttl</strong>: 回收在过期集合的键，并且优先回收存活时间（TTL）较短的键，使得新添加的数据有空间存放。</li></ul><p>如果没有键满足回收的前提条件的话，策略<strong> volatile-lru</strong>, <strong>volatile-random</strong> 以及<strong> volatile-ttl</strong> 就和 noeviction 差不多了。</p><p>选择正确的回收策略是非常重要的，这取决于你的应用的访问模式，不过你可以在运行时进行相关的策略调整，并且监控缓存命中率和没命中的次数，通过 RedisINFO 命令输出以便调优。</p><p>一般的经验规则:</p><ul><li>使用<strong> allkeys-lru</strong> 策略：当你希望你的请求符合一个幂定律分布，也就是说，你希望部分的子集元素将比其它其它元素被访问的更多。如果你不确定选择什么，这是个很好的选择。.</li><li>使用<strong> allkeys-random</strong>：如果你是循环访问，所有的键被连续的扫描，或者你希望请求分布正常（所有元素被访问的概率都差不多）。</li><li>使用<strong> volatile-ttl</strong>：如果你想要通过创建缓存对象时设置 TTL 值，来决定哪些对象应该被过期。</li></ul><p><strong>allkeys-lru</strong> 和 <strong>volatile-random</strong> 策略对于当你想要单一的实例实现缓存及持久化一些键时很有用。不过一般运行两个实例是解决这个问题的更好方法。</p><p>为了键设置过期时间也是需要消耗内存的，所以使用<strong> allkeys-lru</strong> 这种策略更加高效，因为没有必要为键取设置过期时间当内存有压力时。</p><h3 id="key的过期有效时间"><a class="anchor" href="#key的过期有效时间">#</a> key 的过期（有效）时间</h3><p><strong>如果不为 key 设置过期时间，那么可以使用淘汰策略来淘汰 key</strong></p><p><strong>key 的过期时间会影响内存回收策略中的过期集合中的 key。</strong></p><p><strong>如果在 key 的有效时间内对 key 的值进行更新，则过期时间失效。</strong></p><p>key 默认不过期，可以使用 ttl 命令查看 key 的存活时间，默认为 - 1，设置 key 的同时可以设定 key 的存活时间。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> FLUSHALL</pre></td></tr><tr><td data-num="2"></td><td><pre>OK</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 aaa</pre></td></tr><tr><td data-num="4"></td><td><pre>OK</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -1</pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 aaa EX <span class="token number">20</span> <span class="token comment">#设置 k1 的存活时间为 20 秒</span></pre></td></tr><tr><td data-num="2"></td><td><pre>OK</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">14</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">13</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">12</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">12</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">11</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k1</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">(</span>nil<span class="token punctuation">)</span></pre></td></tr></table></figure><p>也可以使用使用 EXPIRE 命令设置 key 的存活时间（s）</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 aaa</pre></td></tr><tr><td data-num="2"></td><td><pre>OK</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -1</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> EXPIRE k1 <span class="token number">15</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">12</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl  k1</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k1</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">(</span>nil<span class="token punctuation">)</span></pre></td></tr></table></figure><p>使用倒计时来设置 key 的过期时间</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 aaa</pre></td></tr><tr><td data-num="2"></td><td><pre>OK</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> EXPIREAT k1 <span class="token number">1608693000000</span> <span class="token comment">#时间戳 毫秒</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k1</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token string">"aaa"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1607084278277</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1607084278272</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1607084278269</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl k1</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1607084278263</span></pre></td></tr></table></figure><p>time 命令查看当前时间戳（s）</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token function">time</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1608732257"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"620796"</span></pre></td></tr></table></figure><p>也可以定时来设置 key 的过期时间</p><h3 id="redis淘汰过期的keys"><a class="anchor" href="#redis淘汰过期的keys">#</a> redis 淘汰过期的 keys</h3><p><span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9leHBpcmUuaHRtbA==">过期（Expires）</span>：Redis 允许为每一个 key 设置不同的过期时间，当它们到期时将自动从服务器上删除。</p><p>Redis keys 过期有两种方式：被动和主动方式。</p><p>当一些客户端尝试访问它时，key 会被发现并主动的过期。</p><p>当然，这样是不够的，因为有些过期的 keys，永远不会访问他们。 无论如何，这些 keys 应该过期，所以定时随机测试设置 keys 的过期时间。所有这些过期的 keys 将会从密钥空间删除。</p><p>具体就是 Redis 每秒 10 次做的事情：</p><ol><li>测试随机的 20 个 keys 进行相关过期检测。</li><li>删除所有已经过期的 keys。</li><li>如果有多于 25% 的 keys 过期，重复步奏 1.</li></ol><p>这是一个平凡的概率算法，基本上的假设是，我们的样本是这个密钥控件，并且我们不断重复过期检测，直到过期的 keys 的百分百低于 25%, 这意味着，在任何给定的时刻，最多会清除 1/4 的过期 keys。</p><h2 id="redis作为数据库"><a class="anchor" href="#redis作为数据库">#</a> redis 作为数据库</h2><p>由于 redis 是基于内存的，所以读写速度比较快，但是内存断电后数据容易丢失，如果想让 redis 作为数据库，那么就要解决数据在 redis 内存中的持久化问题。<strong>以下将以单机单进程的 redis 作为基础。</strong></p><h3 id="rdb"><a class="anchor" href="#rdb">#</a> RDB</h3><p><strong>RDB（redisDB）</strong>：redis 的快照副本。存储的是二进制数据文件。</p><p>缺点：</p><ul><li><p>不支持拉链式的备份，最终只有一份 rdb 数据 (如 dump.rdb)；</p></li><li><p>丢失的数据相对多一些，时点与时点之间的窗口数据容易丢失；</p></li></ul><p>优点：</p><ul><li>数据恢复的速度相对较快，类似于 java 中的序列化</li></ul><p>实现方式：</p><ol><li>拍摄快照时阻塞 redis 进程，直到所有数据写入磁盘，且 redis 进程在阻塞期间不对外提供服务。通过 save 命令触发。使用场景：如关机维护之前备份数据。</li><li>拍摄快照时，redis 进程处于非阻塞状态且对外继续提供服务，同时开一个该 redis 进程的子进程将数据拷贝到子进程，子进程负责将数据写入到磁盘。通过 bgsave 命令触发（通过系统调用 fork 来创建子进程）或者通过配置文件触发（配置 bgsave 的规则，但使用的是 save 的标识来触发 bgsave）。<strong>此时，一个 redis 进程的内存不易过大，否则子进程再向磁盘写数据时会很耗时。</strong></li></ol><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/redis/6379.conf</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">################################ SNAPSHOTTING  ################################</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># Save the DB on disk:</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#   save &lt;seconds> &lt;changes> #秒数  操作数，只要同时满足就触发 rdb</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">#   Will save the DB if both the given number of seconds and the given</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">#   number of write operations against the DB occurred.</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">#   In the example below the behaviour will be to save:</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">#   after 900 sec (15 min) if at least 1 key changed</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">#   after 300 sec (5 min) if at least 10 keys changed</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">#   after 60 sec if at least 10000 keys changed</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">#   Note: you can disable saving completely by commenting out all "save" lines.</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">#   It is also possible to remove all the previously configured save</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">#   points by adding a save directive with a single empty string argument</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">#   like in the following example:</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">#   save ""  #关闭 save，即关闭 RDB 功能</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">#redis 默认开启 rdb，且 bgsave 的配置规则如下：（使用 save 来触发），只要满足其中一个就会触发 bgsave 备份 RDB 文件</span></pre></td></tr><tr><td data-num="25"></td><td><pre>save <span class="token number">900</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="26"></td><td><pre>save <span class="token number">300</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="27"></td><td><pre>save <span class="token number">60</span> <span class="token number">10000</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment"># By default Redis will stop accepting writes if RDB snapshots are enabled</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment"># (at least one save point) and the latest background save failed.</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment"># This will make the user aware (in a hard way) that data is not persisting</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment"># on disk properly, otherwise chances are that no one will notice and some</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment"># disaster will happen.</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment"># If the background saving process will start working again Redis will</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment"># automatically allow writes again.</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment"># However if you have setup your proper monitoring of the Redis server</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment"># and persistence, you may want to disable this feature so that Redis will</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment"># continue to work as usual even if there are problems with disk,</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment"># permissions, and so forth.</span></pre></td></tr><tr><td data-num="42"></td><td><pre>stop-writes-on-bgsave-error <span class="token function">yes</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment"># Compress string objects using LZF when dump .rdb databases?</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment"># For default that's set to 'yes' as it's almost always a win.</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment"># If you want to save some CPU in the saving child set it to 'no' but</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment"># the dataset will likely be bigger if you have compressible values or keys.</span></pre></td></tr><tr><td data-num="48"></td><td><pre>rdbcompression <span class="token function">yes</span>  <span class="token comment">#开启压缩</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token comment"># Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token comment"># This makes the format more resistant to corruption but there is a performance</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token comment"># hit to pay (around 10%) when saving and loading RDB files, so you can disable it</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token comment"># for maximum performances.</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token comment"># RDB files created with checksum disabled have a checksum of zero that will</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment"># tell the loading code to skip the check.</span></pre></td></tr><tr><td data-num="57"></td><td><pre>rdbchecksum <span class="token function">yes</span>  <span class="token comment">#检验校验和</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token comment"># The filename where to dump the DB</span></pre></td></tr><tr><td data-num="60"></td><td><pre>dbfilename dump.rdb  <span class="token comment">#备份的 rdb 文件名</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token comment"># Remove RDB files used by replication in instances without persistence</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token comment"># enabled. By default this option is disabled, however there are environments</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token comment"># where for regulations or other security concerns, RDB files persisted on</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token comment"># disk by masters in order to feed replicas, or stored on disk by replicas</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment"># in order to load them for the initial synchronization, should be deleted</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token comment"># ASAP. Note that this option ONLY WORKS in instances that have both AOF</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token comment"># and RDB persistence disabled, otherwise is completely ignored.</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token comment"># An alternative (and sometimes better) way to obtain the same effect is</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token comment"># to use diskless replication on both master and replicas instances. However</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token comment"># in the case of replicas, diskless is not always an option.</span></pre></td></tr><tr><td data-num="73"></td><td><pre>rdb-del-sync-files no</pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token comment"># The working directory.</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token comment"># The DB will be written inside this directory, with the filename specified</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token comment"># above using the 'dbfilename' configuration directive.</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token comment"># The Append Only File will also be created inside this directory.</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token comment"># Note that you must specify a directory here, not a file name.</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token function">dir</span> /var/lib/redis/6379  <span class="token comment">#备份的 rdb 存放的位置</span></pre></td></tr></table></figure><p>一些前置知识：</p><p>管道符 |：</p><ul><li>用于将管道符左边的命令的输出最为管道符右边的命令的输入</li><li>管道会触发创建子进程</li><li><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>优先级高于</mtext><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">优先级高于 |</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord cjk_fallback">优</span><span class="mord cjk_fallback">先</span><span class="mord cjk_fallback">级</span><span class="mord cjk_fallback">高</span><span class="mord cjk_fallback">于</span><span class="mord">∣</span></span></span></span></span></p></li></ul><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $$  #查看当前进程号</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">4518</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $BASHPID  #查看当前进程号</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">4518</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $$ | more  # 先获取当前父进程 (bash) 号 echo $$，然后开启管道后 才开启子进程 echo $$ 将之前获取的父进程号 赋值给 子进程 more</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">4518</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $BASHPID | more  #先开启管道 ，然后开启子进程 echo $BASHPID 并获取子进程号 再赋值给子进程 more</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">8237</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $BASHPID | more</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">8239</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $BASHPID | more</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">8241</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $BASHPID | more</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">8243</span></pre></td></tr></table></figure><p>!&gt; 那么，linux 中父进程的数据，子进程能否看到？</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># num=1</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $num</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $$   #当前 bash 进程的进程号</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">4518</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># /bin/bash  #在当前 bash 的基础上再开启一个子 bash</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $$  #子 bash 的进程号</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">8836</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $num  #子 basn 进程无法获取父 bash 进程的中的变量值</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># exit  #退出子进程 bash</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token builtin class-name">exit</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># pstree  #查看进程层级</span></pre></td></tr><tr><td data-num="14"></td><td><pre> ├─smartd</pre></td></tr><tr><td data-num="15"></td><td><pre>        ├─sshd───sshd───sshd───bash───pstree</pre></td></tr><tr><td data-num="16"></td><td><pre>        ├─sssd─┬─sssd_be</pre></td></tr><tr><td data-num="17"></td><td><pre>        │      └─sssd_nss</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment"># 如何让子进程看到父进程的变量值？</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># export num  #再父进程中使用 export 将变量 num 声明出去，之后子进程可以看到该变量</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># /bin/bash</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $num</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token number">1</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># pstree</span></pre></td></tr><tr><td data-num="25"></td><td><pre> ├─smartd</pre></td></tr><tr><td data-num="26"></td><td><pre>        ├─sshd───sshd───sshd───bash───bash───pstree   <span class="token comment">#多了一层子 bash 进程</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        ├─sssd─┬─sssd_be</pre></td></tr><tr><td data-num="28"></td><td><pre>        │      └─sssd_nss</pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">#如果父进程改变了 num 的值，子进程能否看到？反之，子进程改变了 num 的值，父进程能否看到？</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># num=1</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $num</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token number">1</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># export num</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># vim test.sh  #新建一个 shell，内容如下</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">#代表子进程 bash 执行该 shell</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">#!/bin/bash</span></pre></td></tr><tr><td data-num="39"></td><td><pre> <span class="token comment">#打印子进程进程号</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token builtin class-name">echo</span> <span class="token variable">$$</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">#打印父进程 num 的值</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token builtin class-name">echo</span> <span class="token variable">$num</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token comment">#改变 num 的值</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">999</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">#打印改变后的 num 的值</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token builtin class-name">echo</span> num:<span class="token variable">$num</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token function">sleep</span> <span class="token number">30</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token builtin class-name">echo</span> <span class="token variable">$num</span></pre></td></tr><tr><td data-num="51"></td><td><pre>:wq<span class="token operator">!</span> <span class="token comment">#回车，保存退出</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ./test.sh &amp;  #在父进程的后台执行该 shell</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">2822</span>  <span class="token comment">#shell 中的 echo $$</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># 2822  #回车</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token number">1</span> <span class="token comment">#shell 中的 echo $num</span></pre></td></tr><tr><td data-num="57"></td><td><pre>num:999 <span class="token comment">#shell 中的 echo num:$num</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $$ #打印父进程号</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token number">2584</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $num #打印 num，可以看到 export 的环境变量，子进程中对该变量的修改不会影响到父进程中该变量的值</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token number">1</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># 999 #shell 中的 echo $num，回车</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  已完成               ./test.sh</pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ./test.sh &amp;  #再次执行 shell</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">3035</span> <span class="token comment">#子进程号</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># 3035 #回车</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token number">1</span></pre></td></tr><tr><td data-num="72"></td><td><pre>num:999</pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># num=888 #修改 num 的值</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $num #打印 num 的值</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token number">888</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># 999 #子进程中的 num 仍然是 999，所以 export 的环境变量，父进程中该变量的修改不会影响到子进程中该变量的值</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  已完成               ./test.sh</pre></td></tr></table></figure><p>得出结论：export 的环境变量，父进程不会影响子进程变量，子进程也不会影响父进程变量</p><p>!&gt; 基于以上的演示可以应用到 redis 进程，redis 同样可以有子进程（<strong>redis 的子进程只负责数据的读或写（备份），而不改变数据，这与 linux 中其他子进程不同</strong>），那么 redis 子进程创建的速度应当如何？创建 reids 子进程进行数据拷贝时，redis 子进程的内存空间大小从何而来？</p><p>linux 中提供了一个<strong>系统调用 fork ()</strong>，该系统调用可以快速创建一个子进程（通过 copy-on-write 内核机制复制父进程的方式，具有速度快、空间小的特点）。</p><p><strong>copy-on-write 内核机制</strong>，即写时复制：父进程在数据发生改变时会在内存空间开辟空间并指向新的地址空间，同时复制出一个子进程，子进程指向父进程的旧地址空间并负则将数据刷入磁盘</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/20201229001227.png" alt="image-20201229001226667"></p><p>redis 进程通过自身的虚拟地址与内存建立连接，fork () 创建的 redis 子进程与 redis 父进程均通过自身虚拟地址指针指向内存中的同一个地址，所以，创建 redis 的子进程时并不是对 redis 父进程的数据的直接拷贝，而是通过指针指向内存中的同一块地址来获取数据。而在父进程发生数据改变需要子进程备份时，通过系统调用 fork () 以及 copy on write 内核机制复制出一个子进程来完成数据向磁盘中的写入。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># man fork 2</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>FORK<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>         Linux Programmer<span class="token string">'s Manual        FORK(2)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>NAME</pre></td></tr><tr><td data-num="6"></td><td><pre>       fork - create a child process</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>SYNOPSIS</pre></td></tr><tr><td data-num="9"></td><td><pre>       #include &lt;sys/types.h></pre></td></tr><tr><td data-num="10"></td><td><pre>       #include &lt;unistd.h></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>       pid_t fork(void);</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>DESCRIPTION</pre></td></tr><tr><td data-num="15"></td><td><pre>       fork()  creates  a new process by duplicating the</pre></td></tr><tr><td data-num="16"></td><td><pre>       calling process.  The new process is referred  to</pre></td></tr><tr><td data-num="17"></td><td><pre>       as  the  child  process.   The calling process is</pre></td></tr><tr><td data-num="18"></td><td><pre>       referred to as the parent process.</pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>       The child process and the parent process  run  in</pre></td></tr><tr><td data-num="21"></td><td><pre>       separate  memory  spaces.   At the time of fork()</pre></td></tr><tr><td data-num="22"></td><td><pre>       both memory spaces have the same content.  Memory</pre></td></tr><tr><td data-num="23"></td><td><pre>       writes,  file  mappings (mmap(2)), and unmappings</pre></td></tr><tr><td data-num="24"></td><td><pre>       (munmap(2)) performed by one of the processes  do</pre></td></tr><tr><td data-num="25"></td><td><pre>       not affect the other.</pre></td></tr><tr><td data-num="26"></td><td><pre>       </pre></td></tr><tr><td data-num="27"></td><td><pre>       Under Linux, fork() is implemented using copy-on-</pre></td></tr><tr><td data-num="28"></td><td><pre>       write  pages,  so the only penalty that it incurs</pre></td></tr><tr><td data-num="29"></td><td><pre>       is the time and memory required to duplicate  the</pre></td></tr><tr><td data-num="30"></td><td><pre>       parent's page tables, and to create a unique task</pre></td></tr><tr><td data-num="31"></td><td><pre>       structure <span class="token keyword">for</span> the child.</pre></td></tr></table></figure><h3 id="aof"><a class="anchor" href="#aof">#</a> AOF</h3><p><strong>AOF（Append Only File）</strong>：将 redis 的写操作（对数据的修改）记录（追加）到文件中。存储的是纯指令的日志文件。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/redis/6379.conf</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">############################## APPEND ONLY MODE ###############################</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># By default Redis asynchronously dumps the dataset on disk. This mode is</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># good enough in many applications, but an issue with the Redis process or</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># a power outage may result into a few minutes of writes lost (depending on</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment"># the configured save points).</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># The Append Only File is an alternative persistence mode that provides</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment"># much better durability. For instance using the default data fsync policy</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment"># (see later in the config file) Redis can lose just one second of writes in a</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment"># dramatic event like a server power outage, or a single write if something</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment"># wrong with the Redis process itself happens, but the operating system is</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment"># still running correctly.</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment"># AOF and RDB persistence can be enabled at the same time without problems.</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment"># If the AOF is enabled on startup Redis will load the AOF, that is the file</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment"># with the better durability guarantees.</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment"># Please check http://redis.io/topics/persistence for more information.</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>appendonly no <span class="token comment">#默认不开启 AOF</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment"># The name of the append only file (default: "appendonly.aof")</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>appendfilename <span class="token string">"appendonly.aof"</span> <span class="token comment">#生成的 AOF 文件名</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment"># The fsync() call tells the Operating System to actually write data on disk</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment"># instead of waiting for more data in the output buffer. Some OS will really flush</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment"># data on disk, some other OS will just try to do it ASAP.</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment"># Redis supports three different modes:</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment"># no: don't fsync, just let the OS flush the data when it wants. Faster.</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment"># always: fsync after every write to the append only log. Slow, Safest.</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment"># everysec: fsync only one time every second. Compromise.</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment"># The default is "everysec", as that's usually the right compromise between</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment"># speed and data safety. It's up to you to understand if you can relax this to</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment"># "no" that will let the operating system flush the output buffer when</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment"># it wants, for better performances (but if you can live with the idea of</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token comment"># some data loss consider the default persistence mode that's snapshotting),</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment"># or on the contrary, use "always" that's very slow but a bit safer than</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment"># everysec.</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment"># More details please check the following article:</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token comment"># http://antirez.com/post/redis-persistence-demystified.html</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token comment"># If unsure, use "everysec".</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token comment"># appendfsync always</span></pre></td></tr><tr><td data-num="53"></td><td><pre>appendfsync everysec</pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment"># appendfsync no</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment"># When the AOF fsync policy is set to always or everysec, and a background</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token comment"># saving process (a background save or AOF log background rewriting) is</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token comment"># performing a lot of I/O against the disk, in some Linux configurations</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token comment"># Redis may block too long on the fsync() call. Note that there is no fix for</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token comment"># this currently, as even performing fsync in a different thread will block</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token comment"># our synchronous write(2) call.</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token comment"># In order to mitigate this problem it's possible to use the following option</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token comment"># that will prevent fsync() from being called in the main process while a</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token comment"># BGSAVE or BGREWRITEAOF is in progress.</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token comment"># This means that while another child is saving, the durability of Redis is</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token comment"># the same as "appendfsync none". In practical terms, this means that it is</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token comment"># possible to lose up to 30 seconds of log in the worst scenario (with the</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token comment"># default Linux settings).</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token comment"># If you have latency problems turn this to "yes". Otherwise leave it as</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token comment"># "no" that is the safest pick from the point of view of durability.</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>no-appendfsync-on-rewrite no <span class="token comment">#当 redis 子进程发生重写时，redis 父进程将不再开启 appendfsync 调用内核往磁盘中 flush 数据，所以此时容易丢失数据。所以，开启与否，取决于对数据的敏感性。</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token comment"># Automatic rewrite of the append only file.</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token comment"># Redis is able to automatically rewrite the log file implicitly calling</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token comment"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token comment"># This is how it works: Redis remembers the size of the AOF file after the</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token comment"># latest rewrite (if no rewrite has happened since the restart, the size of</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token comment"># the AOF at startup is used).</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token comment"># This base size is compared to the current size. If the current size is</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token comment"># bigger than the specified percentage, the rewrite is triggered. Also</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token comment"># you need to specify a minimal size for the AOF file to be rewritten, this</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token comment"># is useful to avoid rewriting the AOF file even if the percentage increase</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token comment"># is reached but it is still pretty small.</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token comment"># Specify a percentage of zero in order to disable the automatic AOF</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token comment"># rewrite feature.</span></pre></td></tr><tr><td data-num="93"></td><td><pre></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token comment">#自动触发 AOF 重写的条件</span></pre></td></tr><tr><td data-num="95"></td><td><pre>auto-aof-rewrite-percentage <span class="token number">100</span>  <span class="token comment">#auto-aof-rewrite-min-size 的百分比，比如内存中重写压缩的数据 100% 达到 64MB 后，进行 auto-aof-rewrite-min-size 的扩容，由 64MB 变为 128MB</span></pre></td></tr><tr><td data-num="96"></td><td><pre>auto-aof-rewrite-min-size 64mb  <span class="token comment">#redis 服务启动后，如果内存达到 64MB，那么就会触发重写压缩数据，由于内存中数据是不断递增的，当经过多次重写后压缩的数据大于 64MB 后，此时就会变为当内存数据达到 128MB 后进行重写，以此类推</span></pre></td></tr><tr><td data-num="97"></td><td><pre></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token comment"># An AOF file may be found to be truncated at the end during the Redis</span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token comment"># startup process, when the AOF data gets loaded back into memory.</span></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token comment"># This may happen when the system where Redis is running</span></pre></td></tr><tr><td data-num="101"></td><td><pre><span class="token comment"># crashes, especially when an ext4 filesystem is mounted without the</span></pre></td></tr><tr><td data-num="102"></td><td><pre><span class="token comment"># data=ordered option (however this can't happen when Redis itself</span></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token comment"># crashes or aborts but the operating system still works correctly).</span></pre></td></tr><tr><td data-num="104"></td><td><pre></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token comment"># Redis can either exit with an error when this happens, or load as much</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token comment"># data as possible (the default now) and start if the AOF file is found</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token comment"># to be truncated at the end. The following option controls this behavior.</span></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token comment"># If aof-load-truncated is set to yes, a truncated AOF file is loaded and</span></pre></td></tr><tr><td data-num="110"></td><td><pre><span class="token comment"># the Redis server starts emitting a log to inform the user of the event.</span></pre></td></tr><tr><td data-num="111"></td><td><pre><span class="token comment"># Otherwise if the option is set to no, the server aborts with an error</span></pre></td></tr><tr><td data-num="112"></td><td><pre><span class="token comment"># and refuses to start. When the option is set to no, the user requires</span></pre></td></tr><tr><td data-num="113"></td><td><pre><span class="token comment"># to fix the AOF file using the "redis-check-aof" utility before to restart</span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token comment"># the server.</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="116"></td><td><pre><span class="token comment"># Note that if the AOF file will be found to be corrupted in the middle</span></pre></td></tr><tr><td data-num="117"></td><td><pre><span class="token comment"># the server will still exit with an error. This option only applies when</span></pre></td></tr><tr><td data-num="118"></td><td><pre><span class="token comment"># Redis will try to read more data from the AOF file but not enough bytes</span></pre></td></tr><tr><td data-num="119"></td><td><pre><span class="token comment"># will be found.</span></pre></td></tr><tr><td data-num="120"></td><td><pre>aof-load-truncated <span class="token function">yes</span></pre></td></tr><tr><td data-num="121"></td><td><pre></pre></td></tr><tr><td data-num="122"></td><td><pre><span class="token comment"># When rewriting the AOF file, Redis is able to use an RDB preamble in the</span></pre></td></tr><tr><td data-num="123"></td><td><pre><span class="token comment"># AOF file for faster rewrites and recoveries. When this option is turned</span></pre></td></tr><tr><td data-num="124"></td><td><pre><span class="token comment"># on the rewritten AOF file is composed of two different stanzas:</span></pre></td></tr><tr><td data-num="125"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="126"></td><td><pre><span class="token comment">#   [RDB file][AOF tail]</span></pre></td></tr><tr><td data-num="127"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="128"></td><td><pre><span class="token comment"># When loading Redis recognizes that the AOF file starts with the "REDIS"</span></pre></td></tr><tr><td data-num="129"></td><td><pre><span class="token comment"># string and loads the prefixed RDB file, and continues loading the AOF</span></pre></td></tr><tr><td data-num="130"></td><td><pre><span class="token comment"># tail.</span></pre></td></tr><tr><td data-num="131"></td><td><pre>aof-use-rdb-preamble <span class="token function">yes</span>  <span class="token comment">#默认开启 AOF 与 RDB 混合模式，redis4.0 版本及之后提供</span></pre></td></tr></table></figure><p>优点：</p><ul><li>由于每一次数据的改变都会及时写入到文件，所以丢失数据少</li><li>通过日志可恢复数据</li></ul><p>缺点：</p><ul><li>由于备份在磁盘的数据可以无限大，所以数据恢复速度相比于 RDB 较慢（恢复数据时并不会恢复磁盘中记录的所有数据，而是在 redis 规定内存空间下，抵消掉一些无意义的命令数据后进行恢复）</li></ul><p><strong>redis 中，RDB 和 AOF 可以同时开启。如果开启了 AOF，那么数据恢复时只会使用 AOF，因为 AOF 的数据比较完整。4.0 版本以后 AOF 中包含 RDB 全量数据，所以只需要将 redis 新的写操作追加到文件中即可。</strong></p><p>既然可以通过日志恢复数据，那么就可以设置一种方案，让日志足够小的同时可以恢复数据：<br>redis4.0 之前：重写时（执行 BGREWRITEAOF 重写命令），抵消旧的 key 值，合并重复的命令。最终得到的是一个纯指令的文件，所以恢复的成本相对较高。</p><p>redis4.0 之后：重写时，将旧的数据通过 RDB 写入到 AOF 文件中，将新的增量的数据以指令的方式追加 AOF 文件中，所以 AOF 文件中既有 RDB 二进制格式的文件又有 AOF 指令格式的文件，充分利用了 RDB 二进制数据的恢复速度快以及 AOF 日志的全量数据。以下是官方描述：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># When rewriting the AOF file, Redis is able to use an RDB preamble in the</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># AOF file for faster rewrites and recoveries. When this option is turned</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># on the rewritten AOF file is composed of two different stanzas:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#   [RDB file][AOF tail]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># When loading Redis recognizes that the AOF file starts with the "REDIS"</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment"># string and loads the prefixed RDB file, and continues loading the AOF</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># tail.</span></pre></td></tr></table></figure><p>验证：</p><p>关闭 redis 进程</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># service redis_6379 stop</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Stopping <span class="token punctuation">..</span>.</pre></td></tr><tr><td data-num="3"></td><td><pre>Redis stopped</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># service redis_6380 stop</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Stopping <span class="token punctuation">..</span>.</pre></td></tr><tr><td data-num="6"></td><td><pre>Redis stopped</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ps -ef | grep redis</span></pre></td></tr><tr><td data-num="8"></td><td><pre>root       <span class="token number">7926</span>   <span class="token number">2584</span>  <span class="token number">0</span> 03:07 pts/0    00:00:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto redis</pre></td></tr></table></figure><p>窗口一：修改配置文件 6379.conf</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/redis/6379.conf</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">################################# GENERAL #####################################</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># By default Redis does not run as a daemon. Use 'yes' if you need it.</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span></pre></td></tr><tr><td data-num="7"></td><td><pre>daemonize no  <span class="token comment">#223 行 yes 改为 no，表示在前台阻塞执行</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">#logfile /var/log/redis_6379.log #258 行将日志文件注释掉，让其在屏幕显示</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>appendonly <span class="token function">yes</span> <span class="token comment">#1060 行开启 AOF</span></pre></td></tr><tr><td data-num="12"></td><td><pre>aof-use-rdb-preamble no <span class="token comment">#1167 行 关闭 RDB 和 AOF 混合模式</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre> :wq<span class="token operator">!</span> <span class="token comment">#回车 保存退出</span></pre></td></tr><tr><td data-num="15"></td><td><pre> </pre></td></tr><tr><td data-num="16"></td><td><pre> <span class="token comment">#清除原来的日志</span></pre></td></tr><tr><td data-num="17"></td><td><pre> <span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cd /var/lib/redis/</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">[</span>root@localhost redis<span class="token punctuation">]</span><span class="token comment"># ll</span></pre></td></tr><tr><td data-num="19"></td><td><pre>总用量 <span class="token number">0</span></pre></td></tr><tr><td data-num="20"></td><td><pre>drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">22</span> <span class="token number">12</span>月 <span class="token number">25</span> 03:07 <span class="token number">6379</span></pre></td></tr><tr><td data-num="21"></td><td><pre>drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">22</span> <span class="token number">12</span>月 <span class="token number">25</span> 03:07 <span class="token number">6380</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">[</span>root@localhost redis<span class="token punctuation">]</span><span class="token comment"># cd 6379/</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># pwd</span></pre></td></tr><tr><td data-num="24"></td><td><pre>/var/lib/redis/6379</pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># ll</span></pre></td></tr><tr><td data-num="26"></td><td><pre>总用量 <span class="token number">4</span></pre></td></tr><tr><td data-num="27"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">114</span> <span class="token number">12</span>月 <span class="token number">25</span> 03:07 dump.rdb</pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># rm -rf ./*</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># ll</span></pre></td></tr><tr><td data-num="30"></td><td><pre>总用量 <span class="token number">0</span></pre></td></tr></table></figure><p>窗口二：启动 redis 服务</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># redis-server /etc/redis/6379.conf</span></pre></td></tr></table></figure><p>窗口一：查看日志的目录中生成的日志信息</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># pwd</span></pre></td></tr><tr><td data-num="2"></td><td><pre>/var/lib/redis/6379</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># ll</span></pre></td></tr><tr><td data-num="4"></td><td><pre>总用量 <span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">0</span> <span class="token number">12</span>月 <span class="token number">25</span> 03:29 appendonly.aof</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># vim appendonly.aof  #此时日志为空</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>~                                                                                                                                     </pre></td></tr><tr><td data-num="10"></td><td><pre>~                                                                                                                                     </pre></td></tr><tr><td data-num="11"></td><td><pre>~</pre></td></tr></table></figure><p>窗口三：启动一个 redis 客户端</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># redis-cli</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 hello</pre></td></tr><tr><td data-num="3"></td><td><pre>OK</pre></td></tr></table></figure><p>窗口一：再次查看日志文件</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># vim appendonly.aof </span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>*2  <span class="token comment">#  * 代表由两个元素组成：SELECT 和 0 号库</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token variable">$6</span> <span class="token comment">#   $ 描述元素由几个字符或字节组成，SELECT 由 6 个字符组成</span></pre></td></tr><tr><td data-num="5"></td><td><pre>SELECT</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token variable">$1</span> <span class="token comment">#以下的 0 由一个字符组成</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0</span> <span class="token comment">#0 号库</span></pre></td></tr><tr><td data-num="8"></td><td><pre>*3 <span class="token comment"># set 、k1、 hello 三个元素</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token variable">$3</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token builtin class-name">set</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token variable">$2</span></pre></td></tr><tr><td data-num="12"></td><td><pre>k1</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token variable">$5</span></pre></td></tr><tr><td data-num="14"></td><td><pre>hello</pre></td></tr></table></figure><p>窗口三：使用 bgsave 进行 RDB</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> bgsave</pre></td></tr><tr><td data-num="2"></td><td><pre>Background saving started</pre></td></tr></table></figure><p>窗口二：可以看到 redis 服务的日志中描述了 bgsave 进行 RDB</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">8209</span>:M <span class="token number">25</span> Dec <span class="token number">2020</span> 03:29:52.157 * Ready to accept connections</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">8209</span>:M <span class="token number">25</span> Dec <span class="token number">2020</span> 03:42:29.509 * Background saving started by pid <span class="token number">8356</span> <span class="token comment">#bgsave 启动在了 redis 子进程 8356</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">8356</span>:C <span class="token number">25</span> Dec <span class="token number">2020</span> 03:42:29.513 * DB saved on disk <span class="token comment">#bgsave 将数据存储在磁盘</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">8356</span>:C <span class="token number">25</span> Dec <span class="token number">2020</span> 03:42:29.513 * RDB: <span class="token number">2</span> MB of memory used by copy-on-write <span class="token comment">#通过 linux 内核的 copy-on-write 写时复制机制，父进程在内存新开辟了 2MB 的内存空间来存放新数据。子进程将旧数据刷入磁盘（刷入频率参考 appendfsync 配置）</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">8209</span>:M <span class="token number">25</span> Dec <span class="token number">2020</span> 03:42:29.589 * Background saving terminated with success <span class="token comment">#bgsave 成功结束</span></pre></td></tr></table></figure><p>窗口一：查看日志目录，发现生成了 RDB 文件</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># ll</span></pre></td></tr><tr><td data-num="2"></td><td><pre>总用量 <span class="token number">8</span></pre></td></tr><tr><td data-num="3"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">55</span> <span class="token number">12</span>月 <span class="token number">25</span> 03:33 appendonly.aof</pre></td></tr><tr><td data-num="4"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">107</span> <span class="token number">12</span>月 <span class="token number">25</span> 03:42 dump.rdb</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># vim dump.rdb </span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#可以看到同时开启 RDB 和 AOF 时，RDB 文件以 REDIS 开头，而 AOF 文件中没有</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">#RDB 文件是通过序列化快速生成的二进制</span></pre></td></tr><tr><td data-num="9"></td><td><pre>REDIS0009ú      redis-ver^E6.0.6ú</pre></td></tr><tr><td data-num="10"></td><td><pre>redis-bitsÀ@ú^EctimeÂ%ïä_ú^Hused-memÂx3^M^@ú^Laof-preambleÀ^@þ^@û^A^@^@^Bk1^Ehelloÿ^DÑm×kì^H^E</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># redis-check-rdb dump.rdb  # redis-check-rdb 命令可以检查 RDB 文件</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">[</span>offset <span class="token number">0</span><span class="token punctuation">]</span> Checking RDB <span class="token function">file</span> dump.rdb</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">[</span>offset <span class="token number">26</span><span class="token punctuation">]</span> AUX FIELD redis-ver <span class="token operator">=</span> <span class="token string">'6.0.6'</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">[</span>offset <span class="token number">40</span><span class="token punctuation">]</span> AUX FIELD redis-bits <span class="token operator">=</span> <span class="token string">'64'</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">[</span>offset <span class="token number">52</span><span class="token punctuation">]</span> AUX FIELD ctime <span class="token operator">=</span> <span class="token string">'1608838949'</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">[</span>offset <span class="token number">67</span><span class="token punctuation">]</span> AUX FIELD used-mem <span class="token operator">=</span> <span class="token string">'865144'</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">[</span>offset <span class="token number">83</span><span class="token punctuation">]</span> AUX FIELD aof-preamble <span class="token operator">=</span> <span class="token string">'0'</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">[</span>offset <span class="token number">85</span><span class="token punctuation">]</span> Selecting DB ID <span class="token number">0</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">[</span>offset <span class="token number">107</span><span class="token punctuation">]</span> Checksum OK</pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">[</span>offset <span class="token number">107</span><span class="token punctuation">]</span> <span class="token punctuation">\</span>o/ RDB looks OK<span class="token operator">!</span> <span class="token punctuation">\</span>o/</pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">[</span>info<span class="token punctuation">]</span> <span class="token number">1</span> keys <span class="token builtin class-name">read</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">[</span>info<span class="token punctuation">]</span> <span class="token number">0</span> expires</pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">[</span>info<span class="token punctuation">]</span> <span class="token number">0</span> already expired</pre></td></tr></table></figure><p>窗口三：对刚才的 key 进行重写，验证 AOF 发生重写时日志文件的组成</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 a</pre></td></tr><tr><td data-num="2"></td><td><pre>OK</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 b</pre></td></tr><tr><td data-num="4"></td><td><pre>OK</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 c</pre></td></tr><tr><td data-num="6"></td><td><pre>OK</pre></td></tr></table></figure><p>窗口一：查看 AOF 文件的组成，可以发现有一些重复的命令，如 set，所以可以使用 BGREWRITEAOF 重写命令来压缩该 AOF 文件</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># ll</span></pre></td></tr><tr><td data-num="2"></td><td><pre>总用量 <span class="token number">8</span></pre></td></tr><tr><td data-num="3"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">139</span> <span class="token number">12</span>月 <span class="token number">25</span> 03:59 appendonly.aof <span class="token comment">#此时大小为 139 字节</span></pre></td></tr><tr><td data-num="4"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">103</span> <span class="token number">12</span>月 <span class="token number">25</span> 03:59 dump.rdb</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># vim appendonly.aof </span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>*2</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token variable">$6</span></pre></td></tr><tr><td data-num="10"></td><td><pre>SELECT</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token variable">$1</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">0</span></pre></td></tr><tr><td data-num="13"></td><td><pre>*3</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token variable">$3</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token builtin class-name">set</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token variable">$2</span></pre></td></tr><tr><td data-num="17"></td><td><pre>k1</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token variable">$5</span></pre></td></tr><tr><td data-num="19"></td><td><pre>hello</pre></td></tr><tr><td data-num="20"></td><td><pre>*3</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token variable">$3</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token builtin class-name">set</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token variable">$2</span></pre></td></tr><tr><td data-num="24"></td><td><pre>k1</pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token variable">$1</span></pre></td></tr><tr><td data-num="26"></td><td><pre>a</pre></td></tr><tr><td data-num="27"></td><td><pre>*3</pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token variable">$3</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token builtin class-name">set</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token variable">$2</span></pre></td></tr><tr><td data-num="31"></td><td><pre>k1</pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token variable">$1</span></pre></td></tr><tr><td data-num="33"></td><td><pre>b</pre></td></tr><tr><td data-num="34"></td><td><pre>*3</pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token variable">$3</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token builtin class-name">set</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token variable">$2</span></pre></td></tr><tr><td data-num="38"></td><td><pre>k1</pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token variable">$1</span></pre></td></tr><tr><td data-num="40"></td><td><pre>c</pre></td></tr></table></figure><p>窗口三：执行 BGREWRITEAOF 重写命令</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> BGREWRITEAOF</pre></td></tr><tr><td data-num="2"></td><td><pre>Background append only <span class="token function">file</span> rewriting started</pre></td></tr></table></figure><p>窗口一：可以看到 AOF 文件中直接就是 SET K1 c，删除了重复的 set 命令以及抵消掉了 key 的旧值：hello、a、b</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># ll</span></pre></td></tr><tr><td data-num="2"></td><td><pre>总用量 <span class="token number">8</span></pre></td></tr><tr><td data-num="3"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">51</span> <span class="token number">12</span>月 <span class="token number">25</span> 04:07 appendonly.aof  <span class="token comment">#此时，AOF 文件由 139 字节变为了 51 字节</span></pre></td></tr><tr><td data-num="4"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">103</span> <span class="token number">12</span>月 <span class="token number">25</span> 03:59 dump.rdb</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># vim appendonly.aof </span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>*2</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token variable">$6</span></pre></td></tr><tr><td data-num="10"></td><td><pre>SELECT</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token variable">$1</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">0</span></pre></td></tr><tr><td data-num="13"></td><td><pre>*3</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token variable">$3</span></pre></td></tr><tr><td data-num="15"></td><td><pre>SET</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token variable">$2</span></pre></td></tr><tr><td data-num="17"></td><td><pre>k1</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token variable">$1</span></pre></td></tr><tr><td data-num="19"></td><td><pre>c</pre></td></tr><tr><td data-num="20"></td><td><pre>~                                                                                                                                     </pre></td></tr><tr><td data-num="21"></td><td><pre>~</pre></td></tr></table></figure><p>!&gt; 以上是单独开启 AOF 以及 RDB 模式，以下将验证开启 AOF 与 RDB 的混合模式（redis4.0 版本开始提供的功能）</p><p>关闭 redis 客户端、redid 服务端、清空 redis 日志</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># ll</span></pre></td></tr><tr><td data-num="2"></td><td><pre>总用量 <span class="token number">8</span></pre></td></tr><tr><td data-num="3"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">51</span> <span class="token number">12</span>月 <span class="token number">25</span> 04:07 appendonly.aof</pre></td></tr><tr><td data-num="4"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">103</span> <span class="token number">12</span>月 <span class="token number">25</span> 04:14 dump.rdb</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># rm -rf ./*</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># ll</span></pre></td></tr><tr><td data-num="7"></td><td><pre>总用量 <span class="token number">0</span></pre></td></tr></table></figure><p>修改 redis 配置文件</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># vim /etc/redis/6379.conf </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></pre></td></tr><tr><td data-num="3"></td><td><pre>aof-use-rdb-preamble <span class="token function">yes</span>  <span class="token comment">#1167 行开启 AOF 和 RDB 的混合模式</span></pre></td></tr></table></figure><p>窗口二：启动 redis 服务</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># redis-server /etc/redis/6379.conf</span></pre></td></tr></table></figure><p>窗口一：查看日志目录，生成了 AOF 文件</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># ll</span></pre></td></tr><tr><td data-num="2"></td><td><pre>总用量 <span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">0</span> <span class="token number">12</span>月 <span class="token number">25</span> <span class="token number">17</span>:16 appendonly.aof</pre></td></tr></table></figure><p>窗口三：开启 redis 客户端并进行 key 的操作</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># redis-cli</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 a</pre></td></tr><tr><td data-num="3"></td><td><pre>OK</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 b</pre></td></tr><tr><td data-num="5"></td><td><pre>OK</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 c</pre></td></tr><tr><td data-num="7"></td><td><pre>OK</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 d</pre></td></tr><tr><td data-num="9"></td><td><pre>OK</pre></td></tr></table></figure><p>窗口一：查看日志文件</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># vim appendonly.aof </span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>*2</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token variable">$6</span></pre></td></tr><tr><td data-num="5"></td><td><pre>SELECT</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token variable">$1</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0</span></pre></td></tr><tr><td data-num="8"></td><td><pre>*3</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token variable">$3</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token builtin class-name">set</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token variable">$2</span></pre></td></tr><tr><td data-num="12"></td><td><pre>k1</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token variable">$1</span></pre></td></tr><tr><td data-num="14"></td><td><pre>a</pre></td></tr><tr><td data-num="15"></td><td><pre>*3</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token variable">$3</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token builtin class-name">set</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token variable">$2</span></pre></td></tr><tr><td data-num="19"></td><td><pre>k1</pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token variable">$1</span></pre></td></tr><tr><td data-num="21"></td><td><pre>b</pre></td></tr><tr><td data-num="22"></td><td><pre>*3</pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token variable">$3</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token builtin class-name">set</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token variable">$2</span></pre></td></tr><tr><td data-num="26"></td><td><pre>k1</pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token variable">$1</span></pre></td></tr><tr><td data-num="28"></td><td><pre>c</pre></td></tr><tr><td data-num="29"></td><td><pre>*3</pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token variable">$3</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></pre></td></tr></table></figure><p>窗口三：<strong>若此时执行 BGREWRITEAOF 重写命令，则会发现以上 AOF 日志文件的组成发生了变化，由命令组转换为了二进制数据</strong></p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> BGREWRITEAOF</pre></td></tr><tr><td data-num="2"></td><td><pre>Background append only <span class="token function">file</span> rewriting started</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span></pre></td></tr></table></figure><p>窗口一：查看 AOF 日志文件</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># vim appendonly.aof </span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>REDIS0009ú      redis-ver^E6.0.6ú  <span class="token comment">#可以看到执行重写命令后，AOF 日志文件的组成由原来的命令组变为了二进制文件，即 RDB 格式的文件，且以 REDIS 开头，如果此时再发生 key 的操作，那么在该 AOF 日志文件中追加的是命令组，这就是 AOF 与 RDB 的混合模式</span></pre></td></tr><tr><td data-num="4"></td><td><pre>redis-bitsÀ@ú^EctimeÂÒ°å_ú^Hused-memÂh3^M^@ú^Laof-preambleÀ^Aþ^@û^A^@^@^Bk1^Adÿk<span class="token punctuation">]</span>_@^EKÁ@</pre></td></tr><tr><td data-num="5"></td><td><pre>~                                                                                                                                     </pre></td></tr><tr><td data-num="6"></td><td><pre>~</pre></td></tr></table></figure><p>窗口三：再次对 key 操作，新发生的操作将在 AOF 日志文件中以命令组的格式追加到文件中</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 e</pre></td></tr><tr><td data-num="2"></td><td><pre>OK</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 f</pre></td></tr><tr><td data-num="4"></td><td><pre>OK</pre></td></tr></table></figure><p>窗口一：查看 AOF 日志文件，可以看到由 RDB 的二进制格式的<strong>全量时点数据</strong>以及 AOF 的命令组格式的<strong>增量日志</strong>组成</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># ll</span></pre></td></tr><tr><td data-num="2"></td><td><pre>总用量 <span class="token number">8</span></pre></td></tr><tr><td data-num="3"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">182</span> <span class="token number">12</span>月 <span class="token number">25</span> <span class="token number">17</span>:34 appendonly.aof</pre></td></tr><tr><td data-num="4"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">103</span> <span class="token number">12</span>月 <span class="token number">25</span> <span class="token number">17</span>:31 dump.rdb <span class="token comment">#此时为什么会生成 RDB 日志，将在以下做解释</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># vim appendonly.aof </span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>REDIS0009ú      redis-ver^E6.0.6ú</pre></td></tr><tr><td data-num="8"></td><td><pre>redis-bitsÀ@ú^EctimeÂÒ°å_ú^Hused-memÂh3^M^@ú^Laof-preambleÀ^Aþ^@û^A^@^@^Bk1^Adÿk<span class="token punctuation">]</span>_@^EKÁ@*2^M</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token variable">$6</span>^M</pre></td></tr><tr><td data-num="10"></td><td><pre>SELECT^M</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token variable">$1</span>^M</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">0</span>^M</pre></td></tr><tr><td data-num="13"></td><td><pre>*3^M</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token variable">$3</span>^M</pre></td></tr><tr><td data-num="15"></td><td><pre>set^M</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token variable">$2</span>^M</pre></td></tr><tr><td data-num="17"></td><td><pre>k1^M</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token variable">$1</span>^M</pre></td></tr><tr><td data-num="19"></td><td><pre>e^M</pre></td></tr><tr><td data-num="20"></td><td><pre>*3^M</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token variable">$3</span>^M</pre></td></tr><tr><td data-num="22"></td><td><pre>set^M</pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token variable">$2</span>^M</pre></td></tr><tr><td data-num="24"></td><td><pre>k1^M</pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token variable">$1</span>^M</pre></td></tr><tr><td data-num="26"></td><td><pre>f^M</pre></td></tr><tr><td data-num="27"></td><td><pre>~</pre></td></tr></table></figure><p>窗口二：查看服务端输出</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">2827</span>:M <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:16:11.762 * Ready to accept connections</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">2827</span>:M <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:28:50.237 * Background append only <span class="token function">file</span> rewriting started by pid <span class="token number">2988</span>  <span class="token comment">#AOF 在 redis 子进程 2988 执行</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">2827</span>:M <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:28:50.395 * AOF rewrite child asks to stop sending diffs.  <span class="token comment">#此时执行了重写命令，且配置了 no-appendfsync-on-rewrite no  ，负责 AOF 的子进程要求 redis 父进程停止发送数据</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">2988</span>:C <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:28:50.395 * Parent agreed to stop sending diffs. Finalizing AOF<span class="token punctuation">..</span>. <span class="token comment">#redis 父进程同意并停止发送数据</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">2988</span>:C <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:28:50.396 * Concatenating <span class="token number">0.00</span> MB of AOF <span class="token function">diff</span> received from parent.</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">2988</span>:C <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:28:50.396 * SYNC append only <span class="token function">file</span> rewrite performed <span class="token comment">#redis 子进程开始 AOF 重写</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">2988</span>:C <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:28:50.396 * AOF rewrite: <span class="token number">4</span> MB of memory used by copy-on-write <span class="token comment">#通过写时复制机制，父进程在内存新开辟了 4MB 的内存空间来存放新数据。</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">2827</span>:M <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:28:50.462 * Background AOF rewrite terminated with success <span class="token comment">#AOF 重写成功</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">2827</span>:M <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:28:50.462 * Residual parent <span class="token function">diff</span> successfully flushed to the rewritten AOF <span class="token punctuation">(</span><span class="token number">0.00</span> MB<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">2827</span>:M <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:28:50.462 * Background AOF rewrite finished successfully</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">2827</span>:M <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:31:12.013 * <span class="token number">1</span> changes <span class="token keyword">in</span> <span class="token number">900</span> seconds. Saving<span class="token punctuation">..</span>.  <span class="token comment">#由于配置默认是开启了 RDB，且达到了触发 bgsave 的条件之一：save 900 1，也就是 900s 内发生了最少一次对 key 的操作，那么就会自动触发 bgsave 命令进行备份数据，这也是以上日志文件中生成 dump.rdb 文件的原因</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">2827</span>:M <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:31:12.014 * Background saving started by pid <span class="token number">3007</span>  <span class="token comment">#bgsave 开启在 redis 子进程 3007</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">3007</span>:C <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:31:12.017 * DB saved on disk </pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">3007</span>:C <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:31:12.018 * RDB: <span class="token number">2</span> MB of memory used by copy-on-write <span class="token comment">#通过写时复制机制，父进程在内存新开辟了 2MB 的内存空间来存放新数据。</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">2827</span>:M <span class="token number">25</span> Dec <span class="token number">2020</span> <span class="token number">17</span>:31:12.114 * Background saving terminated with success <span class="token comment">#bgsave 成功结束</span></pre></td></tr></table></figure><p>窗口三：此时再进行一次重写</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> BGREWRITEAOF</pre></td></tr><tr><td data-num="2"></td><td><pre>Background append only <span class="token function">file</span> rewriting started</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span></pre></td></tr></table></figure><p>窗口一：可以看到日志中 AOF 文件和 RDB 文件大小一致，因为 AOF 重写后，将之前追加到日志中的命令组转换为了二进制数据</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># ll</span></pre></td></tr><tr><td data-num="2"></td><td><pre>总用量 <span class="token number">8</span></pre></td></tr><tr><td data-num="3"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">103</span> <span class="token number">12</span>月 <span class="token number">25</span> <span class="token number">18</span>:59 appendonly.aof</pre></td></tr><tr><td data-num="4"></td><td><pre>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">103</span> <span class="token number">12</span>月 <span class="token number">25</span> <span class="token number">17</span>:46 dump.rdb</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># vim appendonly.aof </span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>REDIS0009ú      redis-ver^E6.0.6ú</pre></td></tr><tr><td data-num="8"></td><td><pre>redis-bitsÀ@ú^EctimeÂ^DÆå_ú^Hused-memÂh3^M^@ú^Laof-preambleÀ^Aþ^@û^A^@^@^Bk1^Afÿ<span class="token punctuation">&#123;</span>ÛC¼ÿ<span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>9c<span class="token operator">></span><span class="token number">9</span></pre></td></tr><tr><td data-num="9"></td><td><pre>~                                                                                                                                     </pre></td></tr><tr><td data-num="10"></td><td><pre>~                                                                                                                                     </pre></td></tr><tr><td data-num="11"></td><td><pre>~                                                                                                                                     </pre></td></tr><tr><td data-num="12"></td><td><pre>~                                                                                                                                     </pre></td></tr><tr><td data-num="13"></td><td><pre>~                                                                                                                                     </pre></td></tr><tr><td data-num="14"></td><td><pre>~</pre></td></tr></table></figure><p>如果，此时执行 FLUSHALL 清空所有数据，那么只要在接下来不执行 BGREWRITEAOF 重写命令，那么可以去 AOF 日志中删除 FLUSHALL 命令，之后便可以恢复数据。如果在 FLUSHALL 后执行了 BGREWRITEAOF 重写命令，那么 FLUSHALL 命令也会被转为二进制数据，那么就很难再恢复数据了！</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k2 a</pre></td></tr><tr><td data-num="2"></td><td><pre>OK</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k2 b</pre></td></tr><tr><td data-num="4"></td><td><pre>OK</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> FLUSHALL</pre></td></tr><tr><td data-num="6"></td><td><pre>OK</pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@localhost <span class="token number">6379</span><span class="token punctuation">]</span><span class="token comment"># vim appendonly.aof </span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>REDIS0009ú      redis-ver^E6.0.6ú</pre></td></tr><tr><td data-num="4"></td><td><pre>redis-bitsÀ@ú^EctimeÂ^DÆå_ú^Hused-memÂh3^M^@ú^Laof-preambleÀ^Aþ^@û^A^@^@^Bk1^Afÿ<span class="token punctuation">&#123;</span>ÛC¼ÿ<span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>9c<span class="token operator">></span><span class="token number">9</span>*2^M</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token variable">$6</span>^M</pre></td></tr><tr><td data-num="6"></td><td><pre>SELECT^M</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token variable">$1</span>^M</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0</span>^M</pre></td></tr><tr><td data-num="9"></td><td><pre>*3^M</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token variable">$3</span>^M</pre></td></tr><tr><td data-num="11"></td><td><pre>set^M</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token variable">$2</span>^M</pre></td></tr><tr><td data-num="13"></td><td><pre>k2^M</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token variable">$1</span>^M</pre></td></tr><tr><td data-num="15"></td><td><pre>a^M</pre></td></tr><tr><td data-num="16"></td><td><pre>*3^M</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token variable">$3</span>^M</pre></td></tr><tr><td data-num="18"></td><td><pre>set^M</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token variable">$2</span>^M</pre></td></tr><tr><td data-num="20"></td><td><pre>k2^M</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token variable">$1</span>^M</pre></td></tr><tr><td data-num="22"></td><td><pre>b^M</pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">#可以删除以下三条命令组来恢复数据</span></pre></td></tr><tr><td data-num="24"></td><td><pre>*1^M</pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token variable">$8</span>^M</pre></td></tr><tr><td data-num="26"></td><td><pre>FLUSHALL^M</pre></td></tr></table></figure><p>!&gt;redis 的 AOF 写操作同样会触发 IO，只要是触发 IO，那么就意味着性能的降低，所以 AOF 提供了三种写操作的配置来尽量改善 IO 问题：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># appendfsync always #每次 redis 程序写入数据到内核 buffer 的同时会调用 flush，来强制将内核中 buffer 的数据写入到磁盘，即使 buffer 没有填满，数据最可靠</span></pre></td></tr><tr><td data-num="2"></td><td><pre>appendfsync everysec <span class="token comment">#默认是 redis 每秒调用一次 flush，相对于 appendfsync no 比较可靠</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># appendfsync no #等待 redis 程序将数据写满一个内核中的 buffer 后，内核才往磁盘 flush 该 buffer 中的数据，也就是说 buffer 满了后内核才会自己调用 flush（flush 是用于将内核中 buffer 的数据强制刷入到磁盘）将数据刷到磁盘，所以可能会丢失数据</span></pre></td></tr></table></figure><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20201224174859335.png" alt="image-20201224174859335"></p><h3 id="总结"><a class="anchor" href="#总结">#</a> 总结</h3><p><strong>RDB：</strong></p><ul><li><p>通过 save 命令或 bgsave 命令主动触发 RDB，或者在配置文件中进行配置触发 RDB，备份后形成二进制的 RDB 数据文件（默认文件为 dump.rdb）。其中，配置文件中默认自动开启 bgsave，只要满足以下三个条件之一就会触发 RDB。</p><pre><code>save 900 1
save 300 10
save 60 10000
</code></pre></li></ul><p><strong>AOF：</strong></p><ul><li><p>在配置文件中默认不开启 AOF</p><pre><code>appendonly no #默认不开启AOF
</code></pre></li><li><p>AOF 执行 BGREWRITEAOF 重写命令后：</p><ul><li><p>redis4.0 版本之前，将抵消旧的 key 值，删除重复的命令，AOF 日志文件中只有精简的命令组</p></li><li><p>redis4.0 版本及之后，提供了 AOF 与 RDB 的混合模式，且在配置文件中默认开启。将对 AOF 日志文件原有的指令组转换为二进制数据，对 key 的新的操作将以指令组的方式追加到 AOF 日志文件中</p><pre><code>aof-use-rdb-preamble yes  #默认开启AOF与RDB混合模式，redis4.0版本及之后提供
</code></pre></li></ul></li></ul><p>redis 作为缓存来说，使用 RDB 已经足够了。但是作为数据库来说，为了保证数据库数据的完整性，ROF 与 RDB 的混合模式是必要的。</p><div class="tags"><a href="/tags/Java/" rel="tag"><i class="ic i-tag"></i> Java</a> <a href="/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/" rel="tag"><i class="ic i-tag"></i> 数据库</a> <a href="/tags/IO/" rel="tag"><i class="ic i-tag"></i> IO</a> <a href="/tags/Redis/" rel="tag"><i class="ic i-tag"></i> Redis</a> <a href="/tags/%E7%BC%93%E5%AD%98/" rel="tag"><i class="ic i-tag"></i> 缓存</a></div></div><footer><div class="meta"><span class="item"><span class="icon"><i class="ic i-calendar-check"></i> </span><span class="text">更新于</span> <time title="修改时间：2021-12-24 11:13:00" itemprop="dateModified" datetime="2021-12-24T11:13:00+08:00">2021-12-24</time> </span><span id="/redis进阶使用" class="item leancloud_visitors" data-flag-title="redis进阶使用" title="阅读次数"><span class="icon"><i class="ic i-eye"></i> </span><span class="text">阅读次数</span> <span class="leancloud-visitors-count"></span> <span class="text">次</span></span></div><div class="reward"><button><i class="ic i-heartbeat"></i> 赞赏</button><p>请我喝[茶]~(￣▽￣)~*</p><div id="qr"><div><img data-src="/images/wechatpay.png" alt="fanfanfan 微信支付"><p>微信支付</p></div><div><img data-src="/images/alipay.png" alt="fanfanfan 支付宝"><p>支付宝</p></div><div><img data-src="/images/paypal.png" alt="fanfanfan PayPal"><p>PayPal</p></div></div></div><div id="copyright"><ul><li class="author"><strong>本文作者： </strong>fanfanfan <i class="ic i-at"><em>@</em></i></li><li class="link"><strong>本文链接：</strong> <a href="https://baiyezi.vip/redis%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8" title="redis进阶使用">https://baiyezi.vip/redis进阶使用</a></li><li class="license"><strong>版权声明： </strong>本站所有文章除特别声明外，均采用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC9kZWVkLnpo"><i class="ic i-creative-commons"><em>(CC)</em></i>BY-NC-SA</span> 许可协议。转载请注明出处！</li></ul></div></footer></article></div><div class="post-nav"><div class="item left"><a href="/redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" itemprop="url" rel="prev" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;bfanfanfan&#x2F;img&#x2F;raw&#x2F;master&#x2F;guzhuang&#x2F;20211225105421.jpg" title="redis的数据类型"><span class="type">上一篇</span> <span class="category"><i class="ic i-flag"></i> Java</span><h3>redis的数据类型</h3></a></div><div class="item right"><a href="/redis%E7%9A%84%E9%9B%86%E7%BE%A4" itemprop="url" rel="next" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;bfanfanfan&#x2F;img&#x2F;raw&#x2F;master&#x2F;guzhuang&#x2F;20211225105420.jpg" title="redis的集群"><span class="type">下一篇</span> <span class="category"><i class="ic i-flag"></i> Java</span><h3>redis的集群</h3></a></div></div><div class="wrap" id="comments"></div></div><div id="sidebar"><div class="inner"><div class="panels"><div class="inner"><div class="contents panel pjax" data-title="文章目录"><ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#redis%E7%9A%84%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8"><span class="toc-number">1.</span> <span class="toc-text">redis 的进阶使用</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%AE%A1%E9%81%93pipeline"><span class="toc-number">1.1.</span> <span class="toc-text">管道（pipeline）</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85pubsub"><span class="toc-number">1.2.</span> <span class="toc-text">发布 &#x2F; 订阅（Pub&#x2F;Sub）</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%BA%8B%E5%8A%A1"><span class="toc-number">1.3.</span> <span class="toc-text">事务</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8"><span class="toc-number">1.4.</span> <span class="toc-text">布隆过滤器</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E5%AE%89%E8%A3%85"><span class="toc-number">1.4.1.</span> <span class="toc-text">布隆过滤器安装</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E4%BB%8B%E7%BB%8D"><span class="toc-number">1.4.2.</span> <span class="toc-text">布隆过滤器介绍</span></a></li></ol></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#redis%E4%BD%9C%E4%B8%BA%E7%BC%93%E5%AD%98"><span class="toc-number">2.</span> <span class="toc-text">redis 作为缓存</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#key%E7%9A%84%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5"><span class="toc-number">2.1.</span> <span class="toc-text">key 的淘汰策略</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#key%E7%9A%84%E8%BF%87%E6%9C%9F%E6%9C%89%E6%95%88%E6%97%B6%E9%97%B4"><span class="toc-number">2.2.</span> <span class="toc-text">key 的过期（有效）时间</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#redis%E6%B7%98%E6%B1%B0%E8%BF%87%E6%9C%9F%E7%9A%84keys"><span class="toc-number">2.3.</span> <span class="toc-text">redis 淘汰过期的 keys</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#redis%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%BA%93"><span class="toc-number">3.</span> <span class="toc-text">redis 作为数据库</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#rdb"><span class="toc-number">3.1.</span> <span class="toc-text">RDB</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#aof"><span class="toc-number">3.2.</span> <span class="toc-text">AOF</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%80%BB%E7%BB%93"><span class="toc-number">3.3.</span> <span class="toc-text">总结</span></a></li></ol></li></ol></div><div class="related panel pjax" data-title="系列文章"><ul><li><a href="/Linux%E4%B8%8B%E5%AE%89%E8%A3%85MySQL" rel="bookmark" title="Linux下安装MySQL">Linux下安装MySQL</a></li><li><a href="/MySQL%E5%9F%BA%E7%A1%80" rel="bookmark" title="MySQL基础">MySQL基础</a></li><li><a href="/IOC%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="IOC配置方式（一）">IOC配置方式（一）</a></li><li><a href="/IOC%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89" rel="bookmark" title="IOC配置方式（二）">IOC配置方式（二）</a></li><li><a href="/IOC%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F" rel="bookmark" title="IOC注解方式">IOC注解方式</a></li><li><a href="/AOP" rel="bookmark" title="AOP">AOP</a></li><li><a href="/SpringBoot%E5%85%A5%E9%97%A8" rel="bookmark" title="SpringBoot入门">SpringBoot入门</a></li><li><a href="/SpringBoot-Web%E5%BC%80%E5%8F%91" rel="bookmark" title="SpringBoot-Web开发">SpringBoot-Web开发</a></li><li><a href="/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86" rel="bookmark" title="SpringBoot自动装配原理">SpringBoot自动装配原理</a></li><li><a href="/zookeeper%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" rel="bookmark" title="zookeeper搭建及基本概念">zookeeper搭建及基本概念</a></li><li><a href="/zookeeper%E5%8E%9F%E7%90%86" rel="bookmark" title="zookeeper原理">zookeeper原理</a></li><li><a href="/zookeeper%E6%A1%88%E4%BE%8B" rel="bookmark" title="zookeeper案例">zookeeper案例</a></li><li><a href="/MySQL%E8%B0%83%E4%BC%98%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="MySQL调优（一）">MySQL调优（一）</a></li><li><a href="/redis%E5%AE%89%E8%A3%85%E5%8F%8ANIO%E5%8E%9F%E7%90%86" rel="bookmark" title="redis安装及NIO原理">redis安装及NIO原理</a></li><li><a href="/SpringMVC%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="SpringMVC入门（一）">SpringMVC入门（一）</a></li><li><a href="/SpringMVC%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89" rel="bookmark" title="SpringMVC入门（二）">SpringMVC入门（二）</a></li><li><a href="/SpringMVC-REST%E9%A3%8E%E6%A0%BC" rel="bookmark" title="SpringMVC-REST风格">SpringMVC-REST风格</a></li><li><a href="/SpringMVC%E8%BF%9B%E9%98%B6" rel="bookmark" title="SpringMVC进阶">SpringMVC进阶</a></li><li><a href="/SpringMVC%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93" rel="bookmark" title="SpringMVC源码总结">SpringMVC源码总结</a></li><li><a href="/shiro%E5%85%A5%E9%97%A8" rel="bookmark" title="shiro入门">shiro入门</a></li><li><a href="/shiro%E6%95%B4%E5%90%88SpringBoot" rel="bookmark" title="shiro整合SpringBoot">shiro整合SpringBoot</a></li><li><a href="/shiro%E7%9A%84session%E7%AE%A1%E7%90%86" rel="bookmark" title="shiro的session管理">shiro的session管理</a></li><li><a href="/shiro%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E7%99%BB%E5%BD%95" rel="bookmark" title="shiro的缓存机制与分布式登录">shiro的缓存机制与分布式登录</a></li><li><a href="/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95" rel="bookmark" title="单点登录">单点登录</a></li><li><a href="/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86" rel="bookmark" title="线程基础知识">线程基础知识</a></li><li><a href="/%E5%AE%B9%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0" rel="bookmark" title="容器与线程池">容器与线程池</a></li><li><a href="/Win10%E5%AE%89%E8%A3%85docker" rel="bookmark" title="Win10安装docker">Win10安装docker</a></li><li><a href="/Win10%E5%AE%89%E8%A3%85docker" rel="bookmark" title="Win10安装docker">Win10安装docker</a></li><li><a href="/JMH" rel="bookmark" title="JMH">JMH</a></li><li><a href="/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B" rel="bookmark" title="并发编程">并发编程</a></li><li><a href="/java-%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB" rel="bookmark" title="java-日志体系">java-日志体系</a></li><li><a href="/redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" rel="bookmark" title="redis的数据类型">redis的数据类型</a></li><li class="active"><a href="/redis%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8" rel="bookmark" title="redis进阶使用">redis进阶使用</a></li><li><a href="/redis%E7%9A%84%E9%9B%86%E7%BE%A4" rel="bookmark" title="redis的集群">redis的集群</a></li><li><a href="/redis%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8" rel="bookmark" title="redis在开发中的简单使用">redis在开发中的简单使用</a></li><li><a href="/ChainOfResponsibility%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F" rel="bookmark" title="ChainOfResponsibility责任链模式">ChainOfResponsibility责任链模式</a></li><li><a href="/Composite%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Composite组合模式">Composite组合模式</a></li><li><a href="/Decorator%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Decorator装饰器模式">Decorator装饰器模式</a></li><li><a href="/Facade%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Facade门面模式">Facade门面模式</a></li><li><a href="/Factory%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Factory工厂模式">Factory工厂模式</a></li><li><a href="/Flyweight%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Flyweight享元模式">Flyweight享元模式</a></li><li><a href="/Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Iterator迭代器模式">Iterator迭代器模式</a></li><li><a href="/Mediator%E8%B0%83%E5%81%9C%E8%80%85%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Mediator调停者模式">Mediator调停者模式</a></li><li><a href="/Observer%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Observer观察者模式">Observer观察者模式</a></li><li><a href="/Singleton%E5%8D%95%E4%BE%8B" rel="bookmark" title="Singleton单例">Singleton单例</a></li><li><a href="/Proxy%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Proxy代理模式">Proxy代理模式</a></li><li><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8A%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95" rel="bookmark" title="微服务以及架构发展">微服务以及架构发展</a></li><li><a href="/JVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD" rel="bookmark" title="JVM-类的加载">JVM-类的加载</a></li><li><a href="/SpringCloud-Netflix%E4%BD%93%E7%B3%BB" rel="bookmark" title="SpringCloud-Netflix体系">SpringCloud-Netflix体系</a></li><li><a href="/%E5%BA%8F%E5%88%97%E5%8C%96" rel="bookmark" title="序列化">序列化</a></li><li><a href="/JVM-JMM" rel="bookmark" title="JVM-JMM">JVM-JMM</a></li><li><a href="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84" rel="bookmark" title="分布式系统与高并发系统架构">分布式系统与高并发系统架构</a></li><li><a href="/JVM-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA" rel="bookmark" title="JVM-对象的创建">JVM-对象的创建</a></li><li><a href="/JVM-JVM%E8%B0%83%E4%BC%98" rel="bookmark" title="JVM-JVM调优">JVM-JVM调优</a></li><li><a href="/JVM-GC" rel="bookmark" title="JVM-GC">JVM-GC</a></li><li><a href="/SpringCloud-Alibaba%E4%BD%93%E7%B3%BB" rel="bookmark" title="SpringCloud-Alibaba体系">SpringCloud-Alibaba体系</a></li><li><a href="/SpringCloud-SpringCloud%E4%BD%93%E7%B3%BB" rel="bookmark" title="SpringCloud-SpringCloud体系">SpringCloud-SpringCloud体系</a></li><li><a href="/Apollo" rel="bookmark" title="Apollo">Apollo</a></li><li><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="微服务中的会话管理（一）">微服务中的会话管理（一）</a></li><li><a href="/%E7%A3%81%E7%9B%98IO%E4%B8%8E%E7%BD%91%E7%BB%9CIO" rel="bookmark" title="磁盘IO与网络IO">磁盘IO与网络IO</a></li><li><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89" rel="bookmark" title="微服务中的会话管理（二）">微服务中的会话管理（二）</a></li><li><a href="/HTTPS" rel="bookmark" title="HTTPS">HTTPS</a></li><li><a href="/RocketMQ-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5" rel="bookmark" title="RocketMQ-基础概念">RocketMQ-基础概念</a></li><li><a href="/RocketMQ-%E6%B6%88%E6%81%AF%E3%80%81%E4%BA%8B%E5%8A%A1" rel="bookmark" title="RocketMQ-消息、事务">RocketMQ-消息、事务</a></li><li><a href="/Kafka-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84" rel="bookmark" title="Kafka-整体架构">Kafka-整体架构</a></li><li><a href="/%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B" rel="bookmark" title="网络IO模型">网络IO模型</a></li><li><a href="/Kafka-%E6%90%AD%E5%BB%BA" rel="bookmark" title="Kafka-搭建">Kafka-搭建</a></li><li><a href="/Netty" rel="bookmark" title="Netty">Netty</a></li><li><a href="/nginx%E5%AE%9E%E6%88%98" rel="bookmark" title="nginx实战">nginx实战</a></li><li><a href="/Java%E5%92%8C%E4%B8%B2%E5%8F%A3%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1" rel="bookmark" title="Java和串口进行通信">Java和串口进行通信</a></li></ul></div><div class="overview panel" data-title="站点概览"><div class="author" itemprop="author" itemscope itemtype="http://schema.org/Person"><img class="image" itemprop="image" alt="fanfanfan" data-src="/images/avatar.png"><p class="name" itemprop="name">fanfanfan</p><div class="description" itemprop="description">花有重开日，人无再少年</div></div><nav class="state"><div class="item posts"><a href="/archives/"><span class="count">73</span> <span class="name">文章</span></a></div><div class="item categories"><a href="/categories/"><span class="count">3</span> <span class="name">分类</span></a></div><div class="item tags"><a href="/tags/"><span class="count">77</span> <span class="name">标签</span></a></div></nav><div class="social"></div><ul class="menu"><li class="item"><a href="/" rel="section"><i class="ic i-home"></i>首页</a></li><li class="item dropdown"><a href="javascript:void(0);"><i class="ic i-feather"></i>文章</a><ul class="submenu"><li class="item"><a href="/archives/" rel="section"><i class="ic i-list-alt"></i>归档</a></li><li class="item"><a href="/categories/" rel="section"><i class="ic i-th"></i>分类</a></li><li class="item"><a href="/tags/" rel="section"><i class="ic i-tags"></i>标签</a></li></ul></li><li class="item"><a href="/friends/" rel="section"><i class="ic i-magic"></i>友链</a></li><li class="item"><a href="/about/" rel="section"><i class="ic i-user"></i>关于</a></li></ul></div></div></div><ul id="quick"><li class="prev pjax"><a href="/redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" rel="prev" title="上一篇"><i class="ic i-chevron-left"></i></a></li><li class="up"><i class="ic i-arrow-up"></i></li><li class="down"><i class="ic i-arrow-down"></i></li><li class="next pjax"><a href="/redis%E7%9A%84%E9%9B%86%E7%BE%A4" rel="next" title="下一篇"><i class="ic i-chevron-right"></i></a></li><li class="percent"></li></ul></div></div><div class="dimmer"></div></div></main><footer id="footer"><div class="inner"><div class="widgets"><div class="rpost pjax"><h2>随机文章</h2><ul><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/MySQL%E8%B0%83%E4%BC%98%EF%BC%88%E4%B8%80%EF%BC%89" title="MySQL调优（一）">MySQL调优（一）</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/JMH" title="JMH">JMH</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95" title="单点登录">单点登录</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/RocketMQ-%E6%B6%88%E6%81%AF%E3%80%81%E4%BA%8B%E5%8A%A1" title="RocketMQ-消息、事务">RocketMQ-消息、事务</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89" title="微服务中的会话管理（一）">微服务中的会话管理（一）</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86" title="SpringBoot自动装配原理">SpringBoot自动装配原理</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a> <i class="ic i-angle-right"></i> <a href="/categories/java/%E5%BE%AE%E6%9C%8D%E5%8A%A1/" title="分类于 微服务">微服务</a></div><span><a href="/Apollo" title="Apollo">Apollo</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F" title="Iterator迭代器模式">Iterator迭代器模式</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/SpringMVC-REST%E9%A3%8E%E6%A0%BC" title="SpringMVC-REST风格">SpringMVC-REST风格</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/SpringBoot-Web%E5%BC%80%E5%8F%91" title="SpringBoot-Web开发">SpringBoot-Web开发</a></span></li></ul></div><div><h2>最新评论</h2><ul class="leancloud-recent-comment"></ul></div></div><div class="status"><div class="copyright">&copy; 2010 – <span itemprop="copyrightYear">2021</span> <span class="with-love"><i class="ic i-sakura rotate"></i> </span><span class="author" itemprop="copyrightHolder">fanfanfan @</span></div><div class="count"><span class="post-meta-item-icon"><i class="ic i-chart-area"></i> </span><span title="站点总字数">1.3m 字</span> <span class="post-meta-divider">|</span> <span class="post-meta-item-icon"><i class="ic i-coffee"></i> </span><span title="站点阅读时长">20:22</span></div><div class="powered-by">基于 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo</span> & Theme.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==">Shoka</span></div></div></div></footer></div><script data-config type="text/javascript">var LOCAL={path:"/redis进阶使用",favicon:{show:"书院十四先生",hide:"书院十四先生"},search:{placeholder:"文章搜索",empty:"关于 「 ${query} 」，什么也没搜到",stats:"${time} ms 内找到 ${hits} 条结果"},valine:!0,fancybox:!0,copyright:'复制成功，转载请遵守 <i class="ic i-creative-commons"></i>BY-NC-SA 协议。',ignores:[function(e){return e.includes("#")},function(e){return new RegExp(LOCAL.path+"$").test(e)}]}</script><script src="https://cdn.polyfill.io/v2/polyfill.js"></script><script src="//cdn.jsdelivr.net/combine/npm/pace-js@1.0.2/pace.min.js,npm/pjax@0.2.8/pjax.min.js,npm/whatwg-fetch@3.4.0/dist/fetch.umd.min.js,npm/animejs@3.2.0/lib/anime.min.js,npm/algoliasearch@4/dist/algoliasearch-lite.umd.js,npm/instantsearch.js@4/dist/instantsearch.production.min.js,npm/lozad@1/dist/lozad.min.js,npm/quicklink@2/dist/quicklink.umd.js"></script><script src="/js/app.js?v=0.2.5"></script></body></html><!-- rebuild by hrmmi -->