<!-- build time:Sun Dec 26 2021 14:00:26 GMT+0800 (中国标准时间) --><!DOCTYPE html><html lang="zh-CN,en,default"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=2"><meta name="theme-color" content="#FFF"><link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png"><link rel="icon" type="image/ico" sizes="32x32" href="/images/favicon.ico"><meta http-equiv="Cache-Control" content="no-transform"><meta http-equiv="Cache-Control" content="no-siteapp"><link rel="alternate" type="application/rss+xml" href="https://baiyezi.vip/rss.xml"><link rel="alternate" type="application/atom+xml" href="https://baiyezi.vip/atom.xml"><link rel="alternate" type="application/json" href="https://baiyezi.vip/feed.json"><link rel="stylesheet" href="//fonts.googleapis.com/css?family=Mulish:300,300italic,400,400italic,700,700italic%7CFredericka%20the%20Great:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20JP:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20SC:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext"><link rel="stylesheet" href="/css/app.css?v=0.2.5"><meta name="keywords" content="Java,JVM"><link rel="canonical" href="https://baiyezi.vip/JVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD"><title>JVM-类的加载 - Java |</title><meta name="generator" content="Hexo 5.4.0"></head><body itemscope itemtype="http://schema.org/WebPage"><div id="loading"><div class="cat"><div class="body"></div><div class="head"><div class="face"></div></div><div class="foot"><div class="tummy-end"></div><div class="bottom"></div><div class="legs left"></div><div class="legs right"></div></div><div class="paw"><div class="hands left"></div><div class="hands right"></div></div></div></div><div id="container"><header id="header" itemscope itemtype="http://schema.org/WPHeader"><div class="inner"><div id="brand"><div class="pjax"><h1 itemprop="name headline">JVM-类的加载</h1><div class="meta"><span class="item" title="创建时间：2021-05-06 23:10:22"><span class="icon"><i class="ic i-calendar"></i> </span><span class="text">发表于</span> <time itemprop="dateCreated datePublished" datetime="2021-05-06T23:10:22+08:00">2021-05-06</time> </span><span class="item" title="本文字数"><span class="icon"><i class="ic i-pen"></i> </span><span class="text">本文字数</span> <span>20k</span> <span class="text">字</span> </span><span class="item" title="阅读时长"><span class="icon"><i class="ic i-clock"></i> </span><span class="text">阅读时长</span> <span>18 分钟</span> </span><span id="/JVM-类的加载" class="item leancloud_visitors" data-flag-title="" title="阅读次数"><span class="icon"><i class="ic i-eye"></i> </span><span class="text">阅读次数</span> <span class="leancloud-visitors-count"></span></span></div></div></div><nav id="nav"><div class="inner"><div class="toggle"><div class="lines" aria-label="切换导航栏"><span class="line"></span> <span class="line"></span> <span class="line"></span></div></div><ul class="menu"><li class="item title"><a href="/" rel="start"></a></li></ul><ul class="right"><li class="item theme"><i class="ic i-sun"></i></li><li class="item search"><i class="ic i-search"></i></li></ul></div></nav></div><div id="imgs" class="pjax"><ul><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105419.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105418.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105008.png"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105422.jpg"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225104957.png"></li><li class="item" data-background-image="https://gitee.com/bfanfanfan/img/raw/master/guzhuang/20211225105420.jpg"></li></ul></div></header><div id="waves"><svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"/></defs><g class="parallax"><use xlink:href="#gentle-wave" x="48" y="0"/><use xlink:href="#gentle-wave" x="48" y="3"/><use xlink:href="#gentle-wave" x="48" y="5"/><use xlink:href="#gentle-wave" x="48" y="7"/></g></svg></div><main><div class="inner"><div id="main" class="pjax"><div class="article wrap"><div class="breadcrumb" itemscope itemtype="https://schema.org/BreadcrumbList"><i class="ic i-home"></i> <span><a href="/">首页</a></span><i class="ic i-angle-right"></i> <span class="current" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/categories/java/" itemprop="item" rel="index" title="分类于 Java"><span itemprop="name">Java</span></a><meta itemprop="position" content="1"></span></div><article itemscope itemtype="http://schema.org/Article" class="post block" lang="zh-CN"><link itemprop="mainEntityOfPage" href="https://baiyezi.vip/JVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD"><span hidden itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="image" content="/images/avatar.png"><meta itemprop="name" content="fanfanfan"><meta itemprop="description" content=", 花有重开日，人无再少年"></span><span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization"><meta itemprop="name" content=""></span><div class="body md" itemprop="articleBody"><h2 id="jvm基础"><a class="anchor" href="#jvm基础">#</a> JVM 基础</h2><p>JVM 即 JAVA Virtual Machine，是运行 java 字节码的 java 虚拟机，用来将编译好的字节码文件加载到操作系统的内存中。</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210222102855016.png" alt="image-20210222102855016"></p><p>JVM 是一个跨语言的平台，支持 Java、Scala、Kotlin、Groovy、Clojure、Jython、Jruby 等一百多种语言（这些语言编译后的文件均为 class 文件），此外，JVM 本身是一个规范，可以运行在不同操作系统并由操作系统去实现。所以，JVM 与 Java 语言无关，与 class 文件有关。</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210222104329844.png" alt="image-20210222104329844"></p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210222134208866.png" alt="image-20210222134208866"></p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210222134855074.png" alt="image-20210222134855074"></p><h3 id="jdk-jre-jvm"><a class="anchor" href="#jdk-jre-jvm">#</a> JDK、JRE、JVM</h3><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210222135959173.png" alt="image-20210222135959173"></p><h3 id="class文件格式"><a class="anchor" href="#class文件格式">#</a> Class 文件格式</h3><ul><li><p>二进制字节流（OS 内存中的最终形式）</p></li><li><p>数据类型：u1（代表无符号 1 个字节） u2 u4 u8 和_info（表类型，_info 的来源是 hotspot 源码中的写法）</p></li><li><p>查看十六进制格式的 class 文件</p><ul><li>sublime/notepad 的 HEX Editor 插件 / IDEA 插件 - BinEd</li></ul></li><li><p>查看 class 文件的方法</p><ul><li>javap</li><li>JBE - 可以直接修改</li><li>JClassLib-IDEA 插件之一</li></ul></li><li><p>class 文件的构成</p><p>ClassFile{</p><p>​	u4 magic;</p><p>​	u2 minor_version;</p><p>​	u2 major_version;</p><p>​	u2 constant_pool_count;</p><p>​	cp_info constant_pool;</p><p>}</p><p>写一个 java 类，然后使用 sublime 等工具查看该类编译后的字节码对应的十六进制</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="4"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="5"></td><td><pre> * @DateTime: 2021-02-22 14:28</pre></td></tr><tr><td data-num="6"></td><td><pre> **/</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteCode01</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>该类字节码对应的十六进制</p><pre><code>cafe babe 0000 0034 0010 0a00 0300 0d07
000e 0700 0f01 0006 3c69 6e69 743e 0100
0328 2956 0100 0443 6f64 6501 000f 4c69
6e65 4e75 6d62 6572 5461 626c 6501 0012
4c6f 6361 6c56 6172 6961 626c 6554 6162
6c65 0100 0474 6869 7301 0014 4c63 6f6d
2f66 616e 2f42 7974 6543 6f64 6530 313b
0100 0a53 6f75 7263 6546 696c 6501 000f
4279 7465 436f 6465 3031 2e6a 6176 610c
0004 0005 0100 1263 6f6d 2f66 616e 2f42
7974 6543 6f64 6530 3101 0010 6a61 7661
2f6c 616e 672f 4f62 6a65 6374 0021 0002
0003 0000 0000 0001 0001 0004 0005 0001
0006 0000 002f 0001 0001 0000 0005 2ab7
0001 b100 0000 0200 0700 0000 0600 0100
0000 0700 0800 0000 0c00 0100 0000 0500
0900 0a00 0000 0100 0b00 0000 0200 0c
</code></pre><p>cafe babe：统一标识符（Magic Number），即代表该文件是 class 文件</p><p>0000：小版本号（Minor Version），即小数点后面的版本号，如 jdk1.8 版本号为 52.0，那么小版本号就是 0</p><p>0034：主版本号（Major Version），如 jdk1.8 版本号为 52.0，那么主版本号就是 52</p><p>0010：常量池中常量数量（constant_pool_count），占用两个字节，即常量数量最大为 2^16=65536 个，常量数量为 constant_pool_count-1，因为常量的编号从 1 开始</p><p>常量池（constant_pooll）：具体常量，常量类型如下</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210222162752033.png" alt="image-20210222162752033"></p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210222162843468.png" alt="image-20210222162843468"></p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210222162931989.png" alt="image-20210222162931989"></p><p>如以上 class 文件的十六进制 0a00 0300 0d 表示第一个常量，0a00 为 10，即 tag 为 10 的常量 CONSTANT_Methodref_info，0300 表示指向第三个常量，0d 表示第十三个常量</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210223102708991.png" alt="image-20210223102708991"></p><p>修饰符（access_flags）：如 public、final 等</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210222160754993.png" alt="image-20210222160754993"></p></li></ul><p>当前 class 文件（this_class）：2 个字节，代表当前 class 文件在常量池中的内容</p><p>父类的 class 文件（super_class）：2 个字节，代表父类 class 文件在常量池中的内容</p><p>接口数量（interfaces_count）：接口数量</p><p>接口（interfaces）：具体接口</p><p>属性数量（fields_count）：成员变量数量</p><p>属性（fields）：具体成员变量，具体如下图</p><p><img data-src="D:%5Cfan%5Cblog%5Csource_posts%5Cjava%5CJVM%5CJVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD.assets%5Cimage-20210222170543630.png" alt="image-20210222170543630"></p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210222170614711.png" alt="image-20210222170614711"></p><p>方法数量（methods_count）：</p><p>方法（methods）：具体方法</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210222170646404.png" alt="image-20210222170646404"></p><p>其他属性数量（attributes_count）：大小为 2 字节</p><p>其他属性（attributes）：具体属性如下</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210222170839720.png" alt="image-20210222170839720"></p><h3 id="使用javap查看class文件"><a class="anchor" href="#使用javap查看class文件">#</a> 使用 javap 查看 class 文件</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">C</span><span class="token operator">:</span>\<span class="token operator">></span>javap <span class="token operator">-</span>v <span class="token class-name">D</span><span class="token operator">:</span>\<span class="token class-name">Do</span>\spring\jvm\jvm01\out\production\jvm01\com\fan\<span class="token class-name">ByteCode01</span><span class="token punctuation">.</span><span class="token keyword">class</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Classfile</span> <span class="token operator">/</span><span class="token class-name">D</span><span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Do</span><span class="token operator">/</span>spring<span class="token operator">/</span>jvm<span class="token operator">/</span>jvm01<span class="token operator">/</span>out<span class="token operator">/</span>production<span class="token operator">/</span>jvm01<span class="token operator">/</span>com<span class="token operator">/</span>fan<span class="token operator">/</span><span class="token class-name">ByteCode01</span><span class="token punctuation">.</span><span class="token keyword">class</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token class-name">Last</span> modified <span class="token number">2021</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">22</span><span class="token punctuation">;</span> size <span class="token number">271</span> bytes</pre></td></tr><tr><td data-num="4"></td><td><pre>  MD5 checksum <span class="token number">7e253d</span>ecae54c42327f9b4f0513d2550</pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token class-name">Compiled</span> from <span class="token string">"ByteCode01.java"</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span></span>ByteCode01</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  minor version<span class="token operator">:</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  major version<span class="token operator">:</span> <span class="token number">52</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_SUPER</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token class-name">Constant</span> pool<span class="token operator">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   #<span class="token number">1</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">3.</span>#<span class="token number">13</span>         <span class="token comment">// java/lang/Object."&lt;init>":()V</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   #<span class="token number">2</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">14</span>            <span class="token comment">// com/fan/ByteCode01</span></pre></td></tr><tr><td data-num="13"></td><td><pre>   #<span class="token number">3</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">15</span>            <span class="token comment">// java/lang/Object</span></pre></td></tr><tr><td data-num="14"></td><td><pre>   #<span class="token number">4</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>   #<span class="token number">5</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span></pre></td></tr><tr><td data-num="16"></td><td><pre>   #<span class="token number">6</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Code</span></pre></td></tr><tr><td data-num="17"></td><td><pre>   #<span class="token number">7</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">LineNumberTable</span></pre></td></tr><tr><td data-num="18"></td><td><pre>   #<span class="token number">8</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">LocalVariableTable</span></pre></td></tr><tr><td data-num="19"></td><td><pre>   #<span class="token number">9</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token keyword">this</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  #<span class="token number">10</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Lcom</span><span class="token operator">/</span>fan<span class="token operator">/</span><span class="token class-name">ByteCode01</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  #<span class="token number">11</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">SourceFile</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  #<span class="token number">12</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">ByteCode01</span><span class="token punctuation">.</span>java</pre></td></tr><tr><td data-num="23"></td><td><pre>  #<span class="token number">13</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">4</span><span class="token operator">:</span>#<span class="token number">5</span>          <span class="token comment">// "&lt;init>":()V</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  #<span class="token number">14</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               com<span class="token operator">/</span>fan<span class="token operator">/</span><span class="token class-name">ByteCode01</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  #<span class="token number">15</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span></span>ByteCode01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    flags<span class="token operator">:</span> ACC_PUBLIC</pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token class-name">Code</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span></pre></td></tr><tr><td data-num="32"></td><td><pre>         <span class="token number">0</span><span class="token operator">:</span> aload_0</pre></td></tr><tr><td data-num="33"></td><td><pre>         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object."&lt;init>":()V</span></pre></td></tr><tr><td data-num="34"></td><td><pre>         <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        line <span class="token number">7</span><span class="token operator">:</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token number">0</span>       <span class="token number">5</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   <span class="token class-name">Lcom</span><span class="token operator">/</span>fan<span class="token operator">/</span><span class="token class-name">ByteCode01</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token class-name">SourceFile</span><span class="token operator">:</span> <span class="token string">"ByteCode01.java"</span></pre></td></tr></table></figure><h3 id="使用idea插件jclasslib查看class文件"><a class="anchor" href="#使用idea插件jclasslib查看class文件">#</a> 使用 IDEA 插件 JClasslib 查看 class 文件</h3><p>光标放在 class 文件的类体中 - view-show ByteCode With JClasslib</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210222161406846.png" alt="image-20210222161406846"></p><h2 id="jvm指令集"><a class="anchor" href="#jvm指令集">#</a> JVM 指令集</h2><p>通过以上 IDEA 的插件查看 class 文件</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="4"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="5"></td><td><pre> * @DateTime: 2021-02-22 14:28</pre></td></tr><tr><td data-num="6"></td><td><pre> **/</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteCode01</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="D:%5Cfan%5Cblog%5Csource_posts%5Cjava%5CJVM%5CJVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD.assets%5Cimage-20210222191340355.png" alt="image-20210222191340355"></p><p>可以看到在方法项有一个 &lt;init&gt;，代表类默认的无参构造，下面的 Code 就是该无参构造执行的具体过程</p><pre><code>0 aload_0
1 invokespecial #1 &lt;java/lang/Object.&lt;init&gt;&gt;
4 return
</code></pre><p>以上三条指令在 class 文件中对应的十六进制为</p><pre><code>2A B7 00 01 B1
</code></pre><p>查表可知，这些十六进制对应的命令的代表意义</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3NwZWNzL2p2bXMvc2U4L2h0bWwvanZtcy02Lmh0bWwjanZtcy02LjUuYWxvYWRfbg==">指令在线文档</span></p><p><img data-src="D:%5Cfan%5Cblog%5Csource_posts%5Cjava%5CJVM%5CJVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD.assets%5Cimage-20210222191925002.png" alt="image-20210222191925002"></p><p><img data-src="D:%5Cfan%5Cblog%5Csource_posts%5Cjava%5CJVM%5CJVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD.assets%5Cimage-20210222191958072.png" alt="image-20210222191958072"></p><p><img data-src="D:%5Cfan%5Cblog%5Csource_posts%5Cjava%5CJVM%5CJVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD.assets%5Cimage-20210222192016802.png" alt="image-20210222192016802"></p><h2 id="类加载-初始化"><a class="anchor" href="#类加载-初始化">#</a> 类加载 - 初始化</h2><p>class 文件通过类加载器从磁盘加载到 OS 的内存中，然后进行初始化。类加载到初始化过程主要分为三大步骤：</p><ul><li>loading：class 文件通过类加载器从硬盘加载到内存中</li><li>linking：包括 verification、preparation、resolution<ul><li>verification：用于校验加载到内存中的 class 文件是否符合 class 文件的格式标准</li><li>preparation：将 class 文件中静态变量赋默认值</li><li>resolution：将 class 文件中类、方法、属性等的符合引用解析为直接引用；将 class 文件中常量池中的各种符号引用解析为指针、偏移量等内存地址的直接引用</li></ul></li><li>initializing：将 class 文件中静态变量赋值为初始值</li></ul><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210223110849822.png" alt="image-20210223110849822"></p><h3 id="面试题"><a class="anchor" href="#面试题">#</a> 面试题</h3><p>以下 main 方法中 T.count 的值输出为多少？（考察类的静态变量的初始化）</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="4"></td><td><pre> * 关于初始化的面试题</pre></td></tr><tr><td data-num="5"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="6"></td><td><pre> * @DateTime: 2021-02-25 9:42</pre></td></tr><tr><td data-num="7"></td><td><pre> **/</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoadingProcedure</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">T</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//t 在 preparation 时被赋值为默认值 null，接着在初始化 initializing 时，调用以下无参构造 count++，使得 count 变为了 1</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//count 在 preparation 时被赋值为默认值 0，接着在初始化 initializing 时，将 count 赋值为初始值 2，所以以上的 count 由 1 变为了 2，所以 count 最终结果为 2</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// 但是，如果将以上两条语句换一下位置，那么 count 在初始化之后为 2，然后 t 在初始化时执行无参构造，使得 count++，所以 count 最终为 3</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    </pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        count <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="new对象的过程"><a class="anchor" href="#new对象的过程">#</a> new 对象的过程</h3><p><strong>new 一个对象也是分为两个步骤，因为 new 一个对象时，先给对象分配堆空间，然后将类的成员属性由默认值赋值为初始值，最后再将堆空间的引用赋值给对象，这与类的 class 文件在加载过程中类的静态变量的初始化有些相似。</strong></p><p>接下来通过简单的代码来查看 new 一个对象的指令执行过程</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="4"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="5"></td><td><pre> * @DateTime: 2021-02-25 13:17</pre></td></tr><tr><td data-num="6"></td><td><pre> **/</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> T1 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">T1</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>以上代码的 class 文件的 main 方法的指令执行过程为</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0</span> <span class="token keyword">new</span> #<span class="token number">2</span> <span class="token operator">&lt;</span>com<span class="token operator">/</span>fan<span class="token operator">/</span>classloader<span class="token operator">/</span>T1<span class="token operator">></span> <span class="token comment">// 申请分配一块内存空间</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">3</span> dup</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">4</span> invokespecial #<span class="token number">3</span> <span class="token operator">&lt;</span>com<span class="token operator">/</span>fan<span class="token operator">/</span>classloader<span class="token operator">/</span>T1<span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token operator">></span> <span class="token comment">// 执行构造方法，给成员变量赋值为初始值</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">7</span> astore_1 <span class="token comment">// 将带有初始值的成员变量的内存空间的引用赋值给具体的对象 t</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">8</span> <span class="token keyword">return</span></pre></td></tr></table></figure><p><img data-src="D:%5Cfan%5Cblog%5Csource_posts%5Cjava%5CJVM%5CJVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD.assets%5Cimage-20210225140613907.png" alt="image-20210225140613907"></p><p>问题在于，CPU 可能将以上指令 4 和 7 重新排序，即先执行指令 7 将分配好的地址空间直接赋值给对象，此时地址空间中的成员变量的值为默认值 0，且对象也为默认值 null，然后再执行指令 4 进行成员变量的初始化，那么在这个过程中，如果有多个线程同时请求这个对象，则有的线程就会拿到半初始化状态的对象（即只执行了指令 7，还没有执行指令 4，线程就引用了对象，获得的对象中所有成员变量均为默认值而不是初始值，这是不安全的），可以给对象加一个 volatile 关键字来防止对象的创建过程中指令的重排序。单例模式中给对象添加 volatile 也是防止指令重排，造成拿到的对象是半初始化状态的对象。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">/**DCL：Double Check Loading 双重检查的单例模式</span></pre></td></tr><tr><td data-num="6"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="7"></td><td><pre> * @DateTime: 2021-02-25 10:56</pre></td></tr><tr><td data-num="8"></td><td><pre> **/</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSingleton</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">TestSingleton</span> INSTANCE<span class="token punctuation">;</span> <span class="token comment">//JIT</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">TestSingleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token class-name">ConcurrentHashMap</span> chm <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TestSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token comment">// 业务逻辑代码省略</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 为空，则证明没有线程给该实例进行初始化。如果没有 volatile，那么拿到的对象可能是半初始化状态的对象（对象指向的内存空间中的成员变量的值为</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token comment">// 默认值，还没有赋值为初始值，此时对象不为空，如果直接使用该对象，那么就无法获取到成员变量的初始值 ）而直接返回，造成安全问题</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token comment">// 双重检查</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">TestSingleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 加锁，通过本线程给该实例进行初始化</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 再次检查实例是否为空，确保在第一次检查和加锁期间，没有其他线程对该实例初始化</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                    INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="类加载器"><a class="anchor" href="#类加载器">#</a> 类加载器</h3><p>类加载器本身是一个类，负责将 class 文件从硬盘加载到内存中，加载到内存中的 class 文件会以二进制的形式存放在内存中，同时生成一个 class 对象，该 class 对象指向二进制的 class 文件，所以，我们可以通过该 class 对象来访问 class 文件</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210223112607519.png" alt="image-20210223112607519"></p><p>注意：父加载器不是 “类加载器的加载器”，也不是 “类加载器的父类加载器”，加载器之间不是继承关系，而是一种层级关系，不同的加载器负责加载不同的 class 文件到内存中。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="4"></td><td><pre> * 不同的 ClassLoader 负责将不同类的 class 文件加载到内存中</pre></td></tr><tr><td data-num="5"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="6"></td><td><pre> * @DateTime: 2021-02-23 13:35</pre></td></tr><tr><td data-num="7"></td><td><pre> **/</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderLevel</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为 null（因为 Bootstrap 在 JVM 内部是 c++ 实现的，java 中没有一个类与之匹配，所以返回 null），代表是顶级类加载器 Bootstrap</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sun<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>HKSCS<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>nameservice<span class="token punctuation">.</span>dns<span class="token punctuation">.</span></span>DNSNameService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sun.misc.Launcher$ExtClassLoader@677327b6</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLoaderLevel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>nameservice<span class="token punctuation">.</span>dns<span class="token punctuation">.</span></span>DNSNameService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Extension 类加载器是被顶级类加载器 Bootstrap 加载到内存中的</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLoaderLevel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>输出结果</p><pre><code>null
null
sun.misc.Launcher$ExtClassLoader@677327b6
sun.misc.Launcher$AppClassLoader@18b4aac2
null
null

</code></pre><h3 id="双亲委派"><a class="anchor" href="#双亲委派">#</a> 双亲委派</h3><p>一个 class 文件在通过类加载器加载到内存过程中，会先从子级类加载器到顶级类加载器依次查看 class 文件是否被某一个类加载器加载到类加载器的缓存中，如果有就直接返回，如果从子级类加载器到顶级类加载器都没有加载 class 文件到某一个类加载器的缓存中，那么将从顶级类加载器开始依次向子级类加载器进行委托，直到某个子级类加载器可以加载 class 文件到类加载器的缓存中，否则将抛出异常 ClassNotFound，这个过程就是双亲委派，即从子到父、再从父到子的过程。</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210223144809397.png" alt="image-20210223144809397"></p><p><strong>那么为什么需要双亲委派呢？</strong></p><p>主要问题是安全问题：一些 java 自带的类库有固定的类加载器加载，防止自定义篡改，如 java.lang.String 由 Bootstrap 类加载器负责加载到内存；</p><p>次要问题是资源浪费问题：如果已经加载了 class 文件，那么就不需要再次加载，所以双亲委派先在类加载器中查找 class 文件是否已经加载。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="5"></td><td><pre> * 父加载器</pre></td></tr><tr><td data-num="6"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="7"></td><td><pre> * @DateTime: 2021-02-23 15:55</pre></td></tr><tr><td data-num="8"></td><td><pre> **/</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParentAndChild</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ParentAndChild</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ParentAndChild</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ParentAndChild</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ParentAndChild</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Launcher</span>$<span class="token class-name">AppClassLoader</span><span class="token annotation punctuation">@18b4aac2</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">null</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Launcher</span>$<span class="token class-name">ExtClassLoader</span><span class="token annotation punctuation">@1b6d3586</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">null</span></pre></td></tr></table></figure><h3 id="类加载器范围"><a class="anchor" href="#类加载器范围">#</a> 类加载器范围</h3><p>在 jdk/jre/lib/rt.jar 中一个包 sun.misc，该包下有一个类 Launcher，该类中规定了各种类加载器加载 class 文件的路径</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> bootClassPath <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"sun.boot.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BootClassPathHolder</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">URLClassPath</span> bcp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">private</span> <span class="token class-name">BootClassPathHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">static</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            URL<span class="token punctuation">[</span><span class="token punctuation">]</span> var0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Launcher</span><span class="token punctuation">.</span>bootClassPath <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                var0 <span class="token operator">=</span> <span class="token punctuation">(</span>URL<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>URL<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                    <span class="token keyword">public</span> URL<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var1 <span class="token operator">=</span> <span class="token class-name">Launcher</span><span class="token punctuation">.</span><span class="token function">getClassPath</span><span class="token punctuation">(</span><span class="token class-name">Launcher</span><span class="token punctuation">.</span>bootClassPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                        <span class="token keyword">int</span> var2 <span class="token operator">=</span> var1<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                        <span class="token class-name">HashSet</span> var3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AppClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">URLClassLoader</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token keyword">final</span> <span class="token class-name">URLClassPath</span> ucp <span class="token operator">=</span> <span class="token class-name">SharedSecrets</span><span class="token punctuation">.</span><span class="token function">getJavaNetAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURLClassPath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ClassLoader</span> <span class="token function">getAppClassLoader</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ClassLoader</span> var0<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">final</span> <span class="token class-name">String</span> var1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">final</span> <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var2 <span class="token operator">=</span> var1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token class-name">Launcher</span><span class="token punctuation">.</span><span class="token function">getClassPath</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">)</span><span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Launcher<span class="token punctuation">.</span>AppClassLoader</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">public</span> <span class="token class-name">Launcher<span class="token punctuation">.</span>AppClassLoader</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                    URL<span class="token punctuation">[</span><span class="token punctuation">]</span> var1x <span class="token operator">=</span> var1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> URL<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token class-name">Launcher</span><span class="token punctuation">.</span><span class="token function">pathToURLs</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Launcher<span class="token punctuation">.</span>AppClassLoader</span><span class="token punctuation">(</span>var1x<span class="token punctuation">,</span> var0<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Launcher<span class="token punctuation">.</span>ExtClassLoader</span> <span class="token function">createExtClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Launcher<span class="token punctuation">.</span>ExtClassLoader</span><span class="token punctuation">)</span><span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedExceptionAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Launcher<span class="token punctuation">.</span>ExtClassLoader</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>                    <span class="token keyword">public</span> <span class="token class-name">Launcher<span class="token punctuation">.</span>ExtClassLoader</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var1 <span class="token operator">=</span> <span class="token class-name">Launcher<span class="token punctuation">.</span>ExtClassLoader</span><span class="token punctuation">.</span><span class="token function">getExtDirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                        <span class="token keyword">int</span> var2 <span class="token operator">=</span> var1<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var3 <span class="token operator">&lt;</span> var2<span class="token punctuation">;</span> <span class="token operator">++</span>var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                            <span class="token class-name">MetaIndex</span><span class="token punctuation">.</span><span class="token function">registerDirectory</span><span class="token punctuation">(</span>var1<span class="token punctuation">[</span>var3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Launcher<span class="token punctuation">.</span>ExtClassLoader</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PrivilegedActionException</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span><span class="token punctuation">)</span>var1<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">void</span> <span class="token function">addExtURL</span><span class="token punctuation">(</span><span class="token class-name">URL</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addURL</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">public</span> <span class="token class-name">ExtClassLoader</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token function">getExtURLs</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Launcher</span><span class="token punctuation">.</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token class-name">SharedSecrets</span><span class="token punctuation">.</span><span class="token function">getJavaNetAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURLClassPath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initLookupCache</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getExtDirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token class-name">String</span> var0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.ext.dirs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>var0 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                <span class="token class-name">StringTokenizer</span> var2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>var0<span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">.</span>pathSeparator<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                <span class="token keyword">int</span> var3 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">countTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                var1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">[</span>var3<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr></table></figure><p>验证</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="4"></td><td><pre> * 类加载器范围</pre></td></tr><tr><td data-num="5"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="6"></td><td><pre> * @DateTime: 2021-02-23 16:38</pre></td></tr><tr><td data-num="7"></td><td><pre> **/</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderScope</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------被Bootstrap类加载器加载的class文件---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">String</span> pathBoot <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"sun.boot.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pathBoot<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">lineSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------被Extension类加载器加载的class文件----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token class-name">String</span> pathExt <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.ext.dirs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pathExt<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">lineSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------被Application类加载器加载的class文件--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token class-name">String</span> pathApp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pathApp<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">lineSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>输出结果</p><pre><code>------------被Bootstrap类加载器加载的class文件---------------
D:\jdk\jdk1.8\jre\lib\resources.jar
D:\jdk\jdk1.8\jre\lib\rt.jar
D:\jdk\jdk1.8\jre\lib\sunrsasign.jar
D:\jdk\jdk1.8\jre\lib\jsse.jar
D:\jdk\jdk1.8\jre\lib\jce.jar
D:\jdk\jdk1.8\jre\lib\charsets.jar
D:\jdk\jdk1.8\jre\lib\jfr.jar
D:\jdk\jdk1.8\jre\classes
------------被Extension类加载器加载的class文件----------------
D:\jdk\jdk1.8\jre\lib\ext
C:\WINDOWS\Sun\Java\lib\ext
------------被Application类加载器加载的class文件--------------
D:\jdk\jdk1.8\jre\lib\charsets.jar
D:\jdk\jdk1.8\jre\lib\deploy.jar
D:\jdk\jdk1.8\jre\lib\ext\access-bridge-64.jar
D:\jdk\jdk1.8\jre\lib\ext\cldrdata.jar
D:\jdk\jdk1.8\jre\lib\ext\dnsns.jar
D:\jdk\jdk1.8\jre\lib\ext\jaccess.jar
D:\jdk\jdk1.8\jre\lib\ext\jfxrt.jar
D:\jdk\jdk1.8\jre\lib\ext\localedata.jar
D:\jdk\jdk1.8\jre\lib\ext\nashorn.jar
D:\jdk\jdk1.8\jre\lib\ext\sunec.jar
D:\jdk\jdk1.8\jre\lib\ext\sunjce_provider.jar
D:\jdk\jdk1.8\jre\lib\ext\sunmscapi.jar
D:\jdk\jdk1.8\jre\lib\ext\sunpkcs11.jar
D:\jdk\jdk1.8\jre\lib\ext\zipfs.jar
D:\jdk\jdk1.8\jre\lib\javaws.jar
D:\jdk\jdk1.8\jre\lib\jce.jar
D:\jdk\jdk1.8\jre\lib\jfr.jar
D:\jdk\jdk1.8\jre\lib\jfxswt.jar
D:\jdk\jdk1.8\jre\lib\jsse.jar
D:\jdk\jdk1.8\jre\lib\management-agent.jar
D:\jdk\jdk1.8\jre\lib\plugin.jar
D:\jdk\jdk1.8\jre\lib\resources.jar
D:\jdk\jdk1.8\jre\lib\rt.jar
D:\Do\spring\jvm\jvm01\out\production\jvm01 \\项目编译后的class文件位置
D:\ide\ideaIC\IntelliJ IDEA Community Edition 2020.3\lib\idea_rt.jar

</code></pre><h2 id="自定义类加载器"><a class="anchor" href="#自定义类加载器">#</a> 自定义类加载器</h2><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210223171558902.png" alt="image-20210223171558902"></p><h3 id="loadclass方法"><a class="anchor" href="#loadclass方法">#</a> loadClass 方法</h3><p>该方法实现了双亲委派机制，调用 ClassLoader 类中的 loadClass (String name) 方法可以将指定类的 class 文件从硬盘加载到内存中，并返回一个 class 对象</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="4"></td><td><pre> * ClassLoader 类中的 localClass () 方法可以将指定类的字节码加载到内存中，并返回类的 class 对象，该 class 对象指向内存中字节码内容，</pre></td></tr><tr><td data-num="5"></td><td><pre> * 反射就是通过该 class 对象进行的操作</pre></td></tr><tr><td data-num="6"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="7"></td><td><pre> * @DateTime: 2021-02-23 17:27</pre></td></tr><tr><td data-num="8"></td><td><pre> **/</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoadClassByHand</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">LoadClassByHand</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.fan.classloader.LoadClassByHand"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//com.fan.classloader.LoadClassByHand</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token comment">// 此外，可以利用类加载器加载资源，参考坦克图片的加载</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">//        LoadClassByHand.class.getClassLoader().getResourceAsStream("");</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="findclass方法"><a class="anchor" href="#findclass方法">#</a> findClass 方法</h3><p>当已知的类加载器无法加载指定路径下某个类的 class 文件时，此时该方法将通过自定义的类加载器去寻找并加载 class 文件，自定义类加载器时需要重写该方法</p><p><img data-src="D:%5Cfan%5Cblog%5Csource_posts%5Cjava%5CJVM%5CJVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD.assets%5Cimage-20210223192717087.png" alt="image-20210223192717087"></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="8"></td><td><pre> * 自定义 ClassLoader</pre></td></tr><tr><td data-num="9"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="10"></td><td><pre> * @DateTime: 2021-02-23 18:56</pre></td></tr><tr><td data-num="11"></td><td><pre> **/</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment">// 加载类的路径</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/Do/spring/jvm/jvm01/"</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将文件放入到输入流</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token operator">=</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从输入流读取并写入到输出流</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 可以写的更加严谨</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将内存中的二进制的 class 文件转化为 class 对象并返回</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//throws ClassNotFoundException</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token class-name">ClassLoader</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCustomClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.fan.classloader.Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将指定类加载到内存中，这里将调用以上自定义的类加载器，因为其他类加载器试着将 Hello 类在各自固定路径下从硬盘加载到内存中，但是固定路径下无法找到这个 Hello 类的 class 文件（这里为了方便，仍将 Hello 类放在了项目下，可以放在其他路径下测试），所以无法将 Hello 类的 class 文件加载到内存，所以将调用 findClass 方法，使用自定义的类加载器从硬盘固定路径下将 Hello 类的 class 文件加载到内存中并返回一个指向该 Hello 的 class 文件的对象</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token class-name">Hello</span> h <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        h<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// Source code recreated from a .class file by IntelliJ IDEA</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// (powered by FernFlower decompiler)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><pre><code>Hello!
sun.misc.Launcher$AppClassLoader@18b4aac2
sun.misc.Launcher$AppClassLoader@18b4aac2
</code></pre><h2 id="加密"><a class="anchor" href="#加密">#</a> 加密</h2><p>加密 class 文件，防止反编译</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="9"></td><td><pre> * 自定义 ClassLoader</pre></td></tr><tr><td data-num="10"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="11"></td><td><pre> * @DateTime: 2021-02-23 18:56</pre></td></tr><tr><td data-num="12"></td><td><pre> **/</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomClassLoaderWithEncription</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> seed <span class="token operator">=</span> <span class="token number">0B10110110</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token comment">// 加载类的路径</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/Do/spring/jvm/jvm01/out/production/jvm01/"</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将文件放入到输入流</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token operator">=</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b <span class="token operator">^</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 由于之前 Hello 类的 class 文件已经加密，这里再次异或后就是解密，否则 JVM 无法识别加密的内容</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 可以写的更加严谨</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将内存中的二进制流的 class 文件转化为 class 对象</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//throws ClassNotFoundException</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token function">encFile</span><span class="token punctuation">(</span><span class="token string">"com.fan.classloader.Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token class-name">ClassLoader</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCustomClassLoaderWithEncription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.fan.classloader.Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将指定类加载到内存中，这里将调用以上自定义的类加载器，</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token comment">// 因为其他类加载器试着将 Hello 类在各自固定路径下从硬盘加载到内存中，</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token comment">// 但是固定路径下无法找到这个 Hello 类的 class 文件（这里为了方便，仍将 Hello 类放在了项目下，可以放在其他路径下测试），</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token comment">// 所以无法将 Hello 类的 class 文件加载到内存，所以将调用 findClass 方法，</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token comment">// 使用自定义的类加载器从硬盘固定路径下将 Hello 类的 class 文件加载到内存中并返回一个指向该 Hello 的 class 文件的对象</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token class-name">Hello</span> h <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        h<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token comment">// 加密 class 文件，防止反编译</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">encFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token comment">// 加载类的路径</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/Do/spring/jvm/jvm01/out/production/jvm01/"</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将文件放入到输入流</span></pre></td></tr><tr><td data-num="63"></td><td><pre>            <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/Do/spring/jvm/jvm01/out/production/jvm01/"</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token operator">=</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b <span class="token operator">^</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将每个字节与某个值异或来实现加密，再次 异或就是解密</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="编译器"><a class="anchor" href="#编译器">#</a> 编译器</h2><p>java 在 JVM 中是解释和编译混合执行的，一些热点代码在 JVM 中将被编译为本地代码（根据操作系统的不同，本地代码格式不同，如 win 中是 exe，linux 中是 elf），而不用每次都解释 class 文件去执行，提高了执行效率。</p><p>检测热点代码：-XX:CompileThreshold = 10000</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210224102552260.png" alt="image-20210224102552260"></p><p>测试 JVM 在不同模式下以下代码的运行时间，默认是混合模式，-Xint 为解释模式，-Xcomp 为纯编译模式，IDEA 中 JVM 模式的更改如下 Run-Edit Configurations</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210224111100699.png" alt="image-20210224111100699"></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>testCompile</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="4"></td><td><pre> * 测试 JVM 在不同模式下代码的运行时间</pre></td></tr><tr><td data-num="5"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="6"></td><td><pre> * @DateTime: 2021-02-24 10:54</pre></td></tr><tr><td data-num="7"></td><td><pre> **/</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCompile</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10_0000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10_0000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10_0000L</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">long</span> j <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p><p>混合模式下代码的执行时间不到 4 秒，解释模式下代码的执行时间非常长，纯编译模式下代码的执行时间比混合模式稍快，所以，JVM 的混合模式的存在是必要的。</p><h2 id="懒加载"><a class="anchor" href="#懒加载">#</a> 懒加载</h2><p>JVM 并没有规定一个 class 文件应该何时被加载到内存，需要某个类的时</p><p>候该类的 class 文件才会被加载，即按需加载，但是当 class 文件被加载到内存后，严格规定了什么时候必须初始化。</p><p><img data-src="https://gitee.com/bfanfanfan/img/raw/master/docsify/image-20210224133146641.png" alt="image-20210224133146641"></p><p>验证 class 文件的懒加载</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>lazyloading</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="4"></td><td><pre> * 测试懒加载</pre></td></tr><tr><td data-num="5"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="6"></td><td><pre> * @DateTime: 2021-02-24 13:43</pre></td></tr><tr><td data-num="7"></td><td><pre> **/</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyLoading</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">P</span> p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">X</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">P</span><span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">P</span><span class="token punctuation">.</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.fan.lazyloading.LazyLoading$P"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">P</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// 访问 final 的值不需要加载整个类</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">static</span>  <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// 由于类加载过程为 loading、linking、initializing（初始化时一定会执行 static, 如果是 final 修饰的，那么不需要加载类就能拿到 final 修饰的变量），所以只要加载了该类，那么一定会执行以下 static</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">static</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"P"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token keyword">extends</span> <span class="token class-name">P</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">static</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="问题"><a class="anchor" href="#问题">#</a> 问题</h2><h3 id="问题一如何指定父类加载器"><a class="anchor" href="#问题一如何指定父类加载器">#</a> 问题一：如何指定父类加载器？</h3><p>如果要指定自定义的类加载器为父类加载器，只需要继承 ClassLoader 后，在无参构造中通过 super () 指定父级类加载器即可</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="4"></td><td><pre> * 指定父级类加载器：继承 ClassLoader 后，在无参构造中通过 super () 指定父级类加载器即可</pre></td></tr><tr><td data-num="5"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="6"></td><td><pre> * @DateTime: 2021-02-24 16:10</pre></td></tr><tr><td data-num="7"></td><td><pre> **/</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomeParentClassLoader</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MyCustomClassLoader</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCustomClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyParentClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">public</span> <span class="token class-name">MyParentClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="问题二如何打破双亲委派机制"><a class="anchor" href="#问题二如何打破双亲委派机制">#</a> 问题二：如何打破双亲委派机制？</h3><p>由于双亲委派机制在 ClassLoader 类的 loadClass 方法中实现，所以只要重写该方法就能打破双亲委派机制</p><p>那么在什么时候需要打破双亲委派机制呢？</p><ol><li>JDK1.2 之前，自定义 ClassLoader 都必须重写 loadClass ()</li><li>ThreadContextClassLoader 可以实现基础类调用实现类代码，通过 thread.setContextClassLoader 指定</li><li>热启动，热部署<ol><li>osgi 、tomcat 都有自己的指定的 classloader（可以加载同一类库的不同版本），如 tomcat 中每一个 WebApplication 都有一个 classloader，不同的 classloader 可以加载同名的类，这就意味着打破了双亲委派机制</li></ol></li></ol><h2 id="热部署实现"><a class="anchor" href="#热部署实现">#</a> 热部署实现</h2><p>继承 ClassLoader 类并重写 loadClass 方法，在 loadClass 方法中去掉双亲委派机制，只要 class 文件文件改变，就重新创建自定义的类加载器对象来重新加载 class 文件</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>classloader</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/**</span></pre></td></tr><tr><td data-num="9"></td><td><pre> * 热部署实现，重写 loadClass 方法，那么每加载一次 class 文件都会调用重写的 loadClass 方法，loadClass 方法中的 defineClass 方法就会生成新的 class 文件对应的类对象。</pre></td></tr><tr><td data-num="10"></td><td><pre> * 重写的 loadClass 方法打破了双亲委派机制，不用去询问类加载器的缓存中是否加载过 class 文件，而是直接通过自定义的类加载器直接加载 class 文件并生成相应的类对象</pre></td></tr><tr><td data-num="11"></td><td><pre> * @Author: fan</pre></td></tr><tr><td data-num="12"></td><td><pre> * @DateTime: 2021-02-24 16:56</pre></td></tr><tr><td data-num="13"></td><td><pre> **/</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassReloading2</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\Do\\spring\\jvm\\jvm01\\out\\production\\jvm01\\"</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果要加载的 class 文件不存在，那么通过父级类加载器加载 class 文件，否则直接自己加载 class 文件</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>is<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从输入流中读取一定字节数并存入到字节数组 b 中</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将字节数组转换为一个 lei 对象</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token class-name">MyClassLoader</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.fan.classloader.Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>        m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新 new 一个类加载器对象，防止从类加载器缓存中读取已经加载过的 class 文件</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token class-name">Class</span> clazzNew <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.fan.classloader.Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz <span class="token operator">==</span> clazzNew<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><div class="tags"><a href="/tags/Java/" rel="tag"><i class="ic i-tag"></i> Java</a> <a href="/tags/JVM/" rel="tag"><i class="ic i-tag"></i> JVM</a></div></div><footer><div class="meta"><span class="item"><span class="icon"><i class="ic i-calendar-check"></i> </span><span class="text">更新于</span> <time title="修改时间：2021-12-24 10:48:03" itemprop="dateModified" datetime="2021-12-24T10:48:03+08:00">2021-12-24</time></span></div><div class="reward"><button><i class="ic i-heartbeat"></i> 赞赏</button><p>请我喝[茶]~(￣▽￣)~*</p><div id="qr"><div><img data-src="/images/wechatpay.png" alt="fanfanfan 微信支付"><p>微信支付</p></div><div><img data-src="/images/alipay.png" alt="fanfanfan 支付宝"><p>支付宝</p></div><div><img data-src="/images/paypal.png" alt="fanfanfan PayPal"><p>PayPal</p></div></div></div><div id="copyright"><ul><li class="author"><strong>本文作者： </strong>fanfanfan <i class="ic i-at"><em>@</em></i></li><li class="link"><strong>本文链接：</strong> <a href="https://baiyezi.vip/JVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD" title="JVM-类的加载">https://baiyezi.vip/JVM-类的加载</a></li><li class="license"><strong>版权声明： </strong>本站所有文章除特别声明外，均采用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC9kZWVkLnpo"><i class="ic i-creative-commons"><em>(CC)</em></i>BY-NC-SA</span> 许可协议。转载请注明出处！</li></ul></div></footer></article></div><div class="post-nav"><div class="item left"><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8A%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95" itemprop="url" rel="prev" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;bfanfanfan&#x2F;img&#x2F;raw&#x2F;master&#x2F;guzhuang&#x2F;20211225105419.jpg" title="微服务以及架构发展"><span class="type">上一篇</span> <span class="category"><i class="ic i-flag"></i> 微服务</span><h3>微服务以及架构发展</h3></a></div><div class="item right"><a href="/SpringCloud-Netflix%E4%BD%93%E7%B3%BB" itemprop="url" rel="next" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;bfanfanfan&#x2F;img&#x2F;raw&#x2F;master&#x2F;guzhuang&#x2F;20211225104957.png" title="SpringCloud-Netflix体系"><span class="type">下一篇</span> <span class="category"><i class="ic i-flag"></i> 微服务</span><h3>SpringCloud-Netflix体系</h3></a></div></div><div class="wrap" id="comments"></div></div><div id="sidebar"><div class="inner"><div class="panels"><div class="inner"><div class="contents panel pjax" data-title="文章目录"><ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#jvm%E5%9F%BA%E7%A1%80"><span class="toc-number">1.</span> <span class="toc-text">JVM 基础</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#jdk-jre-jvm"><span class="toc-number">1.1.</span> <span class="toc-text">JDK、JRE、JVM</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F"><span class="toc-number">1.2.</span> <span class="toc-text">Class 文件格式</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%BD%BF%E7%94%A8javap%E6%9F%A5%E7%9C%8Bclass%E6%96%87%E4%BB%B6"><span class="toc-number">1.3.</span> <span class="toc-text">使用 javap 查看 class 文件</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%BD%BF%E7%94%A8idea%E6%8F%92%E4%BB%B6jclasslib%E6%9F%A5%E7%9C%8Bclass%E6%96%87%E4%BB%B6"><span class="toc-number">1.4.</span> <span class="toc-text">使用 IDEA 插件 JClasslib 查看 class 文件</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#jvm%E6%8C%87%E4%BB%A4%E9%9B%86"><span class="toc-number">2.</span> <span class="toc-text">JVM 指令集</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%88%9D%E5%A7%8B%E5%8C%96"><span class="toc-number">3.</span> <span class="toc-text">类加载 - 初始化</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%9D%A2%E8%AF%95%E9%A2%98"><span class="toc-number">3.1.</span> <span class="toc-text">面试题</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#new%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%BF%87%E7%A8%8B"><span class="toc-number">3.2.</span> <span class="toc-text">new 对象的过程</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8"><span class="toc-number">3.3.</span> <span class="toc-text">类加载器</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE"><span class="toc-number">3.4.</span> <span class="toc-text">双亲委派</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E8%8C%83%E5%9B%B4"><span class="toc-number">3.5.</span> <span class="toc-text">类加载器范围</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8"><span class="toc-number">4.</span> <span class="toc-text">自定义类加载器</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#loadclass%E6%96%B9%E6%B3%95"><span class="toc-number">4.1.</span> <span class="toc-text">loadClass 方法</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#findclass%E6%96%B9%E6%B3%95"><span class="toc-number">4.2.</span> <span class="toc-text">findClass 方法</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%8A%A0%E5%AF%86"><span class="toc-number">5.</span> <span class="toc-text">加密</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%BC%96%E8%AF%91%E5%99%A8"><span class="toc-number">6.</span> <span class="toc-text">编译器</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%87%92%E5%8A%A0%E8%BD%BD"><span class="toc-number">7.</span> <span class="toc-text">懒加载</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E9%97%AE%E9%A2%98"><span class="toc-number">8.</span> <span class="toc-text">问题</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%97%AE%E9%A2%98%E4%B8%80%E5%A6%82%E4%BD%95%E6%8C%87%E5%AE%9A%E7%88%B6%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8"><span class="toc-number">8.1.</span> <span class="toc-text">问题一：如何指定父类加载器？</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%97%AE%E9%A2%98%E4%BA%8C%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6"><span class="toc-number">8.2.</span> <span class="toc-text">问题二：如何打破双亲委派机制？</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%83%AD%E9%83%A8%E7%BD%B2%E5%AE%9E%E7%8E%B0"><span class="toc-number">9.</span> <span class="toc-text">热部署实现</span></a></li></ol></div><div class="related panel pjax" data-title="系列文章"><ul><li><a href="/Linux%E4%B8%8B%E5%AE%89%E8%A3%85MySQL" rel="bookmark" title="Linux下安装MySQL">Linux下安装MySQL</a></li><li><a href="/MySQL%E5%9F%BA%E7%A1%80" rel="bookmark" title="MySQL基础">MySQL基础</a></li><li><a href="/IOC%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="IOC配置方式（一）">IOC配置方式（一）</a></li><li><a href="/IOC%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89" rel="bookmark" title="IOC配置方式（二）">IOC配置方式（二）</a></li><li><a href="/IOC%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F" rel="bookmark" title="IOC注解方式">IOC注解方式</a></li><li><a href="/AOP" rel="bookmark" title="AOP">AOP</a></li><li><a href="/SpringBoot%E5%85%A5%E9%97%A8" rel="bookmark" title="SpringBoot入门">SpringBoot入门</a></li><li><a href="/SpringBoot-Web%E5%BC%80%E5%8F%91" rel="bookmark" title="SpringBoot-Web开发">SpringBoot-Web开发</a></li><li><a href="/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86" rel="bookmark" title="SpringBoot自动装配原理">SpringBoot自动装配原理</a></li><li><a href="/zookeeper%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" rel="bookmark" title="zookeeper搭建及基本概念">zookeeper搭建及基本概念</a></li><li><a href="/zookeeper%E5%8E%9F%E7%90%86" rel="bookmark" title="zookeeper原理">zookeeper原理</a></li><li><a href="/zookeeper%E6%A1%88%E4%BE%8B" rel="bookmark" title="zookeeper案例">zookeeper案例</a></li><li><a href="/MySQL%E8%B0%83%E4%BC%98%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="MySQL调优（一）">MySQL调优（一）</a></li><li><a href="/redis%E5%AE%89%E8%A3%85%E5%8F%8ANIO%E5%8E%9F%E7%90%86" rel="bookmark" title="redis安装及NIO原理">redis安装及NIO原理</a></li><li><a href="/SpringMVC%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="SpringMVC入门（一）">SpringMVC入门（一）</a></li><li><a href="/SpringMVC%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89" rel="bookmark" title="SpringMVC入门（二）">SpringMVC入门（二）</a></li><li><a href="/SpringMVC-REST%E9%A3%8E%E6%A0%BC" rel="bookmark" title="SpringMVC-REST风格">SpringMVC-REST风格</a></li><li><a href="/SpringMVC%E8%BF%9B%E9%98%B6" rel="bookmark" title="SpringMVC进阶">SpringMVC进阶</a></li><li><a href="/SpringMVC%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93" rel="bookmark" title="SpringMVC源码总结">SpringMVC源码总结</a></li><li><a href="/shiro%E5%85%A5%E9%97%A8" rel="bookmark" title="shiro入门">shiro入门</a></li><li><a href="/shiro%E6%95%B4%E5%90%88SpringBoot" rel="bookmark" title="shiro整合SpringBoot">shiro整合SpringBoot</a></li><li><a href="/shiro%E7%9A%84session%E7%AE%A1%E7%90%86" rel="bookmark" title="shiro的session管理">shiro的session管理</a></li><li><a href="/shiro%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E7%99%BB%E5%BD%95" rel="bookmark" title="shiro的缓存机制与分布式登录">shiro的缓存机制与分布式登录</a></li><li><a href="/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95" rel="bookmark" title="单点登录">单点登录</a></li><li><a href="/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86" rel="bookmark" title="线程基础知识">线程基础知识</a></li><li><a href="/%E5%AE%B9%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0" rel="bookmark" title="容器与线程池">容器与线程池</a></li><li><a href="/Win10%E5%AE%89%E8%A3%85docker" rel="bookmark" title="Win10安装docker">Win10安装docker</a></li><li><a href="/Win10%E5%AE%89%E8%A3%85docker" rel="bookmark" title="Win10安装docker">Win10安装docker</a></li><li><a href="/JMH" rel="bookmark" title="JMH">JMH</a></li><li><a href="/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B" rel="bookmark" title="并发编程">并发编程</a></li><li><a href="/java-%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB" rel="bookmark" title="java-日志体系">java-日志体系</a></li><li><a href="/redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" rel="bookmark" title="redis的数据类型">redis的数据类型</a></li><li><a href="/redis%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8" rel="bookmark" title="redis进阶使用">redis进阶使用</a></li><li><a href="/redis%E7%9A%84%E9%9B%86%E7%BE%A4" rel="bookmark" title="redis的集群">redis的集群</a></li><li><a href="/redis%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8" rel="bookmark" title="redis在开发中的简单使用">redis在开发中的简单使用</a></li><li><a href="/Composite%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Composite组合模式">Composite组合模式</a></li><li><a href="/ChainOfResponsibility%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F" rel="bookmark" title="ChainOfResponsibility责任链模式">ChainOfResponsibility责任链模式</a></li><li><a href="/Decorator%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Decorator装饰器模式">Decorator装饰器模式</a></li><li><a href="/Facade%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Facade门面模式">Facade门面模式</a></li><li><a href="/Flyweight%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Flyweight享元模式">Flyweight享元模式</a></li><li><a href="/Factory%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Factory工厂模式">Factory工厂模式</a></li><li><a href="/Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Iterator迭代器模式">Iterator迭代器模式</a></li><li><a href="/Mediator%E8%B0%83%E5%81%9C%E8%80%85%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Mediator调停者模式">Mediator调停者模式</a></li><li><a href="/Observer%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Observer观察者模式">Observer观察者模式</a></li><li><a href="/Proxy%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F" rel="bookmark" title="Proxy代理模式">Proxy代理模式</a></li><li><a href="/Singleton%E5%8D%95%E4%BE%8B" rel="bookmark" title="Singleton单例">Singleton单例</a></li><li><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8A%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95" rel="bookmark" title="微服务以及架构发展">微服务以及架构发展</a></li><li class="active"><a href="/JVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD" rel="bookmark" title="JVM-类的加载">JVM-类的加载</a></li><li><a href="/SpringCloud-Netflix%E4%BD%93%E7%B3%BB" rel="bookmark" title="SpringCloud-Netflix体系">SpringCloud-Netflix体系</a></li><li><a href="/%E5%BA%8F%E5%88%97%E5%8C%96" rel="bookmark" title="序列化">序列化</a></li><li><a href="/JVM-JMM" rel="bookmark" title="JVM-JMM">JVM-JMM</a></li><li><a href="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84" rel="bookmark" title="分布式系统与高并发系统架构">分布式系统与高并发系统架构</a></li><li><a href="/JVM-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA" rel="bookmark" title="JVM-对象的创建">JVM-对象的创建</a></li><li><a href="/JVM-JVM%E8%B0%83%E4%BC%98" rel="bookmark" title="JVM-JVM调优">JVM-JVM调优</a></li><li><a href="/JVM-GC" rel="bookmark" title="JVM-GC">JVM-GC</a></li><li><a href="/SpringCloud-Alibaba%E4%BD%93%E7%B3%BB" rel="bookmark" title="SpringCloud-Alibaba体系">SpringCloud-Alibaba体系</a></li><li><a href="/SpringCloud-SpringCloud%E4%BD%93%E7%B3%BB" rel="bookmark" title="SpringCloud-SpringCloud体系">SpringCloud-SpringCloud体系</a></li><li><a href="/Apollo" rel="bookmark" title="Apollo">Apollo</a></li><li><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89" rel="bookmark" title="微服务中的会话管理（一）">微服务中的会话管理（一）</a></li><li><a href="/%E7%A3%81%E7%9B%98IO%E4%B8%8E%E7%BD%91%E7%BB%9CIO" rel="bookmark" title="磁盘IO与网络IO">磁盘IO与网络IO</a></li><li><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89" rel="bookmark" title="微服务中的会话管理（二）">微服务中的会话管理（二）</a></li><li><a href="/HTTPS" rel="bookmark" title="HTTPS">HTTPS</a></li><li><a href="/RocketMQ-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5" rel="bookmark" title="RocketMQ-基础概念">RocketMQ-基础概念</a></li><li><a href="/RocketMQ-%E6%B6%88%E6%81%AF%E3%80%81%E4%BA%8B%E5%8A%A1" rel="bookmark" title="RocketMQ-消息、事务">RocketMQ-消息、事务</a></li><li><a href="/Kafka-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84" rel="bookmark" title="Kafka-整体架构">Kafka-整体架构</a></li><li><a href="/%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B" rel="bookmark" title="网络IO模型">网络IO模型</a></li><li><a href="/Kafka-%E6%90%AD%E5%BB%BA" rel="bookmark" title="Kafka-搭建">Kafka-搭建</a></li><li><a href="/Netty" rel="bookmark" title="Netty">Netty</a></li><li><a href="/nginx%E5%AE%9E%E6%88%98" rel="bookmark" title="nginx实战">nginx实战</a></li><li><a href="/Java%E5%92%8C%E4%B8%B2%E5%8F%A3%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1" rel="bookmark" title="Java和串口进行通信">Java和串口进行通信</a></li></ul></div><div class="overview panel" data-title="站点概览"><div class="author" itemprop="author" itemscope itemtype="http://schema.org/Person"><img class="image" itemprop="image" alt="fanfanfan" data-src="/images/avatar.png"><p class="name" itemprop="name">fanfanfan</p><div class="description" itemprop="description">花有重开日，人无再少年</div></div><nav class="state"><div class="item posts"><a href="/archives/"><span class="count">73</span> <span class="name">文章</span></a></div><div class="item categories"><a href="/categories/"><span class="count">3</span> <span class="name">分类</span></a></div><div class="item tags"><a href="/tags/"><span class="count">77</span> <span class="name">标签</span></a></div></nav><div class="social"></div><ul class="menu"><li class="item"><a href="/" rel="section"><i class="ic i-home"></i>首页</a></li><li class="item dropdown"><a href="javascript:void(0);"><i class="ic i-feather"></i>文章</a><ul class="submenu"><li class="item"><a href="/archives/" rel="section"><i class="ic i-list-alt"></i>归档</a></li><li class="item"><a href="/categories/" rel="section"><i class="ic i-th"></i>分类</a></li><li class="item"><a href="/tags/" rel="section"><i class="ic i-tags"></i>标签</a></li></ul></li><li class="item"><a href="/friends/" rel="section"><i class="ic i-magic"></i>友链</a></li><li class="item"><a href="/about/" rel="section"><i class="ic i-user"></i>关于</a></li></ul></div></div></div><ul id="quick"><li class="prev pjax"><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8A%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95" rel="prev" title="上一篇"><i class="ic i-chevron-left"></i></a></li><li class="up"><i class="ic i-arrow-up"></i></li><li class="down"><i class="ic i-arrow-down"></i></li><li class="next pjax"><a href="/SpringCloud-Netflix%E4%BD%93%E7%B3%BB" rel="next" title="下一篇"><i class="ic i-chevron-right"></i></a></li><li class="percent"></li></ul></div></div><div class="dimmer"></div></div></main><footer id="footer"><div class="inner"><div class="widgets"><div class="rpost pjax"><h2>随机文章</h2><ul><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/Netty" title="Netty">Netty</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/Flyweight%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F" title="Flyweight享元模式">Flyweight享元模式</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/Composite%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F" title="Composite组合模式">Composite组合模式</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/%E7%A3%81%E7%9B%98IO%E4%B8%8E%E7%BD%91%E7%BB%9CIO" title="磁盘IO与网络IO">磁盘IO与网络IO</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/Factory%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F" title="Factory工厂模式">Factory工厂模式</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a> <i class="ic i-angle-right"></i> <a href="/categories/java/%E5%BE%AE%E6%9C%8D%E5%8A%A1/" title="分类于 微服务">微服务</a></div><span><a href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8A%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95" title="微服务以及架构发展">微服务以及架构发展</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95" title="单点登录">单点登录</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/Kafka-%E6%90%AD%E5%BB%BA" title="Kafka-搭建">Kafka-搭建</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/instruments/" title="分类于 工具">工具</a></div><span><a href="/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E7%BF%BB%E8%AF%91%E5%B0%8F%E5%B7%A5%E5%85%B7%EF%BC%88%E4%B8%80%EF%BC%89" title="手动实现翻译小工具（一）">手动实现翻译小工具（一）</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/java/" title="分类于 Java">Java</a></div><span><a href="/shiro%E5%85%A5%E9%97%A8" title="shiro入门">shiro入门</a></span></li></ul></div><div><h2>最新评论</h2><ul class="leancloud-recent-comment"></ul></div></div><div class="status"><div class="copyright">&copy; 2010 – <span itemprop="copyrightYear">2021</span> <span class="with-love"><i class="ic i-sakura rotate"></i> </span><span class="author" itemprop="copyrightHolder">fanfanfan @</span></div><div class="count"><span class="post-meta-item-icon"><i class="ic i-chart-area"></i> </span><span title="站点总字数">1.3m 字</span> <span class="post-meta-divider">|</span> <span class="post-meta-item-icon"><i class="ic i-coffee"></i> </span><span title="站点阅读时长">20:22</span></div><div class="powered-by">基于 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo</span> & Theme.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==">Shoka</span></div></div></div></footer></div><script data-config type="text/javascript">var LOCAL={path:"/JVM-类的加载",favicon:{show:"书院十四先生",hide:"书院十四先生"},search:{placeholder:"文章搜索",empty:"关于 「 ${query} 」，什么也没搜到",stats:"${time} ms 内找到 ${hits} 条结果"},valine:!0,fancybox:!0,copyright:'复制成功，转载请遵守 <i class="ic i-creative-commons"></i>BY-NC-SA 协议。',ignores:[function(e){return e.includes("#")},function(e){return new RegExp(LOCAL.path+"$").test(e)}]}</script><script src="https://cdn.polyfill.io/v2/polyfill.js"></script><script src="//cdn.jsdelivr.net/combine/npm/pace-js@1.0.2/pace.min.js,npm/pjax@0.2.8/pjax.min.js,npm/whatwg-fetch@3.4.0/dist/fetch.umd.min.js,npm/animejs@3.2.0/lib/anime.min.js,npm/algoliasearch@4/dist/algoliasearch-lite.umd.js,npm/instantsearch.js@4/dist/instantsearch.production.min.js,npm/lozad@1/dist/lozad.min.js,npm/quicklink@2/dist/quicklink.umd.js"></script><script src="/js/app.js?v=0.2.5"></script></body></html><!-- rebuild by hrmmi -->